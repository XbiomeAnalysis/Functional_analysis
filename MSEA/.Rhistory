print(tmp_row)
}
'a' %in% ['a','a','b']
'a' %in% c('a','a','b')
'a' == c('a','a','b')
sum('a' == c('a','a','b'))
lst <- list()
for (i in All_Genus_in_res){
count_vec <- c()
for (j in (1:nrow(Top_MSEA_res))){
count = sum(i == Top_MSEA_res$shared)
count_vec <- c(count_vec, count)
}
lst[i] <- count_vec
}
All_Genus_in_res <- Top_MSEA_res$shared %>% unlist() %>% str_remove_all('\\[') %>% str_remove_all('\\]') %>% str_remove_all("'") %>% str_split(', ') %>% unlist() %>% unique()
lst <- list()
for (i in All_Genus_in_res){
count_vec <- c()
for (j in (1:nrow(Top_MSEA_res))){
count = sum(i == Top_MSEA_res$shared)
count_vec <- c(count_vec, count)
}
lst[i] <- count_vec
}
print(lst)
Top_MSEA_res$shared
Top_MSEA_res[i,] %>% .$shared
Top_MSEA_res[1,] %>% .$share
Top_MSEA_res[1,]
Top_MSEA_res[1,'shared']
sum('a' == c('b'))
lst <- list()
for (i in All_Genus_in_res){
count_vec <- c()
for (j in (1:nrow(Top_MSEA_res))){
print()
count = sum(i == as.character(Top_MSEA_res[j,'shared']))
count_vec <- c(count_vec, count)
}
lst[i] <- count_vec
}
for (i in All_Genus_in_res){
count_vec <- c()
for (j in (1:nrow(Top_MSEA_res))){
count = sum(i == as.character(Top_MSEA_res[j,'shared']))
count_vec <- c(count_vec, count)
}
lst[i] <- count_vec
}
lst
for (i in All_Genus_in_res){
count_vec <- c()
for (j in (1:nrow(Top_MSEA_res))){
count = sum(i == as.character(Top_MSEA_res[j,'shared']))
print(count)
count_vec <- c(count_vec, count)
}
lst[i] <- count_vec
}
i
i == as.character(Top_MSEA_res[j,'shared'])
Top_MSEA_res[j,'shared']
lst <- list()
for (i in All_Genus_in_res){
count_vec <- c()
for (j in (1:nrow(Top_MSEA_res))){
target_string = Top_MSEA_res[j,'shared']  %>% str_remove_all('\\[') %>% str_remove_all('\\]') %>% str_remove_all("'") %>% str_split(', ') %>% unlist()
count = sum(i == target_string)
print(count)
count_vec <- c(count_vec, count)
}
lst[i] <- count_vec
}
lst
count
count_vec
lst <- list()
for (i in All_Genus_in_res){
count_vec <- c()
for (j in (1:nrow(Top_MSEA_res))){
target_string = Top_MSEA_res[j,'shared']  %>% str_remove_all('\\[') %>% str_remove_all('\\]') %>% str_remove_all("'") %>% str_split(', ') %>% unlist()
count = sum(i == target_string)
count_vec <- c(count_vec, count)
}
lst[[i]] <- count_vec
}
lst
print(lst %>% as.data.frame())
cbind(Top_MSEA_res, as.data.frame(lst))
cbind(Top_MSEA_res$term, as.data.frame(lst))
cbind(Top_MSEA_res, as.data.frame(lst)) %>% select(term, All_Genus_in_res)
cbind(Top_MSEA_res, as.data.frame(lst)) %>% select(term, all_of(All_Genus_in_res))
library(tibble)
cbind(Top_MSEA_res, as.data.frame(lst)) %>% select(term, all_of(All_Genus_in_res)) %>% column_to_rownames('term')
library(dplyr)
library(magrittr)
library(ggplot2)
library(ggbipart)
library(stringr)
library(tibble)
MSEA_res = read.csv('/share/projects/SOP/Functional_Analysis/Tongbangzhuo/MSEA/testout.csv', sep = '\t')
## Filter MSEA result with qvalue
MSEA_res %>% filter(qvalue < 0.05)
## Draw bipartite with top 10 combined_score human genes
## Define data transforming function
Transform_data <- function(df){
All_Genus_in_res <- df$shared %>% unlist() %>% str_remove_all('\\[') %>% str_remove_all('\\]') %>% str_remove_all("'") %>% str_split(', ') %>% unlist() %>% unique()
lst <- list()
for (i in All_Genus_in_res){
count_vec <- c()
for (j in (1:nrow(df))){
target_string = df[j,'shared']  %>% str_remove_all('\\[') %>% str_remove_all('\\]') %>% str_remove_all("'") %>% str_split(', ') %>% unlist()
count = sum(i == target_string)
count_vec <- c(count_vec, count)
}
lst[[i]] <- count_vec
}
bipartite_tbl <- cbind(Top_MSEA_res, as.data.frame(lst)) %>% select(term, all_of(All_Genus_in_res)) %>% column_to_rownames('term')
return(bipartite_tbl)
}
## Select top 10 human genes
Top_MSEA_res <- MSEA_res[1:10,]
## Generate data for bipartit graph
bipartite_tbl <- Transform_data(Top_MSEA_res)
bipartite_tbl
g<- bip_railway(bipartite_tbl, label=T)
g+ coord_flip()
bip_railway
g<- bip_railway(bipartite_tbl, label=T)
g <- bip_railway(bipartite_tbl, label=T)
g
ï¼Ÿcoord_flip
?coord_flip
bip_railway(bipartite_tbl, label=T)
?ggbipart
g <- bip_railway(bipartite_tbl, label=T, color= "mode")
g <- bip_railway(bipartite_tbl, label=T)
g + coord_flip()
p
g
bip_railway
cbind(rep(2, dim(mymat)[1]), seq(1, dim(mymat)[1]) +
2)
mymat <- bipartite_tbl
coordP <- cbind(rep(2, dim(mymat)[1]), seq(1, dim(mymat)[1]) +
2)
coordP
coordA <- cbind(rep(4, dim(mymat)[2]), seq(1, dim(mymat)[2]) +
2)
coordA
coordP <- cbind(rep(2, dim(mymat)[1]), seq(1, dim(mymat)[1]) +
2)
coordA <- cbind(rep(4, dim(mymat)[2]), seq(1, dim(mymat)[2]) +
2)
mylayout <- as.matrix(rbind(coordP, coordA))
bip_init_network(mymat)
bip_init_network(mymat)
test.net <- bip_init_network(mymat)
test.net
mymat
mylayout
GGally::ggnet2(test.net, mode = mylayout, label = label,
size = 9, label.size = 3, layout.exp = 1.5)
GGally::ggnet2(test.net, mode = mylayout, label = T,
size = 9, label.size = 3, layout.exp = 1.5)
GGally::ggnet2(test.net, mode = mylayout, label = F,
size = 9, label.size = 3, layout.exp = 1.5)
GGally::ggnet2(test.net, mode = mylayout, label = T,
size = 9, label.size = 3, layout.exp = 1.5)
test.net
?bip_init_network
test.net
as.matrix(rbind(coordP, coordA))
dim(mymat)
mymat
?ggnet2
test.net
mylayout <- as.matrix(rbind(coordP, coordA))
test.net <- bip_init_network(mymat, model1 = 'HumanGenes',mode2 = 'MicrobeGenus')
bip_init_network
mylayout <- as.matrix(rbind(coordP, coordA))
test.net <- bip_init_network(mymat, mode1 = 'HumanGenes',mode2 = 'MicrobeGenus')
GGally::ggnet2(test.net, mode = mylayout, label = T,
size = 9, label.size = 3, layout.exp = 1.5,)
test.net
test.net$mel
test.net$gal
test.net$val
test.net$val$mode
"phono" = ifelse(letters[1:10] %in% c("a", "e", "i"), "vowel", "consonant")
phono
letters[1:10]
test.net %v%
test.net
GGally::ggnet2(test.net, mode = mylayout, label = T, size = "degree",
label.size = 3, layout.exp = 1.5)
test.net$oel
test.net$iel
test.net$val
test.net$val %>% as.data.frame()
test.net$val[1]
test.net$val[2]
get.network.attribute(test.net)
test.net
#get.network.attribute(test.net)
get.vertex.attribute(test.net, attrname="vertex.names")
get.vertex.attribute(test.net, attrname="mode")
ifelse(test.net %v% "phono" == "vowel", "steelblue", "tomato")
"color" = ifelse(test.net %v% "phono" == "vowel", "steelblue", "tomato")
color
ifelse(letters[1:10] %in% c("a", "e", "i"), "vowel", "consonant")
MSEA_res = read.csv('/share/projects/SOP/Functional_Analysis/Tongbangzhuo/MSEA/testout.csv', sep = '\t')
## Filter MSEA result with qvalue
MSEA_res %>% filter(qvalue < 0.05)
## Draw bipartite with top 10 combined_score human genes
## Define data transforming function
Transform_data <- function(df){
All_Genus_in_res <- df$shared %>% unlist() %>% str_remove_all('\\[') %>% str_remove_all('\\]') %>% str_remove_all("'") %>% str_split(', ') %>% unlist() %>% unique()
lst <- list()
for (i in All_Genus_in_res){
count_vec <- c()
for (j in (1:nrow(df))){
target_string = df[j,'shared']  %>% str_remove_all('\\[') %>% str_remove_all('\\]') %>% str_remove_all("'") %>% str_split(', ') %>% unlist()
count = sum(i == target_string)
count_vec <- c(count_vec, count)
}
lst[[i]] <- count_vec
}
bipartite_tbl <- cbind(Top_MSEA_res, as.data.frame(lst)) %>% select(term, all_of(All_Genus_in_res)) %>% column_to_rownames('term')
return(bipartite_tbl)
}
## Select top 10 human genes
Top_MSEA_res <- MSEA_res[1:10,]
## Generate data for bipartit graph
bipartite_tbl <- Transform_data(Top_MSEA_res)
mymat <- bipartite_tbl
coordP <- cbind(rep(2, dim(mymat)[1]), seq(1, dim(mymat)[1]) +
2)
coordA <- cbind(rep(4, dim(mymat)[2]), seq(1, dim(mymat)[2]) +
2)
mylayout <- as.matrix(rbind(coordP, coordA))
test.net <- bip_init_network(mymat, mode1 = 'HumanGenes',mode2 = 'MicrobeGenus')
# define network color
net %v% "group" = get.vertex.attribute(test.net, attrname="mode")
# define network color
test.net %v% "group" = get.vertex.attribute(test.net, attrname="mode")
# draw network
GGally::ggnet2(test.net, mode = mylayout, label = T, size = "degree", color = 'group'
label.size = 3, layout.exp = 1.5)
# draw network
GGally::ggnet2(test.net, mode = mylayout, label = T, size = "degree", color = 'group',
label.size = 3, layout.exp = 1.5)
get.vertex.attribute(test.net, attrname="degree")
RColorBrewer::brewer.pal(9, "Set1")[ c(3, 1, 9, 6, 8, 5, 2) ]
# draw network
GGally::ggnet2(test.net, mode = mylayout, label = T, size = "degree", color = 'Group',
label.size = 5, layout.exp = 1.5, alpha = 0.75) + scale_fill_manual(values = wes_palette("Royal1"))
library(wesanderson)
# draw network
GGally::ggnet2(test.net, mode = mylayout, label = T, size = "degree", color = 'Group',
label.size = 5, layout.exp = 1.5, alpha = 0.75) + scale_fill_manual(values = wes_palette("Royal1"))
# define the groups of network nodes
test.net %v% "Group" = get.vertex.attribute(test.net, attrname="mode")
# draw network
GGally::ggnet2(test.net, mode = mylayout, label = T, size = "degree", color = 'Group',
label.size = 5, layout.exp = 1.5, alpha = 0.75) + scale_fill_manual(values = wes_palette("Royal1"))
# draw network
GGally::ggnet2(test.net, mode = mylayout, label = T, size = "degree", color = 'Group',
label.size = 5, layout.exp = 1.5, alpha = 0.75) + scale_colour_manual(values = wes_palette("Royal1"))
mylayout
# draw network
GGally::ggnet2(test.net, mode = mylayout,
label = T, size = "degree",
color = 'Group',
label.size = 5, layout.exp = 1.5, alpha = 0.75) +
scale_colour_manual(values = wes_palette("Royal1")) +
guides(color=guide_legend("Group"),
degree=guide_legend("Degree"))
GGally::ggnet2(test.net, mode = mylayout,
label = T, size = "degree",
color = 'Group',
label.size = 5, layout.exp = 1.5, alpha = 0.75) +
scale_colour_manual(values = wes_palette("Royal1")) +
guides(color=guide_legend("Group"),
degree=guide_legend("Degree")) +
theme(legend.key.size = unit(2, 'cm'))
GGally::ggnet2(test.net, mode = mylayout,
label = T, size = "degree",
color = 'Group',
label.size = 5, layout.exp = 1.5, alpha = 0.75) +
scale_colour_manual(values = wes_palette("Royal1")) +
guides(color=guide_legend("Group"),
degree=guide_legend("Degree")) +
theme(legend.key.size = unit(1, 'cm'))
# draw network
GGally::ggnet2(test.net, mode = mylayout,
label = T, size = "degree",
color = 'Group',
label.size = 5, layout.exp = 1.5, alpha = 0.75) +
scale_colour_manual(values = wes_palette("Royal1")) +
guides(color=guide_legend("Group"),
degree=guide_legend("Degree")) +
theme(legend.key.size = unit(0.5, 'cm'))
# draw network
GGally::ggnet2(test.net, mode = mylayout,
label = T, size = "degree",
color = 'Group',
label.size = 5, layout.exp = 1.5, alpha = 0.75) +
scale_colour_manual(values = wes_palette("Royal1")) +
guides(color=guide_legend("Group"),
degree=guide_legend("Degree")) +
guides(color = guide_legend(override.aes = list(size = 10)))
# draw network
GGally::ggnet2(test.net, mode = mylayout,
label = T, size = "degree",
color = 'Group',
label.size = 5, layout.exp = 1.5, alpha = 0.75) +
scale_colour_manual(values = wes_palette("Royal1")) +
guides(color = guide_legend(override.aes = list(size = 2))) +
guides(color=guide_legend("Group"),
degree=guide_legend("Degree"))
# draw network
GGally::ggnet2(test.net, mode = mylayout,
label = T, size = "degree",
color = 'Group',
label.size = 5, layout.exp = 1.5, alpha = 0.75) +
scale_colour_manual(values = wes_palette("Royal1")) +
guides(color = guide_legend(override.aes = list(size = 3))) +
guides(color=guide_legend("Group"),
degree=guide_legend("Degree"))
# draw network
GGally::ggnet2(test.net, mode = mylayout,
label = T, size = "degree",
color = 'Group',
label.size = 5, layout.exp = 1.5, alpha = 0.75) +
scale_colour_manual(values = wes_palette("Royal1")) +
guides(color = guide_legend(override.aes = list(size = 3))) +
guides(color=guide_legend("Group"))
p <- GGally::ggnet2(test.net, mode = mylayout,
label = T, size = "degree",
color = 'Group',
label.size = 5, layout.exp = 1.5, alpha = 0.75) +
scale_colour_manual(values = wes_palette("FantasticFox1")) +
guides(color=guide_legend("Group"))
p
# Draw network
p <- GGally::ggnet2(test.net, mode = mylayout,
label = T, size = "degree",
color = 'Group', shape = 'Group',
label.size = 5, layout.exp = 1.5, alpha = 0.75) +
scale_colour_manual(values = wes_palette("FantasticFox1")) +
guides(color=guide_legend("Group"))
p
library(dplyr)
library(magrittr)
library(ggplot2)
library(ggbipart)
library(stringr)
library(tibble)
library(wesanderson)
MSEA_res = read.csv('/share/projects/SOP/Functional_Analysis/Tongbangzhuo/MSEA/testout.csv', sep = '\t')
head(MSEA_res, n=3)
setwd('/share/projects/SOP/Functional_Analysis/Tongbangzhuo/bookdown/test/')
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
p
GGally::ggnet2(test.net, mode = mylayout,
label = T, size = "degree", weight = 'degree',
color = 'Group', shape = 'Group',
label.size = 5, layout.exp = 1.5, alpha = 0.75) +
scale_colour_manual(values = wes_palette("FantasticFox1")) +
guides(color=guide_legend("Group"))
get.vertex.attribute(test.net, attrname="degree")
get.vertex.attribute(test.net)
get.vertex.attribute
ï¼Ÿget.vertex.attribute
?get.vertex.attribute
GGally::ggnet2(test.net, mode = mylayout,
label = T, size = "degree", weight = 'degree',
color = 'Group', shape = 'Group',
label.size = 5, layout.exp = 1.5, alpha = 0.75) +
scale_colour_manual(values = wes_palette("FantasticFox1")) +
guides(color=guide_legend("Group")) + guides(size = FALSE)
GGally::ggnet2(test.net, mode = mylayout,
label = T, size = "degree", weight = 'degree',
color = 'Group', shape = 'Group',
label.size = 5, layout.exp = 1.5, alpha = 0.75) +
scale_colour_manual(values = wes_palette("FantasticFox1")) +
guides(color=guide_legend("Group")) + guides(size = FALSE)
GGally::ggnet2(test.net, mode = mylayout,
label = T, size = "degree", weight = 'degree',
color = 'Group', shape = 'Group',
label.size = 5, layout.exp = 1.5, alpha = 0.75) +
scale_colour_manual(values = wes_palette("FantasticFox1")) +
guides(color=guide_legend("Group")) + guides(size = "none")
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
install.packages('enrichR')
library(enrichR)
listEnrichrSites()
## Choose database of Human genes
setEnrichrSite("Enrichr")
## List available database
listEnrichrDbs()
if (is.null(dbs)) websiteLive
## List available database
dbs <- listEnrichrDbs()
## List available database
dbs <- listEnrichrDbs()
if (is.null(dbs)) websiteLive
is.null(dbs)
library(enrichR)
## List available types of databases
listEnrichrSites()
## Choose database of Human genes
setEnrichrSite("Enrichr")
## List available database
websiteLive <- TRUE
dbs <- listEnrichrDbs()
if (is.null(dbs)) websiteLive <- FALSE
if (websiteLive) head(dbs)
MSEA_res$term
dbs
Vew(dbs)
View(dbs)
## Run enrichR of genus-associated human genes on selected databases
dbs <- c("GO_Molecular_Function_2021","KEGG_2019_Human")
if (websiteLive) {
enriched <- enrichr(MSEA_res$term %>% as.vector(), dbs)
}
library(dplyr)
library(magrittr)
library(ggplot2)
library(ggbipart)
library(stringr)
library(tibble)
library(wesanderson)
MSEA_res = read.csv('/share/projects/SOP/Functional_Analysis/Tongbangzhuo/MSEA/testout.csv', sep = '\t')
head(MSEA_res, n=3)
if (websiteLive) {
enriched <- enrichr(MSEA_res$term %>% as.vector(), dbs)
}
## Show first few rows of enrichment result
Kegg_res <- enriched[['KEGG_2019_Human']]
head(Kegg_res)
GO_res <- enriched[['GO_Molecular_Function_2021']]
head(GO_res)
if (websiteLive) enriched[["GO_Molecular_Function_2021"]]
## Plot Enrichment result
plotEnrich(enriched[['KEGG_2019_Human']] %>% filter(Adjusted.P.value < 0.05),
showTerms = 20, numChar = 40, y = "Count", orderBy = "P.value")
?plotEnrich
## Plot Enrichment result
plotEnrich(enriched[['KEGG_2019_Human']] %>% filter(Adjusted.P.value < 0.05),
showTerms = 20, numChar = 40, y = "Count", orderBy = "P.value") + scale_fill_manual(values = wes_palette("Zissou1", 100, type = "continuous"))
## Plot Enrichment result
plotEnrich(enriched[['KEGG_2019_Human']] %>% filter(Adjusted.P.value < 0.05),
showTerms = 20, numChar = 40, y = "Count", orderBy = "P.value") + scale_fill_gradient(values = wes_palette("Zissou1", 100, type = "continuous"))
## Plot Enrichment result
plotEnrich(enriched[['KEGG_2019_Human']] %>% filter(Adjusted.P.value < 0.05),
showTerms = 20, numChar = 40, y = "Count", orderBy = "P.value") + scale_fill_gradient(colours = wes_palette("Zissou1", 100, type = "continuous"))
## Plot Enrichment result
plotEnrich(enriched[['KEGG_2019_Human']] %>% filter(Adjusted.P.value < 0.05),
showTerms = 20, numChar = 40, y = "Count", orderBy = "P.value") + scale_fill_gradientn(colours = wes_palette("Zissou1", 100, type = "continuous"))
wes_palette("Zissou1", 100, type = "continuous")
wes_palette("Zissou1", 100, type = "continuous") %>% as.vector()
showTerms = 20, numChar = 40, y = "Count", orderBy = "P.value") + scale_fill_gradientn(colours = rev(wes_palette("Zissou1", 10, type = "continuous"))
showTerms = 20, numChar = 40, y = "Count", orderBy = "P.value") + scale_fill_gradientn(colours = rev(wes_palette("Zissou1", 10, type = "continuous"))
## Plot Enrichment result
plotEnrich(enriched[['KEGG_2019_Human']] %>% filter(Adjusted.P.value < 0.05),
showTerms = 20, numChar = 40, y = "Count", orderBy = "P.value") + scale_fill_gradientn(colours = rev(wes_palette("Zissou1",10, type = "continuous")))
## Plot Enrichment result
plotEnrich(enriched[['KEGG_2019_Human']] %>% filter(Adjusted.P.value < 0.05),
showTerms = 20, numChar = 40, y = "Count", orderBy = "P.value") +
scale_fill_gradientn(colours = rev(wes_palette("Zissou1", 3, type = "continuous")))
## Plot Enrichment result
plotEnrich(enriched[['KEGG_2019_Human']] %>% filter(Adjusted.P.value < 0.05),
showTerms = 20, numChar = 40, y = "Count", orderBy = "P.value") +
scale_fill_gradientn(colours = rev(wes_palette("Zissou1", 10, type = "continuous")))
head(Kegg_res)
p
library(enrichR)
## List available types of databases
listEnrichrSites()
## Choose database of Human genes
setEnrichrSite("Enrichr")
## List available database
websiteLive <- TRUE
dbs <- listEnrichrDbs()
if (is.null(dbs)) websiteLive <- FALSE
if (websiteLive) head(dbs)
## Choose the databases you want to enrich your genes with and Run enrichR of genus-associated human genes on chosen databases
dbs <- c("GO_Molecular_Function_2021","KEGG_2019_Human")
if (websiteLive) {
enriched <- enrichr(MSEA_res$term %>% as.vector(), dbs)
}
## Show first few rows of enrichment result
Kegg_res <- enriched[['KEGG_2019_Human']]
head(Kegg_res)
GO_res <- enriched[['GO_Molecular_Function_2021']]
head(GO_res)
## Plot Enrichment result
plotEnrich(enriched[['KEGG_2019_Human']] %>% filter(Adjusted.P.value < 0.05),
showTerms = 20, numChar = 40, y = "Count", orderBy = "P.value") +
scale_fill_gradientn(colours = rev(wes_palette("Zissou1", 10, type = "continuous")))
setwd('/share/projects/SOP/Functional_Analysis/Tongbangzhuo/bookdown/test')
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
