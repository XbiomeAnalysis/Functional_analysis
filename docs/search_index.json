[["index.html", "Functional analysis Chapter 1 Introduction", " Functional analysis Bangzhuo Tong 2022-09-13 Chapter 1 Introduction This is a tutorial introducing the analysis of microbiome functional data. Flowchart of this tutorial: Flowchart MGS data of one MAFLD cohorts was used as demo data throughout the first 6 chapters in this tutorial. 8 MGS samples of 4 patients from 2 groups in MAFLD projects were used as Demo data. 16S data of mouse fecal samples from BeiZhong E round project was used as demo data in Chapter 8 (PICRUSt2). Notably, only Genus names should be used as input in Chapter 7 for MSEA analysis. This book includes 6 Chapters of the following 5 modules on funcitonal analysis: 5 modules include: Analysis of Metacyc data Analysis of KEGG data Analysis of target database data MSEA PICRUSt2 6 Chapters include: Chapter1, introducing basic information of this tutorial. Chapter2, introducing the analysis of Metacyc data. Chapter3, introducing the analysis of processed KEGG data. Chapter4, introducing the analysis of processed target database (use CARD as example) data. Chapter5, introducing MSEA. Chapter6, introducing PICRUSt2 analysis of 16S data. "],["functional-analysis-of-metacyc-database.html", "Chapter 2 Functional Analysis of Metacyc database 2.1 Environment setup 2.2 Pipeline file processing 2.3 Data loading 2.4 Data preprocess 2.5 Plot Beta diversity 2.6 Permanova test 2.7 Differential analysis(DA) 2.8 Bacteria contribution to differential pathways 2.9 Session info", " Chapter 2 Functional Analysis of Metacyc database This demo provides guidance to standard data analysis of MetaCyc pathway data. Humman2 is used to annotate MGS reads with MetaCyc database. FlowChart_MetaCyc There are five 8 steps in this tutorial: Pipeline file processing Data loading Data preprocess Beta diversity Permanova test Differential analysis Bacteria contribution to pathway 2.1 Environment setup In this chunk, required packages and functions would be loaded. knitr::opts_chunk$set(warning = FALSE, message = FALSE) ## Remove all libraries and variables in current environment rm(list = ls()) ## Load packages library(XMAS) library(xviz) library(data.table) library(plotly) library(xlsx) library(magrittr) ## Load functions source(&quot;/share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Metacyc/RScript/permanova.R&quot;) source(&quot;/share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Metacyc/RScript/pathway2gene.R&quot;) source(&quot;/share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Kegg/Scripts/R/ultility.R&quot;) 2.2 Pipeline file processing As described in the introduction chapter, a cohort containing 8 MGS samples of 4 patients from 2 groups in MAFLD project would be used as demo data in this tutorial. 2.2.1 Merge sample files Here we need to merge all data from 8 samples into one profile table with the merge script from Humann2 in Bash. But if you have merged the sample data already, please skip this chunk and jump to Data loading. docker run -i --rm -u $(id -u):$(id -g) -v /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Demodata/:/in harbor.xbiome.com/xbiome/environments/humann2:2.8.1-2b8c5c3 bash -c &quot;merge_metaphlan_tables.py /in/PipelineOutput/*/humann2/*_pathabundance.tsv &gt; /in/Metacyc/merged_metacyc_profile.tsv&quot; 2.2.2 Split strain info Output profile from Humann2 pipeline contains strain information, we need to split the profile file into two files in Bash. But if you have splitted the sample data already, please skip this chunk and jump to Data loading. unstratified profile file stratified profile file grep -v &quot;|&quot; /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Demodata/Metacyc/merged_metacyc_profile.tsv &gt; /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Demodata/Metacyc/merged_metacyc_profile_unstratified.tsv grep -E &quot;\\\\||pathabundance&quot; /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Demodata/Metacyc/merged_metacyc_profile.tsv &gt; /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Demodata/Metacyc/merged_metacyc_profile_stratified.tsv 2.3 Data loading 2.3.1 Read metadata: Read MetaCyc metadata from Demo folder. metadata &lt;- read.table(&quot;/share/projects/SOP/Functional_Analysis/Tongbangzhuo/Demodata/metadata.xls&quot;,header = TRUE,stringsAsFactors = FALSE) %&gt;% mutate(seqid = SeqID) %&gt;% # keep seqid in the metadata column_to_rownames(&quot;SeqID&quot;) dim(metadata) ## [1] 8 5 head(metadata) ## 样本管编号 患者.供体编号 样本名称 Group seqid ## 16453 CDXH001-1 CDXH001 LMYO 肝酶正常 16453 ## 16455 CDXH001-2 CDXH001 LMYO 肝酶正常 16455 ## 16456 CDXH002-1 CDXH002 LIGU 肝酶异常 16456 ## 16457 CDXH002-2 CDXH002 LIGU 肝酶异常 16457 ## 16465 CDXH009-1 CDXH009 ZHRO 肝酶正常 16465 ## 16464 CDXH009-2 CDXH009 ZHRO 肝酶正常 16464 2.3.2 Read metaphlan2 profile table: Read MetaCyc profile table from Demo folder. pathwaydata &lt;- read_delim(&quot;/share/projects/SOP/Functional_Analysis/Tongbangzhuo/Demodata/Metacyc/merged_metacyc_profile_unstratified.tsv&quot;, delim = &quot;\\t&quot;) %&gt;% mutate(`ID` = str_split_fixed(`ID`, &quot;:&quot;, 2)[,1]) %&gt;% # do not edit column_to_rownames(&quot;ID&quot;) %&gt;% # do not edit t() %&gt;% as.data.frame() %&gt;% # do not edit rownames_to_column(&quot;seq_id&quot;) %&gt;% # do not edit mutate(seq_id=str_remove_all(seq_id, &quot;_.+&quot;)) %&gt;% # do not edit filter(seq_id %in% metadata$seqid) %&gt;% # *** only keep samples in metadata, edit if needed *** column_to_rownames(&quot;seq_id&quot;) %&gt;% # do not edit t() %&gt;% as.data.frame() %&gt;% # do not edit rownames_to_column(&quot;pathway&quot;) %&gt;% # do not edit filter(rowSums(.[,-1]) &gt; 0) %&gt;% # do not edit column_to_rownames(&quot;pathway&quot;) # do not edit dim(pathwaydata) ## [1] 386 8 2.4 Data preprocess 2.4.1 Transforming data In this chunk, we use TSS (Total sum scaling) to eliminate the influence of sequencing depth on samples. rescaled_pathwaydata &lt;- pathwaydata %&gt;% apply(., 2, function(x) x/sum(x)) %&gt;% as.data.frame() dim(rescaled_pathwaydata) ## [1] 386 8 2.4.2 Remove unppaed pathways Note: you need to transform your data into relative abundance before running this chunk!! rescaled_pathway.clean &lt;- rescaled_pathwaydata %&gt;% rownames_to_column(&quot;pathway&quot;) %&gt;% filter(!pathway %in% c(&quot;UNMAPPED&quot;,&quot;UNINTEGRATED&quot;)) %&gt;% column_to_rownames(&quot;pathway&quot;) dim(rescaled_pathway.clean) ## [1] 384 8 2.4.3 Aggregate low abundance data In this chunck, we aggregate low abundance features to one row. Note: you need to transform and Remove unppaed pathways in your data before running this chunk!! 1e-12 is an empirical threshold fot filtering low abundance feature. According to published paper Obese Individuals with and without Type 2 Diabetes Show Different Gut Microbial Functional Capacity and Composition pathway with top 50% mean abundance and top 50% variance are left. But in MaAsLin2，pathway with abundance less than 10-10 are filtered by default. pathway.clean &lt;- aggregate_low_abundance(input_data = rescaled_pathway.clean, threshold = 1e-12) ## threshold should be modified based on your on study dim(pathway.clean) ## [1] 384 8 2.5 Plot Beta diversity In this chunk, we plot PCoA with Bray-Curtis distance as example. plot_beta_diversity is a fucntion in XVIZ working on calculating the beta diversity distance and visualzing output. Input of plot_beta_diversity should be a phyloseq object. phyloseq(otu_table(pathway.clean, taxa_are_rows = T), sample_data(metadata)) %&gt;% plot_beta_diversity(feature = &quot;Group&quot;,add_pc1 = TRUE, add_pc2 = TRUE) 2.6 Permanova test run_permanova_betadisp is a function in XMAS working on doing dispersion test and PERMANOVA test. The first output is dispersion test and the second output is PERMANOVA test. phyloseq(otu_table(pathway.clean, taxa_are_rows = T), sample_data(metadata)) %&gt;% run_permanova_betadisp(vars = &quot;Group&quot;) ## $betadisp_res ## variable p_value analysis ## 1 Group 0.421 beta_dispersion_permutation999 ## ## $permanova_res ## variable p_value R2 analysis ## 1 Group 0.512 0.1041111 permanova_permutation999 2.7 Differential analysis(DA) 2.7.1 Filter low prevalence pathway In this chunk, we would remove pathways apperaing in less than max(2 , 5% of samples) from data set before doing analysis. Remember to run Data preprocess section before running this chunk! pathway.filter &lt;- XMAS::filter_prevalence(otu_table = pathway.clean, metadata = metadata.clean, threshold = 0.05, taxa_are_rows = TRUE) dim(pathway.clean) ## [1] 384 8 dim(pathway.filter) ## [1] 373 8 2.7.2 LefSE Remember to Filter low prevalence pathway before running this chunk! da_pathway = phyloseq(otu_table(pathway.filter, taxa_are_rows = T), sample_data(metadata)) %&gt;% lefse_mgs(compvar = &quot;Group&quot;) %&gt;% .$DA_features da_pathway$id %&lt;&gt;% str_replace_all(&quot;_&quot;,&quot;-&quot;) 2.8 Bacteria contribution to differential pathways Use script from Humann2 to visualize the species contribution to differential MetaCyc pathways. 2.8.1 Generate input from contribution barplot options(stringsAsFactors = FALSE) pathway_stratified &lt;- read_delim(&quot;/share/projects/SOP/Functional_Analysis/Tongbangzhuo/Demodata/Metacyc/merged_metacyc_profile_stratified.tsv&quot;, delim = &quot;\\t&quot;) %&gt;% column_to_rownames(&quot;ID&quot;) %&gt;% t() %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;seq_id&quot;) %&gt;% mutate(seq_id=str_remove_all(seq_id, &quot;_.+&quot;)) %&gt;% filter(seq_id %in% metadata$seqid) %&gt;% column_to_rownames(&quot;seq_id&quot;) %&gt;% t() %&gt;% as.data.frame() %&gt;% .[apply(.&gt;0, 1, any),] %&gt;% # .[apply(.&gt;0,1, function(x) sum(x) &gt; 4),] %&gt;% rownames_to_column(&quot;pathwayID&quot;) %&gt;% mutate(PathwayID=str_split_fixed(pathwayID,&quot;:&quot;,2)[,1]) %&gt;% mutate(Introduce=str_split_fixed(str_split_fixed(pathwayID,&quot;:&quot;,2)[,2],&quot;\\\\|&quot;,2)[,1]) %&gt;% mutate(Genus=str_split_fixed(str_split_fixed(pathwayID,&quot;\\\\|&quot;,2)[,2], &quot;\\\\.&quot;, 2)[,1]) %&gt;% mutate(Species=str_split_fixed(str_split_fixed(pathwayID,&quot;\\\\|&quot;,2)[,2], &quot;\\\\.&quot;, 2)[,2]) %&gt;% mutate(Species=str_replace(Species, &quot;s__&quot;, &quot;&quot;)) pathway_list &lt;- pathway_stratified %&gt;% as.data.frame() %&gt;% dplyr::select(PathwayID, Species) %&gt;% filter((!str_detect(PathwayID, &quot;UNINTEGRATED&quot;)) &amp; (PathwayID %in% da_pathway$id) &amp; Species!=&quot;&quot;) %&gt;% pivot_wider(names_from = &quot;Species&quot;,values_from = &quot;Species&quot;) %&gt;% column_to_rownames(&quot;PathwayID&quot;) %&gt;% .[apply(.,1,function(x) sum(!is.na(x))) &gt;= 2,] %&gt;% rownames() pathway_stratified %&gt;% column_to_rownames(&quot;pathwayID&quot;) %&gt;% t() %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;seqid&quot;) %&gt;% merge(metadata %&gt;% dplyr::select(c(Group, seqid)), ., by=&quot;seqid&quot;) %&gt;% filter(seqid %in% metadata$seqid) %&gt;% column_to_rownames(&quot;seqid&quot;) %&gt;% t() %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;pathwayID&quot;) %&gt;% write.table(.,&quot;/share/projects/SOP/Functional_Analysis/Tongbangzhuo/Demodata/Metacyc/merged_relab_pathabundance_stratified.pcl&quot;, row.names = FALSE, quote = FALSE, sep = &quot;\\t&quot;) for (i in pathway_list) { commond_text &lt;- &quot;/home/tongbangzhuo/Software/miniconda3/bin/python /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Metacyc/humann2_barplot.py --input /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Demodata/Metacyc/merged_relab_pathabundance_stratified.pcl --focal-feature ${pathwayID} --focal-metadatum Group --last-metadatum Group -d 8 4 --output /share/projects/SOP/Functional_Analysis/github/Functional_analysis/output/MetaCyc/${pathwayID}.png -e 0.8&quot; commond_text &lt;- stringr::str_interp(commond_text, list(pathwayID = i)) system(commond_text) } 2.8.2 Plot Bacteria contribution image_path &lt;- NULL image_path &lt;- system(&#39;ls /share/projects/SOP/Functional_Analysis/github/Functional_analysis/output/MetaCyc/*PWY*png&#39;, intern = TRUE) %&gt;% unlist() %&gt;% as.character() %&gt;% as.vector() %&gt;% .[1:5] ## In the graph(s) below, green KO are those KOs enriched in GroupB, red KO are those KOs enriched in GroupA knitr::include_graphics(image_path) 2.9 Session info devtools::session_info() ## ─ Session info ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 3.6.3 (2020-02-29) ## os Ubuntu 16.04.7 LTS ## system x86_64, linux-gnu ## ui RStudio ## language (EN) ## collate en_IN.UTF-8 ## ctype en_IN.UTF-8 ## tz Asia/Hong_Kong ## date 2022-09-13 ## rstudio 1.1.419 (server) ## pandoc 2.7.3 @ /usr/bin/ (via rmarkdown) ## ## ─ Packages ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## ! package * version date (UTC) lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 3.6.3) ## ade4 1.7-17 2021-06-17 [1] CRAN (R 3.6.3) ## ALDEx2 * 1.18.0 2019-10-29 [1] Bioconductor ## annotate 1.64.0 2019-10-29 [1] Bioconductor ## AnnotationDbi * 1.48.0 2019-10-29 [1] Bioconductor ## ape 5.5 2021-04-25 [1] CRAN (R 3.6.3) ## assertthat 0.2.1 2019-03-21 [2] CRAN (R 3.6.3) ## backports 1.4.1 2021-12-13 [1] CRAN (R 3.6.3) ## base64enc 0.1-3 2015-07-28 [2] CRAN (R 3.6.3) ## bayesm 3.1-4 2019-10-15 [1] CRAN (R 3.6.3) ## biglm 0.9-2.1 2020-11-27 [1] CRAN (R 3.6.3) ## Biobase * 2.46.0 2019-10-29 [2] Bioconductor ## BiocGenerics * 0.32.0 2019-10-29 [2] Bioconductor ## BiocParallel * 1.20.1 2019-12-21 [2] Bioconductor ## biomformat 1.14.0 2019-10-29 [1] Bioconductor ## Biostrings 2.54.0 2019-10-29 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] CRAN (R 3.6.3) ## bit64 4.0.5 2020-08-30 [1] CRAN (R 3.6.3) ## bitops 1.0-7 2021-04-24 [1] CRAN (R 3.6.3) ## blob 1.2.2 2021-07-23 [1] CRAN (R 3.6.3) ## bookdown 0.24 2021-09-02 [1] CRAN (R 3.6.3) ## brio 1.1.3 2021-11-30 [2] CRAN (R 3.6.3) ## broom 0.7.12 2022-01-28 [1] CRAN (R 3.6.3) ## bslib 0.3.1 2021-10-06 [1] CRAN (R 3.6.3) ## cachem 1.0.5 2021-05-15 [1] CRAN (R 3.6.3) ## callr 3.7.0 2021-04-20 [2] CRAN (R 3.6.3) ## car 3.0-12 2021-11-06 [1] CRAN (R 3.6.3) ## carData 3.0-4 2020-05-22 [1] CRAN (R 3.6.3) ## caTools 1.18.2 2021-03-28 [1] CRAN (R 3.6.3) ## cellranger 1.1.0 2016-07-27 [1] CRAN (R 3.6.3) ## checkmate 2.0.0 2020-02-06 [1] CRAN (R 3.6.3) ## circlize * 0.4.13 2021-06-09 [1] CRAN (R 3.6.3) ## cli 3.1.0 2021-10-27 [1] CRAN (R 3.6.3) ## clue 0.3-59 2021-04-16 [1] CRAN (R 3.6.3) ## cluster 2.1.0 2019-06-19 [2] CRAN (R 3.6.3) ## coda 0.19-4 2020-09-30 [1] CRAN (R 3.6.3) ## codetools 0.2-16 2018-12-24 [2] CRAN (R 3.6.3) ## coin 1.4-2 2021-10-08 [1] CRAN (R 3.6.3) ## colorspace 2.0-2 2021-06-24 [1] CRAN (R 3.6.3) ## ComplexHeatmap * 2.2.0 2019-10-29 [1] Bioconductor ## compositions 2.0-2 2021-07-14 [1] CRAN (R 3.6.3) ## cowplot * 1.1.1 2020-12-30 [1] CRAN (R 3.6.3) ## crayon 1.5.0 2022-02-14 [1] CRAN (R 3.6.3) ## curl 4.3.2 2021-06-23 [2] CRAN (R 3.6.3) ## dada2 * 1.14.1 2020-02-22 [1] Bioconductor ## data.table * 1.14.0 2021-02-21 [1] CRAN (R 3.6.3) ## DBI 1.1.1 2021-01-15 [1] CRAN (R 3.6.3) ## dbplyr 2.1.1 2021-04-06 [1] CRAN (R 3.6.3) ## DelayedArray * 0.12.3 2020-04-09 [2] Bioconductor ## DelayedMatrixStats 1.8.0 2019-10-29 [1] Bioconductor ## DEoptimR 1.0-9 2021-05-24 [1] CRAN (R 3.6.3) ## desc 1.4.1 2022-03-06 [2] CRAN (R 3.6.3) ## DESeq2 * 1.26.0 2019-10-29 [1] Bioconductor ## devtools 2.4.3 2021-11-30 [1] CRAN (R 3.6.3) ## digest 0.6.29 2021-12-01 [1] CRAN (R 3.6.3) ## dplyr * 1.0.6 2021-05-05 [1] CRAN (R 3.6.3) ## edgeR 3.28.1 2020-02-26 [1] Bioconductor ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 3.6.3) ## EnhancedVolcano * 1.4.0 2019-10-29 [1] Bioconductor ## enrichR * 3.0 2021-02-02 [1] CRAN (R 3.6.3) ## evaluate 0.15 2022-02-18 [2] CRAN (R 3.6.3) ## fansi 1.0.2 2022-01-14 [1] CRAN (R 3.6.3) ## farver 2.1.0 2021-02-28 [2] CRAN (R 3.6.3) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 3.6.3) ## fdrtool 1.2.17 2021-11-13 [1] CRAN (R 3.6.3) ## forcats * 0.5.1 2021-01-27 [1] CRAN (R 3.6.3) ## foreach 1.5.2 2022-02-02 [2] CRAN (R 3.6.3) ## foreign 0.8-75 2020-01-20 [2] CRAN (R 3.6.3) ## formatR 1.12 2022-03-31 [2] CRAN (R 3.6.3) ## Formula 1.2-4 2020-10-16 [1] CRAN (R 3.6.3) ## fs 1.5.2 2021-12-08 [1] CRAN (R 3.6.3) ## futile.logger 1.4.3 2016-07-10 [2] CRAN (R 3.6.3) ## futile.options 1.0.1 2018-04-20 [2] CRAN (R 3.6.3) ## genefilter 1.68.0 2019-10-29 [1] Bioconductor ## geneplotter 1.64.0 2019-10-29 [1] Bioconductor ## generics 0.1.2 2022-01-31 [1] CRAN (R 3.6.3) ## GenomeInfoDb * 1.22.1 2020-03-27 [2] Bioconductor ## GenomeInfoDbData 1.2.2 2020-08-24 [2] Bioconductor ## GenomicAlignments 1.22.1 2019-11-12 [1] Bioconductor ## GenomicRanges * 1.38.0 2019-10-29 [2] Bioconductor ## getopt 1.20.3 2019-03-22 [1] CRAN (R 3.6.3) ## GetoptLong 1.0.5 2020-12-15 [1] CRAN (R 3.6.3) ## GGally * 2.1.2 2021-06-21 [1] CRAN (R 3.6.3) ## ggbipart * 0.1.2 2022-07-20 [1] Github (pedroj/bipartite_plots@162f577) ## ggExtra * 0.9 2019-08-27 [1] CRAN (R 3.6.3) ## ggplot2 * 3.3.5 2021-06-25 [1] CRAN (R 3.6.3) ## ggpubr * 0.4.0 2020-06-27 [1] CRAN (R 3.6.3) ## ggrepel * 0.9.1 2021-01-15 [2] CRAN (R 3.6.3) ## ggsci * 2.9 2018-05-14 [1] CRAN (R 3.6.3) ## ggsignif 0.6.3 2021-09-09 [1] CRAN (R 3.6.3) ## glmnet 4.1-2 2021-06-24 [1] CRAN (R 3.6.3) ## GlobalOptions 0.1.2 2020-06-10 [1] CRAN (R 3.6.3) ## glue 1.6.1 2022-01-22 [1] CRAN (R 3.6.3) ## GMPR 0.1.3 2021-05-17 [1] local ## gplots 3.1.1 2020-11-28 [1] CRAN (R 3.6.3) ## graph 1.64.0 2019-10-29 [1] Bioconductor ## gridExtra 2.3 2017-09-09 [2] CRAN (R 3.6.3) ## gtable 0.3.0 2019-03-25 [2] CRAN (R 3.6.3) ## gtools 3.9.2 2021-06-06 [1] CRAN (R 3.6.3) ## haven 2.4.1 2021-04-23 [1] CRAN (R 3.6.3) ## highr 0.9 2021-04-16 [1] CRAN (R 3.6.3) ## Hmisc 4.5-0 2021-02-28 [1] CRAN (R 3.6.3) ## hms 1.1.1 2021-09-26 [1] CRAN (R 3.6.3) ## htmlTable 2.3.0 2021-10-12 [1] CRAN (R 3.6.3) ## htmltools 0.5.2 2021-08-25 [1] CRAN (R 3.6.3) ## htmlwidgets 1.5.4 2021-09-08 [2] CRAN (R 3.6.3) ## httpuv 1.6.1 2021-05-07 [1] CRAN (R 3.6.3) ## httr 1.4.3 2022-05-04 [2] CRAN (R 3.6.3) ## hwriter 1.3.2 2014-09-10 [1] CRAN (R 3.6.3) ## igraph 1.3.1 2022-04-20 [2] CRAN (R 3.6.3) ## IHW 1.14.0 2019-10-29 [1] Bioconductor ## IRanges * 2.20.2 2020-01-13 [2] Bioconductor ## iterators 1.0.14 2022-02-05 [2] CRAN (R 3.6.3) ## jpeg 0.1-9 2021-07-24 [1] CRAN (R 3.6.3) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 3.6.3) ## jsonlite 1.8.0 2022-02-22 [2] CRAN (R 3.6.3) ## KEGGgraph 1.46.0 2019-10-29 [1] Bioconductor ## KEGGREST 1.26.1 2019-11-06 [1] Bioconductor ## KernSmooth 2.23-16 2019-10-15 [2] CRAN (R 3.6.3) ## knitr 1.36 2021-09-29 [1] CRAN (R 3.6.3) ## labeling 0.4.2 2020-10-20 [2] CRAN (R 3.6.3) ## lambda.r 1.2.4 2019-09-18 [2] CRAN (R 3.6.3) ## later 1.3.0 2021-08-18 [2] CRAN (R 3.6.3) ## lattice * 0.20-38 2018-11-04 [2] CRAN (R 3.6.3) ## latticeExtra 0.6-29 2019-12-19 [1] CRAN (R 3.6.3) ## lazyeval 0.2.2 2019-03-15 [2] CRAN (R 3.6.3) ## libcoin 1.0-9 2021-09-27 [1] CRAN (R 3.6.3) ## lifecycle 1.0.1 2021-09-24 [1] CRAN (R 3.6.3) ## limma 3.42.2 2020-02-03 [2] Bioconductor ## locfit 1.5-9.4 2020-03-25 [1] CRAN (R 3.6.3) ## lpsymphony 1.14.0 2019-10-29 [1] Bioconductor (R 3.6.3) ## lubridate 1.7.10 2021-02-26 [1] CRAN (R 3.6.3) ## Maaslin2 1.7.3 2022-03-23 [1] Github (biobakery/maaslin2@8d090e4) ## magrittr * 2.0.2 2022-01-26 [1] CRAN (R 3.6.3) ## MASS 7.3-54 2021-05-03 [1] CRAN (R 3.6.3) ## Matrix 1.3-4 2021-06-01 [1] CRAN (R 3.6.3) ## matrixStats * 0.60.0 2021-07-26 [1] CRAN (R 3.6.3) ## mbzinb 0.2 2021-06-23 [1] local ## memoise 2.0.1 2021-11-26 [2] CRAN (R 3.6.3) ## metagenomeSeq 1.28.2 2020-02-03 [1] Bioconductor ## metamicrobiomeR 1.1 2021-02-03 [1] local ## mgcv 1.8-31 2019-11-09 [2] CRAN (R 3.6.3) ## microbiome 1.8.0 2019-10-29 [1] Bioconductor ## mime 0.12 2021-09-28 [2] CRAN (R 3.6.3) ## miniUI 0.1.1.1 2018-05-18 [1] CRAN (R 3.6.3) ## modelr 0.1.8 2020-05-19 [1] CRAN (R 3.6.3) ## modeltools 0.2-23 2020-03-05 [1] CRAN (R 3.6.3) ## multcomp 1.4-17 2021-04-29 [1] CRAN (R 3.6.3) ## multtest 2.42.0 2019-10-29 [2] Bioconductor ## munsell 0.5.0 2018-06-12 [2] CRAN (R 3.6.3) ## mvtnorm 1.1-3 2021-10-08 [1] CRAN (R 3.6.3) ## network * 1.17.1 2021-06-14 [1] CRAN (R 3.6.3) ## nlme 3.1-144 2020-02-06 [2] CRAN (R 3.6.3) ## nnet 7.3-12 2016-02-02 [2] CRAN (R 3.6.3) ## optparse 1.7.1 2021-10-08 [1] CRAN (R 3.6.3) ## org.Hs.eg.db * 3.10.0 2021-12-08 [1] Bioconductor ## pathview * 1.26.0 2019-10-29 [1] Bioconductor ## pcaPP 1.9-74 2021-04-23 [1] CRAN (R 3.6.3) ## permute * 0.9-5 2019-03-12 [1] CRAN (R 3.6.3) ## phyloseq * 1.30.0 2019-10-29 [1] Bioconductor ## pillar 1.7.0 2022-02-01 [1] CRAN (R 3.6.3) ## pkgbuild 1.3.1 2021-12-20 [2] CRAN (R 3.6.3) ## pkgconfig 2.0.3 2019-09-22 [2] CRAN (R 3.6.3) ## pkgload 1.2.4 2021-11-30 [2] CRAN (R 3.6.3) ## plotly * 4.10.0 2021-10-09 [1] CRAN (R 3.6.3) ## plyr 1.8.7 2022-03-24 [2] CRAN (R 3.6.3) ## png 0.1-7 2013-12-03 [1] CRAN (R 3.6.3) ## prettyunits 1.1.1 2020-01-24 [2] CRAN (R 3.6.3) ## processx 3.5.3 2022-03-25 [2] CRAN (R 3.6.3) ## promises 1.2.0.1 2021-02-11 [2] CRAN (R 3.6.3) ## protoclust 1.6.3 2019-01-31 [1] CRAN (R 3.6.3) ## ps 1.7.0 2022-04-23 [2] CRAN (R 3.6.3) ## pscl 1.5.5 2020-03-07 [1] CRAN (R 3.6.3) ## purrr * 0.3.4 2020-04-17 [2] CRAN (R 3.6.3) ## qvalue 2.18.0 2019-10-29 [1] Bioconductor ## R6 2.5.1 2021-08-19 [1] CRAN (R 3.6.3) ## RAIDA 1.0 2021-06-23 [1] local ## ranacapa 0.1.0 2021-06-18 [1] Github (gauravsk/ranacapa@58c0cab) ## RColorBrewer * 1.1-3 2022-04-03 [2] CRAN (R 3.6.3) ## Rcpp * 1.0.7 2021-07-07 [1] CRAN (R 3.6.3) ## RcppParallel 5.1.4 2021-05-04 [1] CRAN (R 3.6.3) ## RCurl 1.98-1.6 2022-02-08 [2] CRAN (R 3.6.3) ## readr * 2.0.0 2021-07-20 [1] CRAN (R 3.6.3) ## readxl * 1.3.1 2019-03-13 [1] CRAN (R 3.6.3) ## remotes 2.4.2 2021-11-30 [1] CRAN (R 3.6.3) ## reprex 2.0.1 2021-08-05 [1] CRAN (R 3.6.3) ## reshape 0.8.9 2022-04-12 [1] CRAN (R 3.6.3) ## reshape2 * 1.4.4 2020-04-09 [2] CRAN (R 3.6.3) ## Rgraphviz 2.30.0 2019-10-29 [1] Bioconductor ## rhdf5 2.30.1 2019-11-26 [1] Bioconductor ## Rhdf5lib 1.8.0 2019-10-29 [1] Bioconductor ## rJava 1.0-5 2021-09-24 [1] CRAN (R 3.6.3) ## rjson 0.2.20 2018-06-08 [1] CRAN (R 3.6.3) ## R rlang 1.0.2 &lt;NA&gt; [2] &lt;NA&gt; ## rmarkdown 2.11 2021-09-14 [1] CRAN (R 3.6.3) ## robustbase 0.93-9 2021-09-27 [1] CRAN (R 3.6.3) ## rpart 4.1-15 2019-04-12 [2] CRAN (R 3.6.3) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 3.6.3) ## Rsamtools 2.2.3 2020-02-23 [1] Bioconductor ## rsconnect 0.8.25 2021-11-19 [1] CRAN (R 3.6.3) ## RSQLite 2.2.7 2021-04-22 [1] CRAN (R 3.6.3) ## rstatix 0.7.0 2021-02-13 [1] CRAN (R 3.6.3) ## rstudioapi 0.13 2020-11-12 [2] CRAN (R 3.6.3) ## Rtsne 0.15 2018-11-10 [1] CRAN (R 3.6.3) ## rvest 1.0.2 2021-10-16 [1] CRAN (R 3.6.3) ## S4Vectors * 0.24.4 2020-04-09 [2] Bioconductor ## sandwich 3.0-1 2021-05-18 [1] CRAN (R 3.6.3) ## sass 0.4.0 2021-05-12 [1] CRAN (R 3.6.3) ## scales 1.2.0 2022-04-13 [2] CRAN (R 3.6.3) ## seqinr * 4.2-8 2021-06-09 [1] CRAN (R 3.6.3) ## sessioninfo 1.2.2 2021-12-06 [2] CRAN (R 3.6.3) ## shape 1.4.6 2021-05-19 [1] CRAN (R 3.6.3) ## shiny 1.7.1 2021-10-02 [1] CRAN (R 3.6.3) ## ShortRead 1.44.3 2020-02-03 [1] Bioconductor ## slam 0.1-49 2021-11-17 [1] CRAN (R 3.6.3) ## sna 2.6 2020-10-06 [1] CRAN (R 3.6.3) ## statnet.common 4.5.0 2021-06-05 [1] CRAN (R 3.6.3) ## stringi 1.7.4 2021-08-25 [1] CRAN (R 3.6.3) ## stringr * 1.4.0 2019-02-10 [2] CRAN (R 3.6.3) ## SummarizedExperiment * 1.16.1 2019-12-19 [2] Bioconductor ## survival 3.1-8 2019-12-03 [2] CRAN (R 3.6.3) ## tensorA 0.36.2 2020-11-19 [1] CRAN (R 3.6.3) ## testthat 3.1.4 2022-04-26 [2] CRAN (R 3.6.3) ## textshape 1.7.3 2021-05-28 [1] CRAN (R 3.6.3) ## TH.data 1.1-0 2021-09-27 [1] CRAN (R 3.6.3) ## tibble * 3.1.6 2021-11-07 [1] CRAN (R 3.6.3) ## tidyr * 1.2.0 2022-02-01 [1] CRAN (R 3.6.3) ## tidyselect 1.1.1 2021-04-30 [1] CRAN (R 3.6.3) ## tidyverse * 1.3.1 2021-04-15 [1] CRAN (R 3.6.3) ## tzdb 0.2.0 2021-10-27 [1] CRAN (R 3.6.3) ## UpSetR 1.4.0 2019-05-22 [1] CRAN (R 3.6.3) ## usethis 2.1.6 2022-05-25 [2] CRAN (R 3.6.3) ## utf8 1.2.2 2021-07-24 [1] CRAN (R 3.6.3) ## vctrs 0.3.8 2021-04-29 [1] CRAN (R 3.6.3) ## vegan * 2.5-7 2020-11-28 [1] CRAN (R 3.6.3) ## VennDiagram 1.7.1 2021-12-02 [1] CRAN (R 3.6.3) ## viridisLite 0.4.0 2021-04-13 [2] CRAN (R 3.6.3) ## vroom 1.5.7 2021-11-30 [1] CRAN (R 3.6.3) ## wesanderson * 0.3.6.9000 2021-07-21 [1] Github (karthik/wesanderson@651c944) ## withr 2.4.3 2021-11-30 [1] CRAN (R 3.6.3) ## Wrench 1.4.0 2019-10-29 [1] Bioconductor ## xfun 0.23 2021-05-15 [1] CRAN (R 3.6.3) ## xlsx * 0.6.5 2020-11-10 [1] CRAN (R 3.6.3) ## xlsxjars 0.6.1 2014-08-22 [1] CRAN (R 3.6.3) ## XMAS * 0.0.0.9000 2022-03-23 [1] local ## XMAS2 2.1.7.9 2022-09-09 [2] local ## XML 3.99-0.3 2020-01-20 [1] CRAN (R 3.6.3) ## xml2 1.3.3 2021-11-30 [2] CRAN (R 3.6.3) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 3.6.3) ## XVector 0.26.0 2019-10-29 [2] Bioconductor ## xviz * 1.1.0 2021-01-14 [1] local ## yaml 2.2.2 2022-01-25 [1] CRAN (R 3.6.3) ## zlibbioc 1.32.0 2019-10-29 [2] Bioconductor ## zoo 1.8-9 2021-03-09 [1] CRAN (R 3.6.3) ## ## [1] /share/home/tongbangzhuo/R/x86_64-pc-linux-gnu-library/3.6 ## [2] /opt/R-3.6.3/lib/R/library ## ## R ── Package was removed from disk. ## ## ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── "],["functional-analysis-of-kegg.html", "Chapter 3 Functional Analysis of KEGG 3.1 Environment setup 3.2 Pipeline file processing (KEGG) 3.3 Data loading (KEGG) 3.4 Data preprocessing (KEGG) 3.5 Standard Analysis (KEGG) 3.6 Differential analysis (KEGG) 3.7 Session information (KEGG)", " Chapter 3 Functional Analysis of KEGG This demo guides you how to analyze KEGG pathway profile and KO profile. FlowChart_KEGG 3.1 Environment setup 3.2 Pipeline file processing (KEGG) As described in the introduction chapter, a cohort containing 8 MGS samples of 4 patients from 2 groups in MAFLD project would be used as demo data in this tutorial. Note: Pathway abundance can be calculated in many ways (median/mean/avarage_top_half value of KO profiles), in this tutorial we use “median” as example. 3.2.1 Remove description in KEGG map profile Here we need to remove the description column of kegg map profile of 8 samples in Bash. But if you have removed the column data already, please skip this chunk and jump to Merge KEGG map profile of samples. for i in /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Demodata/PipelineOutput/*/humann2_post_kegg/*_pathway_abundance_median_des.tsv; do awk -F &#39;\\t&#39; &#39;{print $1&quot;\\t&quot;$2}&#39; $i &gt; $i.tmp.tsv ;done 3.2.2 Merge KEGG map profile of samples Here we need to merge all data from 8 samples into one profile table with the merge script from Humann2 in Bash. But if you have merged the sample data already, please skip this chunk and jump to Data loading. docker run -i --rm -u $(id -u):$(id -g) -v /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Demodata/:/in harbor.xbiome.com/xbiome/environments/humann2:2.8.1-2b8c5c3 bash -c &quot;merge_metaphlan_tables.py /in/PipelineOutput/*/humann2_post_kegg/*.tmp.tsv &gt; /in/Kegg/merged_kegg_profile.tsv&quot; 3.2.3 Remove tmp tsv Remove tmp tsv files created above rm /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Demodata/PipelineOutput/*/humann2_post_kegg/*.tmp.tsv sed -i &#39;/pathway\\t/d&#39; /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Demodata/Kegg/merged_kegg_profile.tsv 3.3 Data loading (KEGG) pathway_profile_tbl &lt;- read.csv(&#39;/share/projects/SOP/Functional_Analysis/Tongbangzhuo/Demodata/Kegg/merged_kegg_profile.tsv&#39;, header = TRUE, comment.char = &#39;&#39;, stringsAsFactors = FALSE , na.strings = &#39;&#39;, sep=&#39;\\t&#39;, check.names = FALSE) colnames(pathway_profile_tbl)[1] &lt;- &#39;PathwayID&#39; ## Remove suffix in sample SeqIDs colnames(pathway_profile_tbl) %&lt;&gt;% str_remove_all(&#39;_.+&#39;) ## Remove prefix in map IDs pathway_profile_tbl$PathwayID %&lt;&gt;% str_remove_all(&#39;map&#39;) ## We can map pathway ID to pathway names with the mapping file in minpath. ## But it is not suggested to do the mapping in this step, because pathway names contain species characters, but we read in mapping file here anyways. ID2Name_mapping_tbl &lt;- read.table(&#39;/share/work/runtime/softwares/MinPath/data/KEGG-pathway.txt&#39;, header = FALSE, na.strings = &#39;&#39;, comment.char = &#39;&#39;, sep = &#39;\\t&#39;, colClasses = c(&#39;V1&#39; = &#39;character&#39;)) colnames(ID2Name_mapping_tbl) &lt;- c(&#39;PathwayID&#39;, &#39;Label&#39;) ## Next we read in metadata (Group information) metadata &lt;- read.table(&#39;/share/projects/SOP/Functional_Analysis/Tongbangzhuo/Demodata/metadata.xls&#39;, check.names = FALSE, header = TRUE) metadata %&lt;&gt;% mutate(SeqID2 = SeqID) %&gt;% column_to_rownames(&#39;SeqID2&#39;) %&gt;% as.data.frame() 3.4 Data preprocessing (KEGG) 3.4.1 Remove 0 abundance maps Remove the pathways whose abundance are 0 across all samples. If we use harmonic mean or median to calcualte pathway abundance from KOs, the pathway abundance may be 0, we therefore need to remove those pathways having 0 abundance across all samples. ## If we use harmonic mean or median to calcualte pathway abundance from KOs, the pathway abundance may be 0, we therefore need to remove those pathways having 0 abundance across all samples. pathway_profile_tbl %&lt;&gt;% column_to_rownames(&#39;PathwayID&#39;) %&gt;% dplyr::filter(rowSums(.) &gt; 0) dim(pathway_profile_tbl) ## [1] 63 8 3.4.2 Transforming data (KEGG) Note: Run Remove 0 abundance maps before running this chunk! ## In this chunk, we use TSS (Total sum scaling) to eliminate the influence of sequencing depth on samples. After re-scaling, we can apply DA to samples. rescaled_pathway_profile_tbl &lt;- pathway_profile_tbl %&gt;% apply(., 2, function(x) x/sum(x)) %&gt;% as.data.frame() dim(rescaled_pathway_profile_tbl) ## [1] 63 8 3.4.3 Aggregate low abundance data In this chunck, we aggregate low abundance features to one row. 1e-12 is an empirical threshold fot filtering low abundance feature. According to published paper Obese Individuals with and without Type 2 Diabetes Show Different Gut Microbial Functional Capacity and Composition, pathway with top 50% mean abundance and top 50% variance are left. But in MaAsLin2，pathway with abundance less than 10-10 are filtered by default. Note: Run Transforming data before running this chunk! filtered_pathway_RA_profile_tbl &lt;- aggregate_low_abundance(input_data = rescaled_pathway_profile_tbl, threshold = 1e-12) ## threshold should be modified based on your on study dim(filtered_pathway_RA_profile_tbl) ## [1] 63 8 3.5 Standard Analysis (KEGG) Note: All chunks in Data preprocessing should be excuted before doing analysis in this chunk. 3.5.1 Compositional barplot Generate compositional barplot ## In this chunk, we construct stacked pathway barplot to depict the pathway composition of samples, we use function plot_stacked_bar from xviz to plot. ## In case there are too much entries, we use parameter &quot;collapse&quot; in plot_stacked_bar function to integrate entries whose abundance are below given threshold into &quot;Others&quot;. ## Note: make sure your graph is long enough to show the group information. pathway_stacked_barplot &lt;- xviz::plot_stacked_bar(otu_table = filtered_pathway_RA_profile_tbl %&gt;% t() %&gt;% as.data.frame(), metadata = metadata, collapse = 1e-3, feature = &#39;Group&#39;) Plot compositional barplot print(pathway_stacked_barplot) 3.5.2 Beta diversity ## In this chunk, we inherit the concept of Beta diversity of microbial taxa data and apply it to pathway data to explore the similarity between samples. ## construct phyloseq for beta diversity analysis phy &lt;- phyloseq(otu_table(filtered_pathway_RA_profile_tbl, taxa_are_rows = TRUE), sample_data(metadata)) ## PCOA plot with bray_curtis distance PCOA_plot &lt;- xviz::plot_beta_diversity(phyloseq = phy, feature = &#39;Group&#39;, method = &#39;bray&#39;, label = TRUE) print(PCOA_plot) ## PERMANOVA test &amp; beta dispersion test ## We use PERMANOVA test to check the differences of function composition among different groups. Additionally, we also take homogeneity of group variance into consideration. dispersion_permanova_res &lt;- run_permanova_betadisp(physeq = phy, vars = &#39;Group&#39; ) dispersion_permanova_res ## $betadisp_res ## variable p_value analysis ## 1 Group 0.109 beta_dispersion_permutation999 ## ## $permanova_res ## variable p_value R2 analysis ## 1 Group 0.622 0.08514936 permanova_permutation999 3.6 Differential analysis (KEGG) Note: All chunks in Data preprocessing should be executed before doing analysis in this chunk. 3.6.1 Filter low prevalence pathway (KEGG) Low prevalence pathways are pathways only occur in minor samples. In this chunk, we would remove pathways apperaing in less than max(2 , 5% of samples) from data set before doing analysis. **If you have filtered the low prevalence pathways please jump to DA with Logistic Regression for differential analysis. filtered_pathway_RA_profile_tbl &lt;- filter_prevalence(otu_table = filtered_pathway_RA_profile_tbl, threshold = 0.05, taxa_are_rows = TRUE ) dim(filtered_pathway_RA_profile_tbl) ## [1] 61 8 3.6.2 DA with Logistic Regression In this chunk, you would be using logistic regression model to find pathways that are significantly enriched in certain group. Note: Remeber to Filter low prevalence pathway before running this chunk. ## Due to the nature of compositional data, we cannot apply linear models to compositional data directly. ## Transformation of relative abundance data should be carried out before feeding the data to LM. ## Here, we add a very small value (1e-12) to the pathway profile table to avoid genrating NA during transformation, then use logit transformation to transform data. And eventually we apply LM to the transformed data ## Adding small value to the profile table (The value is arbitrary). DA_pathway_RA_profile_tbl &lt;- filtered_pathway_RA_profile_tbl + 1e-12 ## Reshape profile data table and use logit transformation. DA_pathway_RA_profile_tbl &lt;- DA_pathway_RA_profile_tbl %&gt;% t() %&gt;% as.data.frame() %&gt;% rownames_to_column(&#39;SeqID&#39;) %&gt;% as.data.frame() DA_metadata &lt;- metadata %&gt;% as.data.frame() ## Reshape dataframe into long table DA_input &lt;- merge(DA_pathway_RA_profile_tbl, DA_metadata, by=&#39;SeqID&#39;) %&gt;% reshape2::melt(value.name = &#39;RA&#39;, variable.name = &#39;PathwayIDs&#39;) ## Logit transformation DA_input %&lt;&gt;% mutate(RA_logit = log(RA/(1-RA))) ## Fit data to LM ## Loop over each pathway in two groups LM_res &lt;- DA_input %&gt;% split(.$PathwayIDs) %&gt;% lapply(., function(x){ gml_res_summary &lt;- lm(data = x, formula = RA_logit ~ Group) %&gt;% summary() %&gt;% .$coefficients %&gt;% as.matrix() %&gt;% as.data.frame() %&gt;% rownames_to_column(var = &quot;Factors&quot;) } ) ## Merge all result in one table LM_res &lt;- LM_res %&gt;% data.table::rbindlist(idcol = &quot;PathwayID&quot;) %&gt;% filter(Factors != &quot;(Intercept)&quot;) ## Adjust p value using p.adjust function from stats package, you could choose different adjust method. LM_res %&lt;&gt;% mutate(adjust.p = stats::p.adjust(.$`Pr(&gt;|t|)`, method = &#39;BH&#39;)) ## Calculate effect size (Odds ratio) of each feature LM_res %&lt;&gt;% mutate(OR = exp(Estimate)) %&gt;% as.data.frame() ## Add label to pathwayIDs LM_res %&lt;&gt;% merge(., ID2Name_mapping_tbl, by = &#39;PathwayID&#39;) 3.6.3 Show DA result with volcano plot ## Plot volcano plot to show effect size (x-axis) and p value (y-axis) of pathways. ## Here we only tend to hightlight pathways that satisfy adjust.p &lt; 0.614 and (OR &lt; 0.2 | OR &gt; 0.5) at the same time. ## You can nevertheless choose different threshold accroding to your own data. volcano_plot &lt;- LM_res %&gt;% mutate(p.adj.log = -log10(adjust.p), log10OR = log10(OR)) %&gt;% ggplot(aes(x = log10OR, y = p.adj.log)) + geom_point(size = 0.5) + geom_point(size = 0.5, color = &quot;red&quot;, data = . %&gt;% filter(adjust.p &lt; 0.614 &amp; (OR &lt; 0.2 | OR &gt; 0.5))) + #geom_text_repel(size = 6/.pt, aes(label = Label), data = . %&gt;% filter(adjust.p&lt;0.614 &amp; OR&lt;0.2)) + geom_vline(xintercept = log10(c(0.05, 0.1, 0.2, 0.5, 1, 2)), size = 0.05, color = &quot;grey&quot;) + geom_hline(yintercept = -log10(c(0.7)), size = 0.05, color = &quot;grey&quot;) + theme(aspect.ratio = 1, panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ) + labs(x = &quot;Estimated Odds Ratio&quot;, y = &quot;FDR adjusted p-values(-log10)&quot;) print(volcano_plot) 3.6.4 Show DA result with pathview In this chunk, we use pathview to visualize enriched KOs in differential pathways. Step1. First we extract all KOs in differential pathways obtained from last chunk with mapping file: /share/work/runtime/softwares/MinPath/data/KEGG-mapping.txt. Step2. We find differential KO in two groups using the same LM method in previous chunk. Step3. Visualize differential KO in differential pathways with pathview. In order to find differential KO in two groups, we need to merge all profiles of all samples 3.6.4.1 Merge KO profiles /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Demodata/PipelineOutput/*/humann2_post_kegg/16466_filter_unstratified_with_des.kegg 3.6.4.1.1 Remove description in KO profile Here we need to remove the description column of KO profile of 8 samples in Bash. But if you have removed the column data already, please skip this chunk and jump to Read merged KO profile. for i in /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Demodata/PipelineOutput/*/humann2_post_kegg/*filter_unstratified_with_des.kegg; do awk -F &#39;\\t&#39; &#39;{print $1&quot;\\t&quot;$2}&#39; $i &gt; $i.tmp.tsv ;done 3.6.4.1.2 Merge KO profile of all sample Here we need to merge all KO data from 8 samples into one profile table with the merge script from Humann2 in Bash. But if you have merged the sample data already, please skip this chunk and jump to Read merged KO profile. docker run -i --rm -u $(id -u):$(id -g) -v /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Demodata/:/in harbor.xbiome.com/xbiome/environments/humann2:2.8.1-2b8c5c3 bash -c &quot;merge_metaphlan_tables.py /in/PipelineOutput/*/humann2_post_kegg/*.tmp.tsv &gt; /in/Kegg/merged_ko_profile.tsv&quot; 3.6.4.1.3 Remove tmp KO tsv files Remove tmp tsv files created above rm /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Demodata/PipelineOutput/*/humann2_post_kegg/*.tmp.tsv sed -i &#39;/filter_unstratified_with_des.kegg.tmp/d&#39; /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Demodata/Kegg/merged_ko_profile.tsv 3.6.4.2 Read merged KO profile ## Read in KO profile, since we&#39;ve already removed UNMAPPED and re-scaled KO profile in Functional_Analysis_Kegg_Pathway_preprocess.Rmd, we only need to filer low_abundance and low-prevalenece KOs here. KO_profile &lt;- read.table(&#39;/share/projects/SOP/Functional_Analysis/Tongbangzhuo/Demodata/Kegg/merged_ko_profile.tsv&#39;, header = TRUE, check.names = FALSE) colnames(KO_profile) %&lt;&gt;% str_remove(&#39;_.+&#39;) 3.6.4.3 Preprocess merged KO profile ## Rescale KO profile KO_profile %&lt;&gt;% column_to_rownames(&#39;ID&#39;) %&gt;% apply(., 2, function(x) x/sum(x)) %&gt;% as.data.frame() %&gt;% rownames_to_column(&#39;KOs&#39;) ## Filter low abundance KOs filtered_KO_profile &lt;- KO_profile %&gt;% column_to_rownames(&#39;KOs&#39;) %&gt;% aggregate_low_abundance(input_data = ., threshold = 1e-12) ## Filter low-prevalenece KOs filtered_KO_profile &lt;- filter_prevalence(otu_table = filtered_KO_profile, threshold = 0.05, taxa_are_rows = TRUE ) 3.6.4.4 Find differential KO for each differential Kegg map ## Read in KO-Pathway mapping file KO2Pathway_mapping &lt;- read.table(&#39;/share/work/runtime/softwares/MinPath/data/KEGG-mapping.txt&#39;, colClasses = c(&#39;V1&#39; = &#39;character&#39;)) ## Loop over differential pathways Diff_pathway &lt;- LM_res %&gt;% filter(`Pr(&gt;|t|)` &lt; .05) %&gt;% .$PathwayID %&gt;% as.vector() for (pathway in Diff_pathway){ ## Create a list to store the log2fc of each KO in each kegg pathway log2fc_list &lt;- list() ## Extract all KOs in differential pathway KO_ID_in_mapping &lt;- KO2Pathway_mapping %&gt;% filter(V1 == pathway) %&gt;% .$V2 ## Some KOs are not included in mapping file, here we take intersection of KO ID in mapping file and avaiable KO ID in KO profile KO_ID &lt;- intersect(KO_ID_in_mapping, rownames(filtered_KO_profile)) tmp_KO_profile &lt;- filtered_KO_profile[KO_ID,] tmp_KO_meta &lt;- DA_metadata ## re-format tmp KO profile table KO_DA_input &lt;- merge(tmp_KO_profile %&gt;% t() %&gt;% as.data.frame() %&gt;% rownames_to_column(&#39;SeqID&#39;), tmp_KO_meta, by = &#39;SeqID&#39;) %&gt;% reshape2::melt(variable.name = &#39;KO&#39;, value.name = &#39;RA&#39;) %&gt;% mutate(RA = RA + 1e-12) %&gt;% mutate(RA_logit = log(RA/(1-RA))) ## DA using LM KO_LM_res &lt;- KO_DA_input %&gt;% split(.$KO) %&gt;% lapply(., function(x){ KO_gml_res_summary &lt;- lm(data = x, formula = RA_logit ~ Group) %&gt;% summary() %&gt;% .$coefficients %&gt;% as.matrix() %&gt;% as.data.frame() %&gt;% rownames_to_column(var = &quot;Factors&quot;) } ) ## Merge result of all tested KOs KO_LM_res %&lt;&gt;% data.table::rbindlist(idcol = &quot;KOID&quot;) %&gt;% filter(Factors != &quot;(Intercept)&quot;) ## Adjust p value using p.adjust function from stats package, you could choose different adjust method. KO_LM_res %&lt;&gt;% mutate(adjust.p = stats::p.adjust(.$`Pr(&gt;|t|)`, method = &#39;BH&#39;)) %&gt;% as.data.frame() ## Filter significant differential KOs with p-value, we use pvalue &lt; 0.05 as filtering criteria here, choose your own standard for filtering. Sig_KO &lt;- KO_LM_res %&gt;% filter(`Pr(&gt;|t|)` &lt; 0.05) %&gt;% .$KOID ## Calculate Log2FC of each significant KO in two groups for (ko in Sig_KO){ ## Add a small value to avoid 0 Sig_KO_profile &lt;- tmp_KO_profile[ko, ] + 1e-12 ## calculate median for each KO in two groups Sig_KO_log2fc &lt;- merge(Sig_KO_profile %&gt;% t() %&gt;% as.data.frame() %&gt;% rownames_to_column(&#39;SeqID&#39;), tmp_KO_meta, by = &#39;SeqID&#39;) %&gt;% column_to_rownames(&#39;SeqID&#39;) %&gt;% group_by(Group) %&gt;% summarize(median = median(!!as.symbol(ko))) %&gt;% as.data.frame() ## Here we extact the median value for each group separatly GroupA_median &lt;- Sig_KO_log2fc %&gt;% column_to_rownames(&#39;Group&#39;) %&gt;% .[&#39;A&#39;, &#39;median&#39;] GroupB_median &lt;- Sig_KO_log2fc %&gt;% column_to_rownames(&#39;Group&#39;) %&gt;% .[&#39;B&#39;, &#39;median&#39;] ## Calculate log2FC for each KO and save the value in list ## Please be clear which group is divided by the other, it decides the direction of your log2fc ## Positive log2fc value would be highlighted in red in pathview result while negative log2fc value would be highlighted in green log2fc_list[[ko]] &lt;- log2(GroupA_median - GroupB_median) } ## converst list to data frame and use it as input for pathview input &lt;- as.matrix(log2fc_list) %&gt;% as.matrix() ## Visualization pathview(input, pathway.id = pathway, species = &quot;ko&quot;, out.suffix= &#39;PathView&#39;) } ## Knit Pathview picture to RMD graph_list &lt;- system(&#39;ls *.PathView.png&#39;, intern = TRUE) ## In the graph(s) below, green KO are those KOs enriched in GroupB, red KO are those KOs enriched in GroupA knitr::include_graphics(graph_list) 3.7 Session information (KEGG) devtools::session_info() ## ─ Session info ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 3.6.3 (2020-02-29) ## os Ubuntu 16.04.7 LTS ## system x86_64, linux-gnu ## ui RStudio ## language (EN) ## collate en_IN.UTF-8 ## ctype en_IN.UTF-8 ## tz Asia/Hong_Kong ## date 2022-09-13 ## rstudio 1.1.419 (server) ## pandoc 2.7.3 @ /usr/bin/ (via rmarkdown) ## ## ─ Packages ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## ! package * version date (UTC) lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 3.6.3) ## ade4 1.7-17 2021-06-17 [1] CRAN (R 3.6.3) ## ALDEx2 * 1.18.0 2019-10-29 [1] Bioconductor ## annotate 1.64.0 2019-10-29 [1] Bioconductor ## AnnotationDbi * 1.48.0 2019-10-29 [1] Bioconductor ## ape 5.5 2021-04-25 [1] CRAN (R 3.6.3) ## assertthat 0.2.1 2019-03-21 [2] CRAN (R 3.6.3) ## backports 1.4.1 2021-12-13 [1] CRAN (R 3.6.3) ## base64enc 0.1-3 2015-07-28 [2] CRAN (R 3.6.3) ## bayesm 3.1-4 2019-10-15 [1] CRAN (R 3.6.3) ## biglm 0.9-2.1 2020-11-27 [1] CRAN (R 3.6.3) ## Biobase * 2.46.0 2019-10-29 [2] Bioconductor ## BiocGenerics * 0.32.0 2019-10-29 [2] Bioconductor ## BiocParallel * 1.20.1 2019-12-21 [2] Bioconductor ## biomformat 1.14.0 2019-10-29 [1] Bioconductor ## Biostrings 2.54.0 2019-10-29 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] CRAN (R 3.6.3) ## bit64 4.0.5 2020-08-30 [1] CRAN (R 3.6.3) ## bitops 1.0-7 2021-04-24 [1] CRAN (R 3.6.3) ## blob 1.2.2 2021-07-23 [1] CRAN (R 3.6.3) ## bookdown 0.24 2021-09-02 [1] CRAN (R 3.6.3) ## brio 1.1.3 2021-11-30 [2] CRAN (R 3.6.3) ## broom 0.7.12 2022-01-28 [1] CRAN (R 3.6.3) ## bslib 0.3.1 2021-10-06 [1] CRAN (R 3.6.3) ## cachem 1.0.5 2021-05-15 [1] CRAN (R 3.6.3) ## callr 3.7.0 2021-04-20 [2] CRAN (R 3.6.3) ## car 3.0-12 2021-11-06 [1] CRAN (R 3.6.3) ## carData 3.0-4 2020-05-22 [1] CRAN (R 3.6.3) ## caTools 1.18.2 2021-03-28 [1] CRAN (R 3.6.3) ## cellranger 1.1.0 2016-07-27 [1] CRAN (R 3.6.3) ## checkmate 2.0.0 2020-02-06 [1] CRAN (R 3.6.3) ## circlize * 0.4.13 2021-06-09 [1] CRAN (R 3.6.3) ## cli 3.1.0 2021-10-27 [1] CRAN (R 3.6.3) ## clue 0.3-59 2021-04-16 [1] CRAN (R 3.6.3) ## cluster 2.1.0 2019-06-19 [2] CRAN (R 3.6.3) ## coda 0.19-4 2020-09-30 [1] CRAN (R 3.6.3) ## codetools 0.2-16 2018-12-24 [2] CRAN (R 3.6.3) ## coin 1.4-2 2021-10-08 [1] CRAN (R 3.6.3) ## colorspace 2.0-2 2021-06-24 [1] CRAN (R 3.6.3) ## ComplexHeatmap * 2.2.0 2019-10-29 [1] Bioconductor ## compositions 2.0-2 2021-07-14 [1] CRAN (R 3.6.3) ## cowplot * 1.1.1 2020-12-30 [1] CRAN (R 3.6.3) ## crayon 1.5.0 2022-02-14 [1] CRAN (R 3.6.3) ## curl 4.3.2 2021-06-23 [2] CRAN (R 3.6.3) ## dada2 * 1.14.1 2020-02-22 [1] Bioconductor ## data.table * 1.14.0 2021-02-21 [1] CRAN (R 3.6.3) ## DBI 1.1.1 2021-01-15 [1] CRAN (R 3.6.3) ## dbplyr 2.1.1 2021-04-06 [1] CRAN (R 3.6.3) ## DelayedArray * 0.12.3 2020-04-09 [2] Bioconductor ## DelayedMatrixStats 1.8.0 2019-10-29 [1] Bioconductor ## DEoptimR 1.0-9 2021-05-24 [1] CRAN (R 3.6.3) ## desc 1.4.1 2022-03-06 [2] CRAN (R 3.6.3) ## DESeq2 * 1.26.0 2019-10-29 [1] Bioconductor ## devtools 2.4.3 2021-11-30 [1] CRAN (R 3.6.3) ## digest 0.6.29 2021-12-01 [1] CRAN (R 3.6.3) ## dplyr * 1.0.6 2021-05-05 [1] CRAN (R 3.6.3) ## edgeR 3.28.1 2020-02-26 [1] Bioconductor ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 3.6.3) ## EnhancedVolcano * 1.4.0 2019-10-29 [1] Bioconductor ## enrichR * 3.0 2021-02-02 [1] CRAN (R 3.6.3) ## evaluate 0.15 2022-02-18 [2] CRAN (R 3.6.3) ## fansi 1.0.2 2022-01-14 [1] CRAN (R 3.6.3) ## farver 2.1.0 2021-02-28 [2] CRAN (R 3.6.3) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 3.6.3) ## fdrtool 1.2.17 2021-11-13 [1] CRAN (R 3.6.3) ## forcats * 0.5.1 2021-01-27 [1] CRAN (R 3.6.3) ## foreach 1.5.2 2022-02-02 [2] CRAN (R 3.6.3) ## foreign 0.8-75 2020-01-20 [2] CRAN (R 3.6.3) ## formatR 1.12 2022-03-31 [2] CRAN (R 3.6.3) ## Formula 1.2-4 2020-10-16 [1] CRAN (R 3.6.3) ## fs 1.5.2 2021-12-08 [1] CRAN (R 3.6.3) ## futile.logger 1.4.3 2016-07-10 [2] CRAN (R 3.6.3) ## futile.options 1.0.1 2018-04-20 [2] CRAN (R 3.6.3) ## genefilter 1.68.0 2019-10-29 [1] Bioconductor ## geneplotter 1.64.0 2019-10-29 [1] Bioconductor ## generics 0.1.2 2022-01-31 [1] CRAN (R 3.6.3) ## GenomeInfoDb * 1.22.1 2020-03-27 [2] Bioconductor ## GenomeInfoDbData 1.2.2 2020-08-24 [2] Bioconductor ## GenomicAlignments 1.22.1 2019-11-12 [1] Bioconductor ## GenomicRanges * 1.38.0 2019-10-29 [2] Bioconductor ## getopt 1.20.3 2019-03-22 [1] CRAN (R 3.6.3) ## GetoptLong 1.0.5 2020-12-15 [1] CRAN (R 3.6.3) ## GGally * 2.1.2 2021-06-21 [1] CRAN (R 3.6.3) ## ggbipart * 0.1.2 2022-07-20 [1] Github (pedroj/bipartite_plots@162f577) ## ggExtra * 0.9 2019-08-27 [1] CRAN (R 3.6.3) ## ggplot2 * 3.3.5 2021-06-25 [1] CRAN (R 3.6.3) ## ggpubr * 0.4.0 2020-06-27 [1] CRAN (R 3.6.3) ## ggrepel * 0.9.1 2021-01-15 [2] CRAN (R 3.6.3) ## ggsci * 2.9 2018-05-14 [1] CRAN (R 3.6.3) ## ggsignif 0.6.3 2021-09-09 [1] CRAN (R 3.6.3) ## glmnet 4.1-2 2021-06-24 [1] CRAN (R 3.6.3) ## GlobalOptions 0.1.2 2020-06-10 [1] CRAN (R 3.6.3) ## glue 1.6.1 2022-01-22 [1] CRAN (R 3.6.3) ## GMPR 0.1.3 2021-05-17 [1] local ## gplots 3.1.1 2020-11-28 [1] CRAN (R 3.6.3) ## graph 1.64.0 2019-10-29 [1] Bioconductor ## gridExtra 2.3 2017-09-09 [2] CRAN (R 3.6.3) ## gtable 0.3.0 2019-03-25 [2] CRAN (R 3.6.3) ## gtools 3.9.2 2021-06-06 [1] CRAN (R 3.6.3) ## haven 2.4.1 2021-04-23 [1] CRAN (R 3.6.3) ## highr 0.9 2021-04-16 [1] CRAN (R 3.6.3) ## Hmisc 4.5-0 2021-02-28 [1] CRAN (R 3.6.3) ## hms 1.1.1 2021-09-26 [1] CRAN (R 3.6.3) ## htmlTable 2.3.0 2021-10-12 [1] CRAN (R 3.6.3) ## htmltools 0.5.2 2021-08-25 [1] CRAN (R 3.6.3) ## htmlwidgets 1.5.4 2021-09-08 [2] CRAN (R 3.6.3) ## httpuv 1.6.1 2021-05-07 [1] CRAN (R 3.6.3) ## httr 1.4.3 2022-05-04 [2] CRAN (R 3.6.3) ## hwriter 1.3.2 2014-09-10 [1] CRAN (R 3.6.3) ## igraph 1.3.1 2022-04-20 [2] CRAN (R 3.6.3) ## IHW 1.14.0 2019-10-29 [1] Bioconductor ## IRanges * 2.20.2 2020-01-13 [2] Bioconductor ## iterators 1.0.14 2022-02-05 [2] CRAN (R 3.6.3) ## jpeg 0.1-9 2021-07-24 [1] CRAN (R 3.6.3) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 3.6.3) ## jsonlite 1.8.0 2022-02-22 [2] CRAN (R 3.6.3) ## KEGGgraph 1.46.0 2019-10-29 [1] Bioconductor ## KEGGREST 1.26.1 2019-11-06 [1] Bioconductor ## KernSmooth 2.23-16 2019-10-15 [2] CRAN (R 3.6.3) ## knitr 1.36 2021-09-29 [1] CRAN (R 3.6.3) ## labeling 0.4.2 2020-10-20 [2] CRAN (R 3.6.3) ## lambda.r 1.2.4 2019-09-18 [2] CRAN (R 3.6.3) ## later 1.3.0 2021-08-18 [2] CRAN (R 3.6.3) ## lattice * 0.20-38 2018-11-04 [2] CRAN (R 3.6.3) ## latticeExtra 0.6-29 2019-12-19 [1] CRAN (R 3.6.3) ## lazyeval 0.2.2 2019-03-15 [2] CRAN (R 3.6.3) ## libcoin 1.0-9 2021-09-27 [1] CRAN (R 3.6.3) ## lifecycle 1.0.1 2021-09-24 [1] CRAN (R 3.6.3) ## limma 3.42.2 2020-02-03 [2] Bioconductor ## locfit 1.5-9.4 2020-03-25 [1] CRAN (R 3.6.3) ## lpsymphony 1.14.0 2019-10-29 [1] Bioconductor (R 3.6.3) ## lubridate 1.7.10 2021-02-26 [1] CRAN (R 3.6.3) ## Maaslin2 1.7.3 2022-03-23 [1] Github (biobakery/maaslin2@8d090e4) ## magrittr * 2.0.2 2022-01-26 [1] CRAN (R 3.6.3) ## MASS 7.3-54 2021-05-03 [1] CRAN (R 3.6.3) ## Matrix 1.3-4 2021-06-01 [1] CRAN (R 3.6.3) ## matrixStats * 0.60.0 2021-07-26 [1] CRAN (R 3.6.3) ## mbzinb 0.2 2021-06-23 [1] local ## memoise 2.0.1 2021-11-26 [2] CRAN (R 3.6.3) ## metagenomeSeq 1.28.2 2020-02-03 [1] Bioconductor ## metamicrobiomeR 1.1 2021-02-03 [1] local ## mgcv 1.8-31 2019-11-09 [2] CRAN (R 3.6.3) ## microbiome 1.8.0 2019-10-29 [1] Bioconductor ## mime 0.12 2021-09-28 [2] CRAN (R 3.6.3) ## miniUI 0.1.1.1 2018-05-18 [1] CRAN (R 3.6.3) ## modelr 0.1.8 2020-05-19 [1] CRAN (R 3.6.3) ## modeltools 0.2-23 2020-03-05 [1] CRAN (R 3.6.3) ## multcomp 1.4-17 2021-04-29 [1] CRAN (R 3.6.3) ## multtest 2.42.0 2019-10-29 [2] Bioconductor ## munsell 0.5.0 2018-06-12 [2] CRAN (R 3.6.3) ## mvtnorm 1.1-3 2021-10-08 [1] CRAN (R 3.6.3) ## network * 1.17.1 2021-06-14 [1] CRAN (R 3.6.3) ## nlme 3.1-144 2020-02-06 [2] CRAN (R 3.6.3) ## nnet 7.3-12 2016-02-02 [2] CRAN (R 3.6.3) ## optparse 1.7.1 2021-10-08 [1] CRAN (R 3.6.3) ## org.Hs.eg.db * 3.10.0 2021-12-08 [1] Bioconductor ## pathview * 1.26.0 2019-10-29 [1] Bioconductor ## pcaPP 1.9-74 2021-04-23 [1] CRAN (R 3.6.3) ## permute * 0.9-5 2019-03-12 [1] CRAN (R 3.6.3) ## phyloseq * 1.30.0 2019-10-29 [1] Bioconductor ## pillar 1.7.0 2022-02-01 [1] CRAN (R 3.6.3) ## pkgbuild 1.3.1 2021-12-20 [2] CRAN (R 3.6.3) ## pkgconfig 2.0.3 2019-09-22 [2] CRAN (R 3.6.3) ## pkgload 1.2.4 2021-11-30 [2] CRAN (R 3.6.3) ## plotly * 4.10.0 2021-10-09 [1] CRAN (R 3.6.3) ## plyr 1.8.7 2022-03-24 [2] CRAN (R 3.6.3) ## png 0.1-7 2013-12-03 [1] CRAN (R 3.6.3) ## prettyunits 1.1.1 2020-01-24 [2] CRAN (R 3.6.3) ## processx 3.5.3 2022-03-25 [2] CRAN (R 3.6.3) ## promises 1.2.0.1 2021-02-11 [2] CRAN (R 3.6.3) ## protoclust 1.6.3 2019-01-31 [1] CRAN (R 3.6.3) ## ps 1.7.0 2022-04-23 [2] CRAN (R 3.6.3) ## pscl 1.5.5 2020-03-07 [1] CRAN (R 3.6.3) ## purrr * 0.3.4 2020-04-17 [2] CRAN (R 3.6.3) ## qvalue 2.18.0 2019-10-29 [1] Bioconductor ## R6 2.5.1 2021-08-19 [1] CRAN (R 3.6.3) ## RAIDA 1.0 2021-06-23 [1] local ## ranacapa 0.1.0 2021-06-18 [1] Github (gauravsk/ranacapa@58c0cab) ## RColorBrewer * 1.1-3 2022-04-03 [2] CRAN (R 3.6.3) ## Rcpp * 1.0.7 2021-07-07 [1] CRAN (R 3.6.3) ## RcppParallel 5.1.4 2021-05-04 [1] CRAN (R 3.6.3) ## RCurl 1.98-1.6 2022-02-08 [2] CRAN (R 3.6.3) ## readr * 2.0.0 2021-07-20 [1] CRAN (R 3.6.3) ## readxl * 1.3.1 2019-03-13 [1] CRAN (R 3.6.3) ## remotes 2.4.2 2021-11-30 [1] CRAN (R 3.6.3) ## reprex 2.0.1 2021-08-05 [1] CRAN (R 3.6.3) ## reshape 0.8.9 2022-04-12 [1] CRAN (R 3.6.3) ## reshape2 * 1.4.4 2020-04-09 [2] CRAN (R 3.6.3) ## Rgraphviz 2.30.0 2019-10-29 [1] Bioconductor ## rhdf5 2.30.1 2019-11-26 [1] Bioconductor ## Rhdf5lib 1.8.0 2019-10-29 [1] Bioconductor ## rJava 1.0-5 2021-09-24 [1] CRAN (R 3.6.3) ## rjson 0.2.20 2018-06-08 [1] CRAN (R 3.6.3) ## R rlang 1.0.2 &lt;NA&gt; [2] &lt;NA&gt; ## rmarkdown 2.11 2021-09-14 [1] CRAN (R 3.6.3) ## robustbase 0.93-9 2021-09-27 [1] CRAN (R 3.6.3) ## rpart 4.1-15 2019-04-12 [2] CRAN (R 3.6.3) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 3.6.3) ## Rsamtools 2.2.3 2020-02-23 [1] Bioconductor ## rsconnect 0.8.25 2021-11-19 [1] CRAN (R 3.6.3) ## RSQLite 2.2.7 2021-04-22 [1] CRAN (R 3.6.3) ## rstatix 0.7.0 2021-02-13 [1] CRAN (R 3.6.3) ## rstudioapi 0.13 2020-11-12 [2] CRAN (R 3.6.3) ## Rtsne 0.15 2018-11-10 [1] CRAN (R 3.6.3) ## rvest 1.0.2 2021-10-16 [1] CRAN (R 3.6.3) ## S4Vectors * 0.24.4 2020-04-09 [2] Bioconductor ## sandwich 3.0-1 2021-05-18 [1] CRAN (R 3.6.3) ## sass 0.4.0 2021-05-12 [1] CRAN (R 3.6.3) ## scales 1.2.0 2022-04-13 [2] CRAN (R 3.6.3) ## seqinr * 4.2-8 2021-06-09 [1] CRAN (R 3.6.3) ## sessioninfo 1.2.2 2021-12-06 [2] CRAN (R 3.6.3) ## shape 1.4.6 2021-05-19 [1] CRAN (R 3.6.3) ## shiny 1.7.1 2021-10-02 [1] CRAN (R 3.6.3) ## ShortRead 1.44.3 2020-02-03 [1] Bioconductor ## slam 0.1-49 2021-11-17 [1] CRAN (R 3.6.3) ## sna 2.6 2020-10-06 [1] CRAN (R 3.6.3) ## statnet.common 4.5.0 2021-06-05 [1] CRAN (R 3.6.3) ## stringi 1.7.4 2021-08-25 [1] CRAN (R 3.6.3) ## stringr * 1.4.0 2019-02-10 [2] CRAN (R 3.6.3) ## SummarizedExperiment * 1.16.1 2019-12-19 [2] Bioconductor ## survival 3.1-8 2019-12-03 [2] CRAN (R 3.6.3) ## tensorA 0.36.2 2020-11-19 [1] CRAN (R 3.6.3) ## testthat 3.1.4 2022-04-26 [2] CRAN (R 3.6.3) ## textshape 1.7.3 2021-05-28 [1] CRAN (R 3.6.3) ## TH.data 1.1-0 2021-09-27 [1] CRAN (R 3.6.3) ## tibble * 3.1.6 2021-11-07 [1] CRAN (R 3.6.3) ## tidyr * 1.2.0 2022-02-01 [1] CRAN (R 3.6.3) ## tidyselect 1.1.1 2021-04-30 [1] CRAN (R 3.6.3) ## tidyverse * 1.3.1 2021-04-15 [1] CRAN (R 3.6.3) ## tzdb 0.2.0 2021-10-27 [1] CRAN (R 3.6.3) ## UpSetR 1.4.0 2019-05-22 [1] CRAN (R 3.6.3) ## usethis 2.1.6 2022-05-25 [2] CRAN (R 3.6.3) ## utf8 1.2.2 2021-07-24 [1] CRAN (R 3.6.3) ## vctrs 0.3.8 2021-04-29 [1] CRAN (R 3.6.3) ## vegan * 2.5-7 2020-11-28 [1] CRAN (R 3.6.3) ## VennDiagram 1.7.1 2021-12-02 [1] CRAN (R 3.6.3) ## viridisLite 0.4.0 2021-04-13 [2] CRAN (R 3.6.3) ## vroom 1.5.7 2021-11-30 [1] CRAN (R 3.6.3) ## wesanderson * 0.3.6.9000 2021-07-21 [1] Github (karthik/wesanderson@651c944) ## withr 2.4.3 2021-11-30 [1] CRAN (R 3.6.3) ## Wrench 1.4.0 2019-10-29 [1] Bioconductor ## xfun 0.23 2021-05-15 [1] CRAN (R 3.6.3) ## xlsx * 0.6.5 2020-11-10 [1] CRAN (R 3.6.3) ## xlsxjars 0.6.1 2014-08-22 [1] CRAN (R 3.6.3) ## XMAS * 0.0.0.9000 2022-03-23 [1] local ## XMAS2 2.1.7.9 2022-09-09 [2] local ## XML 3.99-0.3 2020-01-20 [1] CRAN (R 3.6.3) ## xml2 1.3.3 2021-11-30 [2] CRAN (R 3.6.3) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 3.6.3) ## XVector 0.26.0 2019-10-29 [2] Bioconductor ## xviz * 1.1.0 2021-01-14 [1] local ## yaml 2.2.2 2022-01-25 [1] CRAN (R 3.6.3) ## zlibbioc 1.32.0 2019-10-29 [2] Bioconductor ## zoo 1.8-9 2021-03-09 [1] CRAN (R 3.6.3) ## ## [1] /share/home/tongbangzhuo/R/x86_64-pc-linux-gnu-library/3.6 ## [2] /opt/R-3.6.3/lib/R/library ## ## R ── Package was removed from disk. ## ## ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── "],["functional-analysis-of-targetdatabase.html", "Chapter 4 Functional Analysis of TargetDatabase 4.1 Environment setup 4.2 Pipeline file processing 4.3 Data loading (Target db) 4.4 Data preprocessing (Target db) 4.5 Standard analysis 4.6 Differential analysis (DA) 4.7 Session info", " Chapter 4 Functional Analysis of TargetDatabase This demo guides you how to analyze the pathway profile annotated from humman2 against 7 target databases. Target database inclues 7 types: acetate butyrate formate propionate card cazy vfdb FlowChart_KEGG ** The analysis of the 7 types of target databases are pretty much the same, here we use CARD database as an example.** 4.1 Environment setup 4.2 Pipeline file processing As described in the introduction chapter, a cohort containing 8 MGS samples of 4 patients from 2 groups in MAFLD project would be used as demo data in this tutorial. 4.2.1 Merge sample files (Target db) Here we need to merge all CARD data from 8 samples into one profile table with the merge script from Humann2 in Bash. But if you have merged the sample data already, please skip this chunk and jump to Data loading. docker run -i --rm -u $(id -u):$(id -g) -v /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Demodata/:/in harbor.xbiome.com/xbiome/environments/humann2:2.8.1-2b8c5c3 bash -c &quot;merge_metaphlan_tables.py /in/PipelineOutput/*/humann2_card/*_genefamilies.tsv &gt; /in/Card/merged_card_profile.tsv&quot; 4.2.2 Split strain info (Target db) Output profile from Humann2 pipeline contains strain information, we need to split the profile file into two files in Bash. But if you have splitted the sample data already, please skip this chunk and jump to Data loading. unstratified profile file stratified profile file grep -v &quot;s_&quot; /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Demodata/Card/merged_card_profile.tsv &gt; /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Demodata/Card/merged_card_profile_unstratified.tsv grep -E &quot;s_|ID&quot; /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Demodata/Metacyc/merged_metacyc_profile.tsv &gt; /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Demodata/Card/merged_card_profile_stratified.tsv 4.3 Data loading (Target db) Since the format of pathway profile annotated in 7 target databases are almost identical, We use card data as an example. Same as kegg pathway data, we rescale data at the begining of analysis to reduce the differences of sequencing depth across all samples. Read in card data ## Read in merged card profile data merged_card_profile &lt;- read.table(&#39;/share/projects/SOP/Functional_Analysis/Tongbangzhuo/Demodata/Card/merged_card_profile_unstratified.tsv&#39;, sep = &#39;\\t&#39;, header = TRUE, check.names = FALSE, na.strings = &#39;&#39;,comment.char = &#39;&#39;, quote = &#39;&#39;) colnames(merged_card_profile) %&lt;&gt;% str_remove_all(., &#39;_.+&#39;) # ## Rename entry name, keep ARO number # merged_card_profile$ID %&lt;&gt;% str_replace_all(., &#39;.+(ARO:[0-9]+)\\\\|(.+)_\\\\[.+\\\\]&#39;, &#39;\\\\1|\\\\2&#39;) # # head(merged_card_profile, n = 2) ## Read in metadata (Group information) metadata &lt;- read.table(&#39;/share/projects/SOP/Functional_Analysis/Tongbangzhuo/Demodata/metadata.xls&#39;, check.names = FALSE, header = TRUE) metadata %&lt;&gt;% column_to_rownames(&#39;SeqID&#39;) 4.4 Data preprocessing (Target db) 4.4.1 Transforming data (Target db) rescaled_merged_card_profile &lt;- merged_card_profile %&gt;% column_to_rownames(&#39;ID&#39;) %&gt;% apply(., 2, function(x) x/sum(x)) %&gt;% as.data.frame() head(rescaled_merged_card_profile, n = 2) ## 16453 16455 16456 16457 16461 16464 16465 16466 ## UNMAPPED 9.988510e-01 9.984107e-01 9.991099e-01 9.994578e-01 9.989571e-01 0.9993301 9.992888e-01 9.990494e-01 ## gb|AAA20116.1|ARO:3000180|tetA(P)_[Clostridium_perfringens] 2.266749e-06 1.249741e-06 9.247141e-07 1.215390e-07 4.040324e-07 0.0000000 6.341580e-08 3.858159e-06 dim(rescaled_merged_card_profile) ## [1] 908 8 4.4.2 Remove unppaed pathways (Target db) ## In this chunk, we remove the umapped row in rescaled profile table because we are not able to intepret UNMAPPED entry. card_profile &lt;- rescaled_merged_card_profile[grep(&quot;UNMAPPED&quot;, rownames(rescaled_merged_card_profile), invert = TRUE), ] dim(card_profile) ## [1] 907 8 4.4.3 Aggregate low abundance data In this chunck, we aggregate low abundance features to one row. 1e-12 is an empirical threshold fot filtering low abundance feature. According to published paper Obese Individuals with and without Type 2 Diabetes Show Different Gut Microbial Functional Capacity and Composition, pathway with top 50% mean abundance and top 50% variance are left. But in MaAsLin2，pathway with abundance less than 10-10 are filtered by default. Note: Run Transforming data and Remove unmapped pathways before running this chunk! Filtered_card_profile &lt;- aggregate_low_abundance(input_data = card_profile, threshold = 1e-12) ## threshold should be modified based on your on study dim(Filtered_card_profile) ## [1] 907 8 4.5 Standard analysis Note: All chunks in Data preprocessing should be excuted before doing analysis in this chunk. 4.5.1 Compositional barplot ## In this chunk, we construct stacked pathway barplot to depict the pathway composition of samples, we use function plot_stacked_bar from xviz to plot. ## In case there are too much entries, we use parameter &quot;collapse&quot; in plot_stacked_bar function to integrate entries whose abundance are below given threshold into &quot;Others&quot;. ## Note: Adjust your graph size to show complete graph. compositional_plt &lt;- xviz::plot_stacked_bar(otu_table = Filtered_card_profile %&gt;% t() %&gt;% as.data.frame(), metadata = metadata, collapse = 0.01) + theme(axis.text.x = element_text(vjust = 1)) compositional_plt 4.5.2 Beta diversity ## In this chunk, we inherit the concept of Beta diversity of microbial taxa data and apply it to pathway data to explore the similarity between samples. ## construct phyloseq for beta diversity analysis tmp_phyloseq &lt;- phyloseq(otu_table(Filtered_card_profile, taxa_are_rows = TRUE), sample_data(metadata)) ## PCoA plot PCOA_plot &lt;- xviz::plot_beta_diversity(phyloseq = tmp_phyloseq, feature = &#39;Group&#39;, method = &#39;bray&#39;, label = TRUE) print(PCOA_plot) ## PERMANOVA test &amp; beta dispersion test ## We use PERMANOVA test to check the differences of function composition among different groups. Additionally, we also take homogeneity of group variance into consideration. dispersion_permanova_res &lt;- run_permanova_betadisp(physeq = tmp_phyloseq, vars = &#39;Group&#39; ) dispersion_permanova_res ## $betadisp_res ## variable p_value analysis ## 1 Group 0.273 beta_dispersion_permutation999 ## ## $permanova_res ## variable p_value R2 analysis ## 1 Group 0.476 0.1373393 permanova_permutation999 4.6 Differential analysis (DA) 4.6.1 Filter low prevalence pathway (DA) Low prevalence pathways are pathways only occur in minor samples. In this chunk, we would remove pathways apperaing in less than max(2 , 5% of samples) from data set before doing analysis. Remember to run Data preprocessing before running this chunk! print(paste0(nrow(Filtered_card_profile), &#39; entries before filtering low prevalence data&#39;)) ## [1] &quot;907 entries before filtering low prevalence data&quot; Filtered_card_profile &lt;- filter_prevalence(otu_table = Filtered_card_profile, threshold = 0.05, taxa_are_rows = TRUE ) head(Filtered_card_profile, n =2) ## 16453 16455 16456 16457 16461 16464 16465 16466 ## gb|AAA20116.1|ARO:3000180|tetA(P)_[Clostridium_perfringens] 2.266749e-06 1.249741e-06 9.247141e-07 1.21539e-07 4.040324e-07 0.000000e+00 6.341580e-08 3.858159e-06 ## gb|AAA20117.1|ARO:3000195|tetB(P)_[Clostridium_perfringens] 4.260839e-06 3.980291e-06 1.026959e-06 0.00000e+00 4.795510e-07 1.736386e-07 4.890361e-07 9.308673e-06 print(paste0(nrow(Filtered_card_profile), &#39; entries After filtering low prevalence data&#39;)) ## [1] &quot;725 entries After filtering low prevalence data&quot; 4.6.2 DA with LM Note: Please Filter low prevalence pathway before DA. ## In this chunk, you would be using logistic regression model to find pathways that are significantly enriched in certain group. ## Due to the nature of compositional data, we cannot apply linear models to compositional data directly. ## Transformation of relative abundance data should be carried out before feeding the data to LM. ## Here, we add a very small value (1e-12) to the pathway profile table to avoid genrating NA during transformation, then use logit transformation to transform data. And eventually we apply LM to the transformed data ## Adding small value to the profile table (The value is arbitrary). DA_card_profile &lt;- Filtered_card_profile + 1e-12 ## Reshape profile data table and use logit transformation. DA_card_profile &lt;- DA_card_profile %&gt;% t() %&gt;% as.data.frame() %&gt;% rownames_to_column(&#39;SeqID&#39;) %&gt;% as.data.frame() DA_metadata &lt;- metadata %&gt;% rownames_to_column(&#39;SeqID&#39;) %&gt;% as.data.frame() ## Reshape dataframe into long table DA_input &lt;- merge(DA_card_profile, DA_metadata, by=&#39;SeqID&#39;) %&gt;% reshape2::melt(value.name = &#39;RA&#39;, variable.name = &#39;PathwayIDs&#39;) ## Logit transformation DA_input %&lt;&gt;% mutate(RA_logit = log(RA/(1-RA))) ## Fit data to LM ## Loop over each pathway in two groups LM_res &lt;- DA_input %&gt;% split(.$PathwayIDs) %&gt;% lapply(., function(x){ gml_res_summary &lt;- lm(data = x, formula = RA_logit ~ Group) %&gt;% summary() %&gt;% .$coefficients %&gt;% as.matrix() %&gt;% as.data.frame() %&gt;% rownames_to_column(var = &quot;Factors&quot;) } ) ## Merge all result in one table LM_res &lt;- LM_res %&gt;% data.table::rbindlist(idcol = &quot;PathwayID&quot;) %&gt;% filter(Factors != &quot;(Intercept)&quot;) ## Adjust p value using p.adjust function from stats package, you could choose different adjust method. LM_res %&lt;&gt;% mutate(adjust.p = stats::p.adjust(.$`Pr(&gt;|t|)`, method = &#39;BH&#39;)) ## Calculate effect size (Odds ratio) of each feature LM_res %&lt;&gt;% mutate(OR = exp(Estimate)) %&gt;% as.data.frame() head(LM_res) ## PathwayID Factors Estimate Std. Error t value Pr(&gt;|t|) ## 1 gb|AAA20116.1|ARO:3000180|tetA(P)_[Clostridium_perfringens] Group肝酶正常 -3.44760133 3.4786887 -0.99106347 0.35992376 ## 2 gb|AAA20117.1|ARO:3000195|tetB(P)_[Clostridium_perfringens] Group肝酶正常 3.16439828 3.7211162 0.85038953 0.42773400 ## 3 gb|AAA23018.1|ARO:3004454|Campylobacter_coli_chloramphenicol_acetyltransferase_[Campylobacter_coli] Group肝酶正常 9.72826026 3.0303720 3.21025277 0.01836118 ## 4 gb|AAA23033.2|ARO:3000190|tetO_[Campylobacter_jejuni] Group肝酶正常 -0.02887667 0.3625844 -0.07964124 0.93911245 ## 5 gb|AAA25053.1|ARO:3000884|TEM-12_[Klebsiella_oxytoca] Group肝酶正常 0.41660909 3.5283271 0.11807553 0.90986150 ## 6 gb|AAA25293.1|ARO:3000192|tetS_[Listeria_monocytogenes] Group肝酶正常 -0.39339749 0.2546723 -1.54472018 0.17336596 ## adjust.p OR ## 1 0.9993136 3.182188e-02 ## 2 0.9993136 2.367449e+01 ## 3 0.5283449 1.678532e+04 ## 4 0.9993136 9.715363e-01 ## 5 0.9993136 1.516809e+00 ## 6 0.7089938 6.747605e-01 4.6.3 Show DA result with volcano plot ## Plot volcano plot to show effect size (x-axis) and p value (y-axis) of pathways. ## Here we only tend to hightlight pathways that satisfy adjust.p &lt; 0.05 and (OR &lt; 0.2 | OR &gt; 0.5) at the same time. ## You can nevertheless choose different threshold accroding to your own data. volcano_plot &lt;- LM_res %&gt;% mutate(p.log = -log10(`Pr(&gt;|t|)`), log10OR = log10(OR)) %&gt;% ggplot(aes(x = log10OR, y = p.log)) + geom_point(size = 0.5) + geom_point(size = 0.5, color = &quot;red&quot;, data = . %&gt;% filter(`Pr(&gt;|t|)` &lt; 0.05 &amp; (OR &lt; 0.2 | OR &gt; 0.5))) + theme_bw() + geom_vline(xintercept = log10(c(0.05, 0.1, 0.2, 0.5, 1, 2)), size = 0.05, color = &quot;grey&quot;) + geom_hline(yintercept = -log10(c(0.7)), size = 0.05, color = &quot;grey&quot;) + theme(aspect.ratio = 1, panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ) + labs(x = &quot;Estimated Odds Ratio&quot;, y = &quot;FDR p-values(-log10)&quot;) print(volcano_plot) 4.7 Session info devtools::session_info() ## ─ Session info ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 3.6.3 (2020-02-29) ## os Ubuntu 16.04.7 LTS ## system x86_64, linux-gnu ## ui RStudio ## language (EN) ## collate en_IN.UTF-8 ## ctype en_IN.UTF-8 ## tz Asia/Hong_Kong ## date 2022-09-13 ## rstudio 1.1.419 (server) ## pandoc 2.7.3 @ /usr/bin/ (via rmarkdown) ## ## ─ Packages ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## ! package * version date (UTC) lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 3.6.3) ## ade4 1.7-17 2021-06-17 [1] CRAN (R 3.6.3) ## ALDEx2 * 1.18.0 2019-10-29 [1] Bioconductor ## annotate 1.64.0 2019-10-29 [1] Bioconductor ## AnnotationDbi * 1.48.0 2019-10-29 [1] Bioconductor ## ape 5.5 2021-04-25 [1] CRAN (R 3.6.3) ## assertthat 0.2.1 2019-03-21 [2] CRAN (R 3.6.3) ## backports 1.4.1 2021-12-13 [1] CRAN (R 3.6.3) ## base64enc 0.1-3 2015-07-28 [2] CRAN (R 3.6.3) ## bayesm 3.1-4 2019-10-15 [1] CRAN (R 3.6.3) ## biglm 0.9-2.1 2020-11-27 [1] CRAN (R 3.6.3) ## Biobase * 2.46.0 2019-10-29 [2] Bioconductor ## BiocGenerics * 0.32.0 2019-10-29 [2] Bioconductor ## BiocParallel * 1.20.1 2019-12-21 [2] Bioconductor ## biomformat 1.14.0 2019-10-29 [1] Bioconductor ## Biostrings 2.54.0 2019-10-29 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] CRAN (R 3.6.3) ## bit64 4.0.5 2020-08-30 [1] CRAN (R 3.6.3) ## bitops 1.0-7 2021-04-24 [1] CRAN (R 3.6.3) ## blob 1.2.2 2021-07-23 [1] CRAN (R 3.6.3) ## bookdown 0.24 2021-09-02 [1] CRAN (R 3.6.3) ## brio 1.1.3 2021-11-30 [2] CRAN (R 3.6.3) ## broom 0.7.12 2022-01-28 [1] CRAN (R 3.6.3) ## bslib 0.3.1 2021-10-06 [1] CRAN (R 3.6.3) ## cachem 1.0.5 2021-05-15 [1] CRAN (R 3.6.3) ## callr 3.7.0 2021-04-20 [2] CRAN (R 3.6.3) ## car 3.0-12 2021-11-06 [1] CRAN (R 3.6.3) ## carData 3.0-4 2020-05-22 [1] CRAN (R 3.6.3) ## caTools 1.18.2 2021-03-28 [1] CRAN (R 3.6.3) ## cellranger 1.1.0 2016-07-27 [1] CRAN (R 3.6.3) ## checkmate 2.0.0 2020-02-06 [1] CRAN (R 3.6.3) ## circlize * 0.4.13 2021-06-09 [1] CRAN (R 3.6.3) ## cli 3.1.0 2021-10-27 [1] CRAN (R 3.6.3) ## clue 0.3-59 2021-04-16 [1] CRAN (R 3.6.3) ## cluster 2.1.0 2019-06-19 [2] CRAN (R 3.6.3) ## coda 0.19-4 2020-09-30 [1] CRAN (R 3.6.3) ## codetools 0.2-16 2018-12-24 [2] CRAN (R 3.6.3) ## coin 1.4-2 2021-10-08 [1] CRAN (R 3.6.3) ## colorspace 2.0-2 2021-06-24 [1] CRAN (R 3.6.3) ## ComplexHeatmap * 2.2.0 2019-10-29 [1] Bioconductor ## compositions 2.0-2 2021-07-14 [1] CRAN (R 3.6.3) ## cowplot * 1.1.1 2020-12-30 [1] CRAN (R 3.6.3) ## crayon 1.5.0 2022-02-14 [1] CRAN (R 3.6.3) ## curl 4.3.2 2021-06-23 [2] CRAN (R 3.6.3) ## dada2 * 1.14.1 2020-02-22 [1] Bioconductor ## data.table * 1.14.0 2021-02-21 [1] CRAN (R 3.6.3) ## DBI 1.1.1 2021-01-15 [1] CRAN (R 3.6.3) ## dbplyr 2.1.1 2021-04-06 [1] CRAN (R 3.6.3) ## DelayedArray * 0.12.3 2020-04-09 [2] Bioconductor ## DelayedMatrixStats 1.8.0 2019-10-29 [1] Bioconductor ## DEoptimR 1.0-9 2021-05-24 [1] CRAN (R 3.6.3) ## desc 1.4.1 2022-03-06 [2] CRAN (R 3.6.3) ## DESeq2 * 1.26.0 2019-10-29 [1] Bioconductor ## devtools 2.4.3 2021-11-30 [1] CRAN (R 3.6.3) ## digest 0.6.29 2021-12-01 [1] CRAN (R 3.6.3) ## dplyr * 1.0.6 2021-05-05 [1] CRAN (R 3.6.3) ## edgeR 3.28.1 2020-02-26 [1] Bioconductor ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 3.6.3) ## EnhancedVolcano * 1.4.0 2019-10-29 [1] Bioconductor ## enrichR * 3.0 2021-02-02 [1] CRAN (R 3.6.3) ## evaluate 0.15 2022-02-18 [2] CRAN (R 3.6.3) ## fansi 1.0.2 2022-01-14 [1] CRAN (R 3.6.3) ## farver 2.1.0 2021-02-28 [2] CRAN (R 3.6.3) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 3.6.3) ## fdrtool 1.2.17 2021-11-13 [1] CRAN (R 3.6.3) ## forcats * 0.5.1 2021-01-27 [1] CRAN (R 3.6.3) ## foreach 1.5.2 2022-02-02 [2] CRAN (R 3.6.3) ## foreign 0.8-75 2020-01-20 [2] CRAN (R 3.6.3) ## formatR 1.12 2022-03-31 [2] CRAN (R 3.6.3) ## Formula 1.2-4 2020-10-16 [1] CRAN (R 3.6.3) ## fs 1.5.2 2021-12-08 [1] CRAN (R 3.6.3) ## futile.logger 1.4.3 2016-07-10 [2] CRAN (R 3.6.3) ## futile.options 1.0.1 2018-04-20 [2] CRAN (R 3.6.3) ## genefilter 1.68.0 2019-10-29 [1] Bioconductor ## geneplotter 1.64.0 2019-10-29 [1] Bioconductor ## generics 0.1.2 2022-01-31 [1] CRAN (R 3.6.3) ## GenomeInfoDb * 1.22.1 2020-03-27 [2] Bioconductor ## GenomeInfoDbData 1.2.2 2020-08-24 [2] Bioconductor ## GenomicAlignments 1.22.1 2019-11-12 [1] Bioconductor ## GenomicRanges * 1.38.0 2019-10-29 [2] Bioconductor ## getopt 1.20.3 2019-03-22 [1] CRAN (R 3.6.3) ## GetoptLong 1.0.5 2020-12-15 [1] CRAN (R 3.6.3) ## GGally * 2.1.2 2021-06-21 [1] CRAN (R 3.6.3) ## ggbipart * 0.1.2 2022-07-20 [1] Github (pedroj/bipartite_plots@162f577) ## ggExtra * 0.9 2019-08-27 [1] CRAN (R 3.6.3) ## ggplot2 * 3.3.5 2021-06-25 [1] CRAN (R 3.6.3) ## ggpubr * 0.4.0 2020-06-27 [1] CRAN (R 3.6.3) ## ggrepel * 0.9.1 2021-01-15 [2] CRAN (R 3.6.3) ## ggsci * 2.9 2018-05-14 [1] CRAN (R 3.6.3) ## ggsignif 0.6.3 2021-09-09 [1] CRAN (R 3.6.3) ## glmnet 4.1-2 2021-06-24 [1] CRAN (R 3.6.3) ## GlobalOptions 0.1.2 2020-06-10 [1] CRAN (R 3.6.3) ## glue 1.6.1 2022-01-22 [1] CRAN (R 3.6.3) ## GMPR 0.1.3 2021-05-17 [1] local ## gplots 3.1.1 2020-11-28 [1] CRAN (R 3.6.3) ## graph 1.64.0 2019-10-29 [1] Bioconductor ## gridExtra 2.3 2017-09-09 [2] CRAN (R 3.6.3) ## gtable 0.3.0 2019-03-25 [2] CRAN (R 3.6.3) ## gtools 3.9.2 2021-06-06 [1] CRAN (R 3.6.3) ## haven 2.4.1 2021-04-23 [1] CRAN (R 3.6.3) ## highr 0.9 2021-04-16 [1] CRAN (R 3.6.3) ## Hmisc 4.5-0 2021-02-28 [1] CRAN (R 3.6.3) ## hms 1.1.1 2021-09-26 [1] CRAN (R 3.6.3) ## htmlTable 2.3.0 2021-10-12 [1] CRAN (R 3.6.3) ## htmltools 0.5.2 2021-08-25 [1] CRAN (R 3.6.3) ## htmlwidgets 1.5.4 2021-09-08 [2] CRAN (R 3.6.3) ## httpuv 1.6.1 2021-05-07 [1] CRAN (R 3.6.3) ## httr 1.4.3 2022-05-04 [2] CRAN (R 3.6.3) ## hwriter 1.3.2 2014-09-10 [1] CRAN (R 3.6.3) ## igraph 1.3.1 2022-04-20 [2] CRAN (R 3.6.3) ## IHW 1.14.0 2019-10-29 [1] Bioconductor ## IRanges * 2.20.2 2020-01-13 [2] Bioconductor ## iterators 1.0.14 2022-02-05 [2] CRAN (R 3.6.3) ## jpeg 0.1-9 2021-07-24 [1] CRAN (R 3.6.3) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 3.6.3) ## jsonlite 1.8.0 2022-02-22 [2] CRAN (R 3.6.3) ## KEGGgraph 1.46.0 2019-10-29 [1] Bioconductor ## KEGGREST 1.26.1 2019-11-06 [1] Bioconductor ## KernSmooth 2.23-16 2019-10-15 [2] CRAN (R 3.6.3) ## knitr 1.36 2021-09-29 [1] CRAN (R 3.6.3) ## labeling 0.4.2 2020-10-20 [2] CRAN (R 3.6.3) ## lambda.r 1.2.4 2019-09-18 [2] CRAN (R 3.6.3) ## later 1.3.0 2021-08-18 [2] CRAN (R 3.6.3) ## lattice * 0.20-38 2018-11-04 [2] CRAN (R 3.6.3) ## latticeExtra 0.6-29 2019-12-19 [1] CRAN (R 3.6.3) ## lazyeval 0.2.2 2019-03-15 [2] CRAN (R 3.6.3) ## libcoin 1.0-9 2021-09-27 [1] CRAN (R 3.6.3) ## lifecycle 1.0.1 2021-09-24 [1] CRAN (R 3.6.3) ## limma 3.42.2 2020-02-03 [2] Bioconductor ## locfit 1.5-9.4 2020-03-25 [1] CRAN (R 3.6.3) ## lpsymphony 1.14.0 2019-10-29 [1] Bioconductor (R 3.6.3) ## lubridate 1.7.10 2021-02-26 [1] CRAN (R 3.6.3) ## Maaslin2 1.7.3 2022-03-23 [1] Github (biobakery/maaslin2@8d090e4) ## magrittr * 2.0.2 2022-01-26 [1] CRAN (R 3.6.3) ## MASS 7.3-54 2021-05-03 [1] CRAN (R 3.6.3) ## Matrix 1.3-4 2021-06-01 [1] CRAN (R 3.6.3) ## matrixStats * 0.60.0 2021-07-26 [1] CRAN (R 3.6.3) ## mbzinb 0.2 2021-06-23 [1] local ## memoise 2.0.1 2021-11-26 [2] CRAN (R 3.6.3) ## metagenomeSeq 1.28.2 2020-02-03 [1] Bioconductor ## metamicrobiomeR 1.1 2021-02-03 [1] local ## mgcv 1.8-31 2019-11-09 [2] CRAN (R 3.6.3) ## microbiome 1.8.0 2019-10-29 [1] Bioconductor ## mime 0.12 2021-09-28 [2] CRAN (R 3.6.3) ## miniUI 0.1.1.1 2018-05-18 [1] CRAN (R 3.6.3) ## modelr 0.1.8 2020-05-19 [1] CRAN (R 3.6.3) ## modeltools 0.2-23 2020-03-05 [1] CRAN (R 3.6.3) ## multcomp 1.4-17 2021-04-29 [1] CRAN (R 3.6.3) ## multtest 2.42.0 2019-10-29 [2] Bioconductor ## munsell 0.5.0 2018-06-12 [2] CRAN (R 3.6.3) ## mvtnorm 1.1-3 2021-10-08 [1] CRAN (R 3.6.3) ## network * 1.17.1 2021-06-14 [1] CRAN (R 3.6.3) ## nlme 3.1-144 2020-02-06 [2] CRAN (R 3.6.3) ## nnet 7.3-12 2016-02-02 [2] CRAN (R 3.6.3) ## optparse 1.7.1 2021-10-08 [1] CRAN (R 3.6.3) ## org.Hs.eg.db * 3.10.0 2021-12-08 [1] Bioconductor ## pathview * 1.26.0 2019-10-29 [1] Bioconductor ## pcaPP 1.9-74 2021-04-23 [1] CRAN (R 3.6.3) ## permute * 0.9-5 2019-03-12 [1] CRAN (R 3.6.3) ## phyloseq * 1.30.0 2019-10-29 [1] Bioconductor ## pillar 1.7.0 2022-02-01 [1] CRAN (R 3.6.3) ## pkgbuild 1.3.1 2021-12-20 [2] CRAN (R 3.6.3) ## pkgconfig 2.0.3 2019-09-22 [2] CRAN (R 3.6.3) ## pkgload 1.2.4 2021-11-30 [2] CRAN (R 3.6.3) ## plotly * 4.10.0 2021-10-09 [1] CRAN (R 3.6.3) ## plyr 1.8.7 2022-03-24 [2] CRAN (R 3.6.3) ## png 0.1-7 2013-12-03 [1] CRAN (R 3.6.3) ## prettyunits 1.1.1 2020-01-24 [2] CRAN (R 3.6.3) ## processx 3.5.3 2022-03-25 [2] CRAN (R 3.6.3) ## promises 1.2.0.1 2021-02-11 [2] CRAN (R 3.6.3) ## protoclust 1.6.3 2019-01-31 [1] CRAN (R 3.6.3) ## ps 1.7.0 2022-04-23 [2] CRAN (R 3.6.3) ## pscl 1.5.5 2020-03-07 [1] CRAN (R 3.6.3) ## purrr * 0.3.4 2020-04-17 [2] CRAN (R 3.6.3) ## qvalue 2.18.0 2019-10-29 [1] Bioconductor ## R6 2.5.1 2021-08-19 [1] CRAN (R 3.6.3) ## RAIDA 1.0 2021-06-23 [1] local ## ranacapa 0.1.0 2021-06-18 [1] Github (gauravsk/ranacapa@58c0cab) ## RColorBrewer * 1.1-3 2022-04-03 [2] CRAN (R 3.6.3) ## Rcpp * 1.0.7 2021-07-07 [1] CRAN (R 3.6.3) ## RcppParallel 5.1.4 2021-05-04 [1] CRAN (R 3.6.3) ## RCurl 1.98-1.6 2022-02-08 [2] CRAN (R 3.6.3) ## readr * 2.0.0 2021-07-20 [1] CRAN (R 3.6.3) ## readxl * 1.3.1 2019-03-13 [1] CRAN (R 3.6.3) ## remotes 2.4.2 2021-11-30 [1] CRAN (R 3.6.3) ## reprex 2.0.1 2021-08-05 [1] CRAN (R 3.6.3) ## reshape 0.8.9 2022-04-12 [1] CRAN (R 3.6.3) ## reshape2 * 1.4.4 2020-04-09 [2] CRAN (R 3.6.3) ## Rgraphviz 2.30.0 2019-10-29 [1] Bioconductor ## rhdf5 2.30.1 2019-11-26 [1] Bioconductor ## Rhdf5lib 1.8.0 2019-10-29 [1] Bioconductor ## rJava 1.0-5 2021-09-24 [1] CRAN (R 3.6.3) ## rjson 0.2.20 2018-06-08 [1] CRAN (R 3.6.3) ## R rlang 1.0.2 &lt;NA&gt; [2] &lt;NA&gt; ## rmarkdown 2.11 2021-09-14 [1] CRAN (R 3.6.3) ## robustbase 0.93-9 2021-09-27 [1] CRAN (R 3.6.3) ## rpart 4.1-15 2019-04-12 [2] CRAN (R 3.6.3) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 3.6.3) ## Rsamtools 2.2.3 2020-02-23 [1] Bioconductor ## rsconnect 0.8.25 2021-11-19 [1] CRAN (R 3.6.3) ## RSQLite 2.2.7 2021-04-22 [1] CRAN (R 3.6.3) ## rstatix 0.7.0 2021-02-13 [1] CRAN (R 3.6.3) ## rstudioapi 0.13 2020-11-12 [2] CRAN (R 3.6.3) ## Rtsne 0.15 2018-11-10 [1] CRAN (R 3.6.3) ## rvest 1.0.2 2021-10-16 [1] CRAN (R 3.6.3) ## S4Vectors * 0.24.4 2020-04-09 [2] Bioconductor ## sandwich 3.0-1 2021-05-18 [1] CRAN (R 3.6.3) ## sass 0.4.0 2021-05-12 [1] CRAN (R 3.6.3) ## scales 1.2.0 2022-04-13 [2] CRAN (R 3.6.3) ## seqinr * 4.2-8 2021-06-09 [1] CRAN (R 3.6.3) ## sessioninfo 1.2.2 2021-12-06 [2] CRAN (R 3.6.3) ## shape 1.4.6 2021-05-19 [1] CRAN (R 3.6.3) ## shiny 1.7.1 2021-10-02 [1] CRAN (R 3.6.3) ## ShortRead 1.44.3 2020-02-03 [1] Bioconductor ## slam 0.1-49 2021-11-17 [1] CRAN (R 3.6.3) ## sna 2.6 2020-10-06 [1] CRAN (R 3.6.3) ## statnet.common 4.5.0 2021-06-05 [1] CRAN (R 3.6.3) ## stringi 1.7.4 2021-08-25 [1] CRAN (R 3.6.3) ## stringr * 1.4.0 2019-02-10 [2] CRAN (R 3.6.3) ## SummarizedExperiment * 1.16.1 2019-12-19 [2] Bioconductor ## survival 3.1-8 2019-12-03 [2] CRAN (R 3.6.3) ## tensorA 0.36.2 2020-11-19 [1] CRAN (R 3.6.3) ## testthat 3.1.4 2022-04-26 [2] CRAN (R 3.6.3) ## textshape 1.7.3 2021-05-28 [1] CRAN (R 3.6.3) ## TH.data 1.1-0 2021-09-27 [1] CRAN (R 3.6.3) ## tibble * 3.1.6 2021-11-07 [1] CRAN (R 3.6.3) ## tidyr * 1.2.0 2022-02-01 [1] CRAN (R 3.6.3) ## tidyselect 1.1.1 2021-04-30 [1] CRAN (R 3.6.3) ## tidyverse * 1.3.1 2021-04-15 [1] CRAN (R 3.6.3) ## tzdb 0.2.0 2021-10-27 [1] CRAN (R 3.6.3) ## UpSetR 1.4.0 2019-05-22 [1] CRAN (R 3.6.3) ## usethis 2.1.6 2022-05-25 [2] CRAN (R 3.6.3) ## utf8 1.2.2 2021-07-24 [1] CRAN (R 3.6.3) ## vctrs 0.3.8 2021-04-29 [1] CRAN (R 3.6.3) ## vegan * 2.5-7 2020-11-28 [1] CRAN (R 3.6.3) ## VennDiagram 1.7.1 2021-12-02 [1] CRAN (R 3.6.3) ## viridisLite 0.4.0 2021-04-13 [2] CRAN (R 3.6.3) ## vroom 1.5.7 2021-11-30 [1] CRAN (R 3.6.3) ## wesanderson * 0.3.6.9000 2021-07-21 [1] Github (karthik/wesanderson@651c944) ## withr 2.4.3 2021-11-30 [1] CRAN (R 3.6.3) ## Wrench 1.4.0 2019-10-29 [1] Bioconductor ## xfun 0.23 2021-05-15 [1] CRAN (R 3.6.3) ## xlsx * 0.6.5 2020-11-10 [1] CRAN (R 3.6.3) ## xlsxjars 0.6.1 2014-08-22 [1] CRAN (R 3.6.3) ## XMAS * 0.0.0.9000 2022-03-23 [1] local ## XMAS2 2.1.7.9 2022-09-09 [2] local ## XML 3.99-0.3 2020-01-20 [1] CRAN (R 3.6.3) ## xml2 1.3.3 2021-11-30 [2] CRAN (R 3.6.3) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 3.6.3) ## XVector 0.26.0 2019-10-29 [2] Bioconductor ## xviz * 1.1.0 2021-01-14 [1] local ## yaml 2.2.2 2022-01-25 [1] CRAN (R 3.6.3) ## zlibbioc 1.32.0 2019-10-29 [2] Bioconductor ## zoo 1.8-9 2021-03-09 [1] CRAN (R 3.6.3) ## ## [1] /share/home/tongbangzhuo/R/x86_64-pc-linux-gnu-library/3.6 ## [2] /opt/R-3.6.3/lib/R/library ## ## R ── Package was removed from disk. ## ## ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── "],["msea.html", "Chapter 5 MSEA 5.1 Execute MSEA with python script on server 5.2 Environment setup 5.3 Read in MSEA result 5.4 Filter MSEA result 5.5 Visualization 5.6 Run enrichR analysis 5.7 Session info", " Chapter 5 MSEA This is a markdown tutorial for MSEA. To run MSEA, you need to Install MSEA to your default python before running this template. Installation instruction: https://msea.readthedocs.io/en/latest/quickstart.html#installation. You can run MSEA when you have genus that you’re interested in (e.g., DA genus), write all genus into one txt file, one genus per line and feed the file to MSEA as input. Flowchart 5.1 Execute MSEA with python script on server You can run MSEA analysis with MSEA_Run.py on server, one required parameters and two optional parameters need to be provided for the script: –input (Required), input genus list file for MSEA, one genus per line. –output (Optional), output csv file of MSEA result. Default testout.csv –PerturbationTimes (Optional), number of perturbation. Fisher’s excat test has bias on group with large number of samples, MSEA uses random sampling to remove the bias. Larger number of perturbation would cause longer runtime. Default 50. For more detail, see citation /home/tongbangzhuo/Software/miniconda3/bin/python ./MSEA/MSEA_Run.py --input ./MSEA/test_input --output ./MSEA/testout.csv --PerturbationTimes 10 5.2 Environment setup library(dplyr) library(magrittr) library(ggplot2) library(ggbipart) library(stringr) library(tibble) library(wesanderson) 5.3 Read in MSEA result MSEA_res = read.csv(&#39;/share/projects/SOP/Functional_Analysis/github/Functional_analysis/MSEA/testout.csv&#39;, sep = &#39;\\t&#39;) head(MSEA_res, n=3) ## term oddsratio pvalue qvalue zscore combined_score shared n_shared ## 1 SP7 27.58621 9.571517e-05 0.0003983486 -8.376409 77.51640 [&#39;Pseudomonas&#39;, &#39;Salmonella&#39;, &#39;Azomonas&#39;, &#39;Sodalis&#39;] 4 ## 2 SOCS3 29.41176 1.234368e-05 0.0001439254 -5.916120 66.86615 [&#39;Salmonella&#39;, &#39;Azomonas&#39;, &#39;Sodalis&#39;, &#39;Pseudomonas&#39;, &#39;Borrelia&#39;] 5 ## 3 IFNAR1 53.33333 1.010645e-05 0.0001312818 -5.152460 59.26533 [&#39;Pseudomonas&#39;, &#39;Salmonella&#39;, &#39;Borrelia&#39;, &#39;Sodalis&#39;] 4 As the table shown above, MSEA result has 8 columns: term, human gene names. oddsratio. Odds ratio (Effect size) of the association between human gene and microbial Genus. pvalue. p value of Fisher’s exact test. qvalue. q value of Fisher’s exact test. FDR Benjamini-Hochberg correction applied. zscore. z-score measuring the deviation in expected ranks. combined_score. \\(c = log_{10}(p)*z\\). shared. Genus associated with the human gene. n_shared. Number of genus associated with the human gene. 5.4 Filter MSEA result ## Filter MSEA result with qvalue MSEA_res %&lt;&gt;% filter(qvalue &lt; 0.05) ## Draw bipartite with top 10 combined_score human genes ## Define data transforming function Transform_data &lt;- function(df){ All_Genus_in_res &lt;- df$shared %&gt;% unlist() %&gt;% str_remove_all(&#39;\\\\[&#39;) %&gt;% str_remove_all(&#39;\\\\]&#39;) %&gt;% str_remove_all(&quot;&#39;&quot;) %&gt;% str_split(&#39;, &#39;) %&gt;% unlist() %&gt;% unique() lst &lt;- list() for (i in All_Genus_in_res){ count_vec &lt;- c() for (j in (1:nrow(df))){ target_string = df[j,&#39;shared&#39;] %&gt;% str_remove_all(&#39;\\\\[&#39;) %&gt;% str_remove_all(&#39;\\\\]&#39;) %&gt;% str_remove_all(&quot;&#39;&quot;) %&gt;% str_split(&#39;, &#39;) %&gt;% unlist() count = sum(i == target_string) count_vec &lt;- c(count_vec, count) } lst[[i]] &lt;- count_vec } bipartite_tbl &lt;- cbind(Top_MSEA_res, as.data.frame(lst)) %&gt;% dplyr::select(term, all_of(All_Genus_in_res)) %&gt;% column_to_rownames(&#39;term&#39;) return(bipartite_tbl) } ## Select top 10 human genes Top_MSEA_res &lt;- MSEA_res[1:10,] 5.5 Visualization Draw bipartit graph to show the relation between human genes and microbial Genus with ggnet. ## Generate data for bipartit graph bipartite_tbl &lt;- Transform_data(Top_MSEA_res) ## Define network layout mymat &lt;- bipartite_tbl coordP &lt;- cbind(rep(2, dim(mymat)[1]), seq(1, dim(mymat)[1]) + 2) coordA &lt;- cbind(rep(4, dim(mymat)[2]), seq(1, dim(mymat)[2]) + 2) mylayout &lt;- as.matrix(rbind(coordP, coordA)) ## Construct network content test.net &lt;- bip_init_network(mymat, mode1 = &#39;HumanGenes&#39;,mode2 = &#39;MicrobialGenus&#39;) # Define groups of network nodes test.net %v% &quot;Group&quot; = get.vertex.attribute(test.net, attrname=&quot;mode&quot;) # Draw network p &lt;- GGally::ggnet2(test.net, mode = mylayout, label = T, size = &quot;degree&quot;, color = &#39;Group&#39;, shape = &#39;Group&#39;, label.size = 5, layout.exp = 1.5, alpha = 0.75) + scale_colour_manual(values = wes_palette(&quot;FantasticFox1&quot;)) + guides(color=guide_legend(&quot;Group&quot;)) p 5.6 Run enrichR analysis After acquiring genus-associated human genes, you can run enrich your genes on different databases by enrichR. The next chunk shows you how to run enrichR on R studio, you can either run enrichR on their interactive website. library(enrichR) ## List available types of databases listEnrichrSites() ## Choose database of Human genes setEnrichrSite(&quot;Enrichr&quot;) ## List available database websiteLive &lt;- TRUE dbs &lt;- listEnrichrDbs() if (is.null(dbs)) websiteLive &lt;- FALSE if (websiteLive) head(dbs) ## geneCoverage genesPerTerm libraryName link numTerms appyter ## 1 13362 275 Genome_Browser_PWMs http://hgdownload.cse.ucsc.edu/goldenPath/hg18/database/ 615 ea115789fcbf12797fd692cec6df0ab4dbc79c6a ## 2 27884 1284 TRANSFAC_and_JASPAR_PWMs http://jaspar.genereg.net/html/DOWNLOAD/ 326 7d42eb43a64a4e3b20d721fc7148f685b53b6b30 ## 3 6002 77 Transcription_Factor_PPIs 290 849f222220618e2599d925b6b51868cf1dab3763 ## 4 47172 1370 ChEA_2013 http://amp.pharm.mssm.edu/lib/cheadownload.jsp 353 7ebe772afb55b63b41b79dd8d06ea0fdd9fa2630 ## 5 47107 509 Drug_Perturbations_from_GEO_2014 http://www.ncbi.nlm.nih.gov/geo/ 701 ad270a6876534b7cb063e004289dcd4d3164f342 ## 6 21493 3713 ENCODE_TF_ChIP-seq_2014 http://genome.ucsc.edu/ENCODE/downloads.html 498 497787ebc418d308045efb63b8586f10c526af51 ## categoryId ## 1 1 ## 2 1 ## 3 1 ## 4 7 ## 5 7 ## 6 7 ## Choose the databases you want to enrich your genes with and Run enrichR of genus-associated human genes on chosen databases dbs &lt;- c(&quot;GO_Molecular_Function_2021&quot;,&quot;KEGG_2019_Human&quot;) if (websiteLive) { enriched &lt;- enrichr(MSEA_res$term %&gt;% as.vector(), dbs) } ## Uploading data to Enrichr... Done. ## Querying GO_Molecular_Function_2021... Done. ## Querying KEGG_2019_Human... Done. ## Parsing results... Done. ## Show first few rows of enrichment result Kegg_res &lt;- enriched[[&#39;KEGG_2019_Human&#39;]] head(Kegg_res) ## Term Overlap P.value Adjusted.P.value Old.P.value Old.Adjusted.P.value Odds.Ratio Combined.Score ## 1 Pathways in cancer 118/530 3.368482e-53 6.029198e-51 0 0 7.523619 909.0228 ## 2 Cytokine-cytokine receptor interaction 90/294 4.368984e-53 6.029198e-51 0 0 11.275567 1359.4103 ## 3 IL-17 signaling pathway 52/93 2.802254e-47 2.578073e-45 0 0 31.100813 3333.7296 ## 4 Hepatitis B 63/163 2.226240e-44 1.536105e-42 0 0 15.621378 1570.1583 ## 5 Kaposi sarcoma-associated herpesvirus infection 66/186 1.153286e-43 6.366139e-42 0 0 13.676762 1352.2016 ## 6 Hepatitis C 61/155 1.497013e-43 6.886260e-42 0 0 16.054226 1583.0701 ## Genes ## 1 SPI1;EPO;ARAF;KEAP1;FGF2;CRKL;FGF7;CCND1;CDH1;MYC;AKT2;AKT1;SKP1;MAP2K1;HGF;WNT5A;MITF;PGF;RUNX1;TP53;IFNAR1;NOTCH1;PDGFB;HIF1A;BCL2L11;TERT;ABL1;HMOX1;PMAIP1;FADD;SMAD2;TGFB2;SMAD4;GSTM1;TGFB1;SMAD3;TGFB3;WNT3A;NFKB1;PTK2;IL2;IL4;NFKBIA;BMP4;BMP2;IL6;CXCL12;CDK6;CDK4;CDK2;GNAS;GRB2;FGFR2;BCL2L1;NFE2L2;FGFR1;RET;ALK;CDKN1A;CXCL8;FLT3;PTEN;SLC2A1;FASLG;BRCA2;IKBKB;CASP9;CASP7;CASP8;CASP3;RAC2;JAK2;HRAS;APAF1;CHUK;IFNGR1;IL15;MMP1;MMP2;IL13;FOS;TRAF1;MMP9;RHOA;IFNG;TRAF6;KIT;CRK;CEBPA;RALA;HDAC1;GSTP1;XIAP;CXCR4;PTGS2;CBL;DLL1;EGFR;RELA;CDC42;MAPK8;ERBB2;STAT4;STAT6;BAK1;IL12RB1;NQO1;NOS2;STAT1;EGF;STAT2;STAT3;MTOR;RAD51;CTNNB1;FAS;BAX;KRAS ## 2 IL21;CXCL6;IL1RN;CD40;CSF3;CXCL9;CSF2;EDA;CXCL8;EPO;FASLG;CXCL1;PRL;CXCL13;CXCL3;TNF;CXCL2;CX3CL1;CXCL5;TNFSF13B;CCR9;TNFSF11;CCR7;CCR5;AMH;CCR3;CCR2;IL10;IL11;IL15;IFNGR1;IL13;IL18;NGF;IL17RA;TNFRSF1A;IL1A;IFNG;IL1B;LTB;IFNAR1;CX3CR1;CCL13;CCL11;CXCR4;TNFRSF11B;CXCR6;CXCR1;CCL7;CXCR3;CXCR2;CCL2;CCL1;CCL19;IL12RB1;CCL17;CCR1;CCL25;IL33;TGFB2;CCL22;TGFB1;TSLP;CCL21;TNFSF15;CCL20;TGFB3;LIF;PPBP;BMP7;IL2;IL4;BMP4;GH2;CXCL10;CXCL11;BMP2;IL6;CD4;CXCL12;LEP;CD27;FAS;IL17F;LTBR;INHA;IL17C;CCL27;IL17A;PF4 ## 3 CXCL6;CSF3;CXCL8;CSF2;TRADD;TNFAIP3;CXCL1;CXCL3;CXCL2;TNF;CXCL5;IKBKB;CASP8;TBK1;CASP3;CHUK;MMP1;MMP3;IL13;FOS;MMP9;IL17RA;MMP13;IFNG;IL1B;TRAF6;DEFB4A;S100A9;S100A7;CEBPB;CCL11;PTGS2;RELA;MAPK8;CCL7;CCL2;FADD;CCL17;JUND;CCL20;MAPK14;MUC5B;NFKB1;IL4;NFKBIA;CXCL10;IL6;LCN2;FOSB;IL17F;IL17C;IL17A ## 4 CDKN1A;CXCL8;ARAF;FASLG;TNF;CASP9;IKBKB;TBK1;CASP8;MYC;AKT2;CASP3;AKT1;JAK2;HRAS;MAP2K1;APAF1;CHUK;DDX58;IRAK4;TYK2;FOS;MMP9;TIRAP;CCNA2;CREB1;IRF3;TRAF6;IRF7;TP53;TLR4;TLR3;IFNAR1;ATF4;TLR2;SRC;RELA;MAPK8;IRAK1;STAT4;STAT6;FADD;SMAD2;TGFB2;SMAD4;TGFB1;SMAD3;TGFB3;STAT1;STAT2;STAT3;NFATC1;MAPK14;NFKB1;NFKBIA;MAVS;IL6;CDK2;FAS;BAX;GRB2;KRAS;MYD88 ## 5 CD86;CDKN1A;CSF2;CXCL8;TRADD;CXCL1;CXCL3;FGF2;CXCL2;ICAM1;CASP9;IKBKB;TBK1;CASP8;CCND1;MYC;AKT2;CASP3;AKT1;CCR5;JAK2;HRAS;CCR3;MAP2K1;SYK;CHUK;IFNGR1;TYK2;FOS;HLA-G;TNFRSF1A;HCK;CREB1;IRF3;IRF7;TP53;TLR3;IFNAR1;BECN1;SRC;PDGFB;PTGS2;HIF1A;RELA;C3;MAPK8;FADD;BAK1;LYN;CCR1;STAT1;STAT2;STAT3;NFATC1;MAPK14;NFKB1;MTOR;NFKBIA;RCAN1;IL6;CDK6;CDK4;FAS;BAX;CTNNB1;KRAS ## 6 SCARB1;CDKN1A;CD81;TRADD;ARAF;FASLG;IFIT1;TNF;CASP9;IKBKB;TBK1;CASP8;CCND1;MYC;AKT2;CASP3;AKT1;HRAS;MAP2K1;RSAD2;APAF1;CHUK;DDX58;TYK2;PIAS1;TNFRSF1A;CLDN4;CLDN3;OAS1;IRF3;IFNG;TRAF6;IRF7;TP53;TLR3;IFNAR1;RELA;EGFR;SOCS3;RIPK1;FADD;BAK1;LDLR;EGF;STAT1;STAT2;MX1;STAT3;NFKB1;NFKBIA;CXCL10;OCLN;MAVS;CDK6;CDK4;CDK2;FAS;BAX;CTNNB1;GRB2;KRAS GO_res &lt;- enriched[[&#39;GO_Molecular_Function_2021&#39;]] head(GO_res) ## Term Overlap P.value Adjusted.P.value Old.P.value Old.Adjusted.P.value Odds.Ratio Combined.Score ## 1 cytokine activity (GO:0005125) 61/173 3.155810e-40 2.098614e-37 0 0 13.461367 1224.3673 ## 2 receptor ligand activity (GO:0048018) 69/307 1.967964e-31 6.543481e-29 0 0 7.192804 508.5538 ## 3 chemokine receptor binding (GO:0042379) 27/50 1.496174e-24 3.316519e-22 0 0 27.918715 1531.5964 ## 4 chemokine activity (GO:0008009) 26/46 2.168043e-24 3.604371e-22 0 0 30.883871 1682.8071 ## 5 cytokine receptor binding (GO:0005126) 34/105 1.501517e-21 1.997018e-19 0 0 11.459953 549.4796 ## 6 kinase binding (GO:0019900) 70/461 3.129734e-21 3.468788e-19 0 0 4.411563 208.2846 ## Genes ## 1 CXCL6;CSF3;CXCL9;CSF2;CXCL8;EPO;CXCL1;HMGB1;CXCL13;CXCL3;TNF;FGF2;CXCL2;CX3CL1;CXCL5;TNFSF11;TIMP1;IL10;IL11;IL15;WNT5A;ADIPOQ;IL18;NRG1;MIF;IL1A;IFNG;IL1B;CCL13;CCL11;TNFRSF11B;CCL7;CCL2;CCL1;CCL19;CCL17;CCL25;IL33;TGFB2;TGFB1;CCL22;TSLP;CCL21;TGFB3;WNT3A;CCL20;LIF;PPBP;BMP7;IL2;IL4;BMP4;CXCL10;CXCL11;BMP2;IL6;CXCL12;IL17F;INHA;CCL27;PF4 ## 2 CSF3;CXCL9;CSF2;EDA;EPO;CXCL1;PRL;HMGB1;CXCL13;TNF;FGF2;CX3CL1;TNFSF13B;LGALS3;FGF7;TNFSF11;TIMP1;AMH;IL10;IL11;IL15;HGF;ADIPOQ;WNT5A;IL18;APOA1;NRG1;MIF;NGF;PGF;BTC;IL1A;IFNG;IL1B;DEFB4A;HBEGF;CCL11;PTH;PDGFB;TNFRSF11B;PTN;NTS;INS;NPY;PPY;CCL25;IL33;TGFB2;TGFB1;TSLP;TGFB3;WNT3A;BDNF;EGF;LIF;CCK;BMP7;IL2;IL4;BMP4;GH2;POMC;CXCL10;BMP2;IL6;LEP;IL17F;INHA;VIP ## 3 CX3CR1;CXCL6;CCL13;CXCL9;CXCL8;CCL11;CXCL1;CXCL13;CXCL3;CXCL2;CX3CL1;CXCL5;CCL7;CCL2;CCL1;CCL19;CCL17;CCL25;CCL22;CCL21;CCL20;PPBP;CXCL10;CXCL11;CXCL12;CCL27;PF4 ## 4 CCL13;CXCL6;CXCL9;CXCL8;CCL11;CXCL1;CXCL13;CXCL3;CXCL2;CX3CL1;CXCL5;CCL7;CCL2;CCL1;CCL19;CCL17;CCL25;CCL22;CCL21;CCL20;PPBP;CXCL10;CXCL11;CXCL12;CCL27;PF4 ## 5 IL21;CSF3;IL1RN;EPO;PRL;PYCARD;TNFSF11;FADD;CCL19;JAK2;IL12RB1;SMAD2;IL10;CCL25;IL11;TGFB2;SMAD3;TSLP;SYK;CCL21;LIF;IL18;MIF;TYK2;PGF;IL2;IL4;GH2;ADAM17;IL6;CXCL12;TRAF6;IL1B;TLR9 ## 6 CDKN1A;TFRC;TRADD;ILK;HSPB1;PARK7;FOXM1;IKBKB;CASP9;CCND1;RAC2;CASP1;JAK2;CHIA;PARP1;RPS6;RHOG;ADAM10;IRAK3;IRAK4;RHOC;CDC25A;RHOA;RHOB;CCNA2;FGR;CEACAM1;TRAF6;VDAC1;MAPT;SQSTM1;CRK;TP53;ATF4;CEBPA;BECN1;SRC;MVP;PLG;IQGAP1;NOD2;PTN;FOXO3;HIF1A;EGFR;RELA;TTN;RELB;CDC42;CCNB1;SOCS1;IRAK1;RPS3;PTPN1;SMAD3;CAV1;PLK1;STAT3;CDC6;EEF2;IRGM;PTK2;CYLD;MAVS;CD4;TOLLIP;CTNNB1;FAS;GRB2;BCL2L1 ## Plot Enrichment result p &lt;- plotEnrich(enriched[[&#39;KEGG_2019_Human&#39;]] %&gt;% filter(Adjusted.P.value &lt; 0.05), showTerms = 20, numChar = 40, y = &quot;Count&quot;, orderBy = &quot;P.value&quot;) + scale_fill_gradientn(colours = rev(wes_palette(&quot;Zissou1&quot;, 10, type = &quot;continuous&quot;))) p As shown above, Y axis shows the enriched terms of your input genes. X axis shows the number of input genes in the enriched terms. 5.7 Session info devtools::session_info() ## ─ Session info ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 3.6.3 (2020-02-29) ## os Ubuntu 16.04.7 LTS ## system x86_64, linux-gnu ## ui RStudio ## language (EN) ## collate en_IN.UTF-8 ## ctype en_IN.UTF-8 ## tz Asia/Hong_Kong ## date 2022-09-13 ## rstudio 1.1.419 (server) ## pandoc 2.7.3 @ /usr/bin/ (via rmarkdown) ## ## ─ Packages ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## ! package * version date (UTC) lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 3.6.3) ## ade4 1.7-17 2021-06-17 [1] CRAN (R 3.6.3) ## ALDEx2 * 1.18.0 2019-10-29 [1] Bioconductor ## annotate 1.64.0 2019-10-29 [1] Bioconductor ## AnnotationDbi * 1.48.0 2019-10-29 [1] Bioconductor ## ape 5.5 2021-04-25 [1] CRAN (R 3.6.3) ## assertthat 0.2.1 2019-03-21 [2] CRAN (R 3.6.3) ## backports 1.4.1 2021-12-13 [1] CRAN (R 3.6.3) ## base64enc 0.1-3 2015-07-28 [2] CRAN (R 3.6.3) ## bayesm 3.1-4 2019-10-15 [1] CRAN (R 3.6.3) ## biglm 0.9-2.1 2020-11-27 [1] CRAN (R 3.6.3) ## Biobase * 2.46.0 2019-10-29 [2] Bioconductor ## BiocGenerics * 0.32.0 2019-10-29 [2] Bioconductor ## BiocParallel * 1.20.1 2019-12-21 [2] Bioconductor ## biomformat 1.14.0 2019-10-29 [1] Bioconductor ## Biostrings 2.54.0 2019-10-29 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] CRAN (R 3.6.3) ## bit64 4.0.5 2020-08-30 [1] CRAN (R 3.6.3) ## bitops 1.0-7 2021-04-24 [1] CRAN (R 3.6.3) ## blob 1.2.2 2021-07-23 [1] CRAN (R 3.6.3) ## bookdown 0.24 2021-09-02 [1] CRAN (R 3.6.3) ## brio 1.1.3 2021-11-30 [2] CRAN (R 3.6.3) ## broom 0.7.12 2022-01-28 [1] CRAN (R 3.6.3) ## bslib 0.3.1 2021-10-06 [1] CRAN (R 3.6.3) ## cachem 1.0.5 2021-05-15 [1] CRAN (R 3.6.3) ## callr 3.7.0 2021-04-20 [2] CRAN (R 3.6.3) ## car 3.0-12 2021-11-06 [1] CRAN (R 3.6.3) ## carData 3.0-4 2020-05-22 [1] CRAN (R 3.6.3) ## caTools 1.18.2 2021-03-28 [1] CRAN (R 3.6.3) ## cellranger 1.1.0 2016-07-27 [1] CRAN (R 3.6.3) ## checkmate 2.0.0 2020-02-06 [1] CRAN (R 3.6.3) ## circlize * 0.4.13 2021-06-09 [1] CRAN (R 3.6.3) ## cli 3.1.0 2021-10-27 [1] CRAN (R 3.6.3) ## clue 0.3-59 2021-04-16 [1] CRAN (R 3.6.3) ## cluster 2.1.0 2019-06-19 [2] CRAN (R 3.6.3) ## coda 0.19-4 2020-09-30 [1] CRAN (R 3.6.3) ## codetools 0.2-16 2018-12-24 [2] CRAN (R 3.6.3) ## coin 1.4-2 2021-10-08 [1] CRAN (R 3.6.3) ## colorspace 2.0-2 2021-06-24 [1] CRAN (R 3.6.3) ## ComplexHeatmap * 2.2.0 2019-10-29 [1] Bioconductor ## compositions 2.0-2 2021-07-14 [1] CRAN (R 3.6.3) ## cowplot * 1.1.1 2020-12-30 [1] CRAN (R 3.6.3) ## crayon 1.5.0 2022-02-14 [1] CRAN (R 3.6.3) ## curl 4.3.2 2021-06-23 [2] CRAN (R 3.6.3) ## dada2 * 1.14.1 2020-02-22 [1] Bioconductor ## data.table * 1.14.0 2021-02-21 [1] CRAN (R 3.6.3) ## DBI 1.1.1 2021-01-15 [1] CRAN (R 3.6.3) ## dbplyr 2.1.1 2021-04-06 [1] CRAN (R 3.6.3) ## DelayedArray * 0.12.3 2020-04-09 [2] Bioconductor ## DelayedMatrixStats 1.8.0 2019-10-29 [1] Bioconductor ## DEoptimR 1.0-9 2021-05-24 [1] CRAN (R 3.6.3) ## desc 1.4.1 2022-03-06 [2] CRAN (R 3.6.3) ## DESeq2 * 1.26.0 2019-10-29 [1] Bioconductor ## devtools 2.4.3 2021-11-30 [1] CRAN (R 3.6.3) ## digest 0.6.29 2021-12-01 [1] CRAN (R 3.6.3) ## dplyr * 1.0.6 2021-05-05 [1] CRAN (R 3.6.3) ## edgeR 3.28.1 2020-02-26 [1] Bioconductor ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 3.6.3) ## EnhancedVolcano * 1.4.0 2019-10-29 [1] Bioconductor ## enrichR * 3.0 2021-02-02 [1] CRAN (R 3.6.3) ## evaluate 0.15 2022-02-18 [2] CRAN (R 3.6.3) ## fansi 1.0.2 2022-01-14 [1] CRAN (R 3.6.3) ## farver 2.1.0 2021-02-28 [2] CRAN (R 3.6.3) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 3.6.3) ## fdrtool 1.2.17 2021-11-13 [1] CRAN (R 3.6.3) ## forcats * 0.5.1 2021-01-27 [1] CRAN (R 3.6.3) ## foreach 1.5.2 2022-02-02 [2] CRAN (R 3.6.3) ## foreign 0.8-75 2020-01-20 [2] CRAN (R 3.6.3) ## formatR 1.12 2022-03-31 [2] CRAN (R 3.6.3) ## Formula 1.2-4 2020-10-16 [1] CRAN (R 3.6.3) ## fs 1.5.2 2021-12-08 [1] CRAN (R 3.6.3) ## futile.logger 1.4.3 2016-07-10 [2] CRAN (R 3.6.3) ## futile.options 1.0.1 2018-04-20 [2] CRAN (R 3.6.3) ## genefilter 1.68.0 2019-10-29 [1] Bioconductor ## geneplotter 1.64.0 2019-10-29 [1] Bioconductor ## generics 0.1.2 2022-01-31 [1] CRAN (R 3.6.3) ## GenomeInfoDb * 1.22.1 2020-03-27 [2] Bioconductor ## GenomeInfoDbData 1.2.2 2020-08-24 [2] Bioconductor ## GenomicAlignments 1.22.1 2019-11-12 [1] Bioconductor ## GenomicRanges * 1.38.0 2019-10-29 [2] Bioconductor ## getopt 1.20.3 2019-03-22 [1] CRAN (R 3.6.3) ## GetoptLong 1.0.5 2020-12-15 [1] CRAN (R 3.6.3) ## GGally * 2.1.2 2021-06-21 [1] CRAN (R 3.6.3) ## ggbipart * 0.1.2 2022-07-20 [1] Github (pedroj/bipartite_plots@162f577) ## ggExtra * 0.9 2019-08-27 [1] CRAN (R 3.6.3) ## ggplot2 * 3.3.5 2021-06-25 [1] CRAN (R 3.6.3) ## ggpubr * 0.4.0 2020-06-27 [1] CRAN (R 3.6.3) ## ggrepel * 0.9.1 2021-01-15 [2] CRAN (R 3.6.3) ## ggsci * 2.9 2018-05-14 [1] CRAN (R 3.6.3) ## ggsignif 0.6.3 2021-09-09 [1] CRAN (R 3.6.3) ## glmnet 4.1-2 2021-06-24 [1] CRAN (R 3.6.3) ## GlobalOptions 0.1.2 2020-06-10 [1] CRAN (R 3.6.3) ## glue 1.6.1 2022-01-22 [1] CRAN (R 3.6.3) ## GMPR 0.1.3 2021-05-17 [1] local ## gplots 3.1.1 2020-11-28 [1] CRAN (R 3.6.3) ## graph 1.64.0 2019-10-29 [1] Bioconductor ## gridExtra 2.3 2017-09-09 [2] CRAN (R 3.6.3) ## gtable 0.3.0 2019-03-25 [2] CRAN (R 3.6.3) ## gtools 3.9.2 2021-06-06 [1] CRAN (R 3.6.3) ## haven 2.4.1 2021-04-23 [1] CRAN (R 3.6.3) ## highr 0.9 2021-04-16 [1] CRAN (R 3.6.3) ## Hmisc 4.5-0 2021-02-28 [1] CRAN (R 3.6.3) ## hms 1.1.1 2021-09-26 [1] CRAN (R 3.6.3) ## htmlTable 2.3.0 2021-10-12 [1] CRAN (R 3.6.3) ## htmltools 0.5.2 2021-08-25 [1] CRAN (R 3.6.3) ## htmlwidgets 1.5.4 2021-09-08 [2] CRAN (R 3.6.3) ## httpuv 1.6.1 2021-05-07 [1] CRAN (R 3.6.3) ## httr 1.4.3 2022-05-04 [2] CRAN (R 3.6.3) ## hwriter 1.3.2 2014-09-10 [1] CRAN (R 3.6.3) ## igraph 1.3.1 2022-04-20 [2] CRAN (R 3.6.3) ## IHW 1.14.0 2019-10-29 [1] Bioconductor ## IRanges * 2.20.2 2020-01-13 [2] Bioconductor ## iterators 1.0.14 2022-02-05 [2] CRAN (R 3.6.3) ## jpeg 0.1-9 2021-07-24 [1] CRAN (R 3.6.3) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 3.6.3) ## jsonlite 1.8.0 2022-02-22 [2] CRAN (R 3.6.3) ## KEGGgraph 1.46.0 2019-10-29 [1] Bioconductor ## KEGGREST 1.26.1 2019-11-06 [1] Bioconductor ## KernSmooth 2.23-16 2019-10-15 [2] CRAN (R 3.6.3) ## knitr 1.36 2021-09-29 [1] CRAN (R 3.6.3) ## labeling 0.4.2 2020-10-20 [2] CRAN (R 3.6.3) ## lambda.r 1.2.4 2019-09-18 [2] CRAN (R 3.6.3) ## later 1.3.0 2021-08-18 [2] CRAN (R 3.6.3) ## lattice * 0.20-38 2018-11-04 [2] CRAN (R 3.6.3) ## latticeExtra 0.6-29 2019-12-19 [1] CRAN (R 3.6.3) ## lazyeval 0.2.2 2019-03-15 [2] CRAN (R 3.6.3) ## libcoin 1.0-9 2021-09-27 [1] CRAN (R 3.6.3) ## lifecycle 1.0.1 2021-09-24 [1] CRAN (R 3.6.3) ## limma 3.42.2 2020-02-03 [2] Bioconductor ## locfit 1.5-9.4 2020-03-25 [1] CRAN (R 3.6.3) ## lpsymphony 1.14.0 2019-10-29 [1] Bioconductor (R 3.6.3) ## lubridate 1.7.10 2021-02-26 [1] CRAN (R 3.6.3) ## Maaslin2 1.7.3 2022-03-23 [1] Github (biobakery/maaslin2@8d090e4) ## magrittr * 2.0.2 2022-01-26 [1] CRAN (R 3.6.3) ## MASS 7.3-54 2021-05-03 [1] CRAN (R 3.6.3) ## Matrix 1.3-4 2021-06-01 [1] CRAN (R 3.6.3) ## matrixStats * 0.60.0 2021-07-26 [1] CRAN (R 3.6.3) ## mbzinb 0.2 2021-06-23 [1] local ## memoise 2.0.1 2021-11-26 [2] CRAN (R 3.6.3) ## metagenomeSeq 1.28.2 2020-02-03 [1] Bioconductor ## metamicrobiomeR 1.1 2021-02-03 [1] local ## mgcv 1.8-31 2019-11-09 [2] CRAN (R 3.6.3) ## microbiome 1.8.0 2019-10-29 [1] Bioconductor ## mime 0.12 2021-09-28 [2] CRAN (R 3.6.3) ## miniUI 0.1.1.1 2018-05-18 [1] CRAN (R 3.6.3) ## modelr 0.1.8 2020-05-19 [1] CRAN (R 3.6.3) ## modeltools 0.2-23 2020-03-05 [1] CRAN (R 3.6.3) ## multcomp 1.4-17 2021-04-29 [1] CRAN (R 3.6.3) ## multtest 2.42.0 2019-10-29 [2] Bioconductor ## munsell 0.5.0 2018-06-12 [2] CRAN (R 3.6.3) ## mvtnorm 1.1-3 2021-10-08 [1] CRAN (R 3.6.3) ## network * 1.17.1 2021-06-14 [1] CRAN (R 3.6.3) ## nlme 3.1-144 2020-02-06 [2] CRAN (R 3.6.3) ## nnet 7.3-12 2016-02-02 [2] CRAN (R 3.6.3) ## optparse 1.7.1 2021-10-08 [1] CRAN (R 3.6.3) ## org.Hs.eg.db * 3.10.0 2021-12-08 [1] Bioconductor ## pathview * 1.26.0 2019-10-29 [1] Bioconductor ## pcaPP 1.9-74 2021-04-23 [1] CRAN (R 3.6.3) ## permute * 0.9-5 2019-03-12 [1] CRAN (R 3.6.3) ## phyloseq * 1.30.0 2019-10-29 [1] Bioconductor ## pillar 1.7.0 2022-02-01 [1] CRAN (R 3.6.3) ## pkgbuild 1.3.1 2021-12-20 [2] CRAN (R 3.6.3) ## pkgconfig 2.0.3 2019-09-22 [2] CRAN (R 3.6.3) ## pkgload 1.2.4 2021-11-30 [2] CRAN (R 3.6.3) ## plotly * 4.10.0 2021-10-09 [1] CRAN (R 3.6.3) ## plyr 1.8.7 2022-03-24 [2] CRAN (R 3.6.3) ## png 0.1-7 2013-12-03 [1] CRAN (R 3.6.3) ## prettyunits 1.1.1 2020-01-24 [2] CRAN (R 3.6.3) ## processx 3.5.3 2022-03-25 [2] CRAN (R 3.6.3) ## promises 1.2.0.1 2021-02-11 [2] CRAN (R 3.6.3) ## protoclust 1.6.3 2019-01-31 [1] CRAN (R 3.6.3) ## ps 1.7.0 2022-04-23 [2] CRAN (R 3.6.3) ## pscl 1.5.5 2020-03-07 [1] CRAN (R 3.6.3) ## purrr * 0.3.4 2020-04-17 [2] CRAN (R 3.6.3) ## qvalue 2.18.0 2019-10-29 [1] Bioconductor ## R6 2.5.1 2021-08-19 [1] CRAN (R 3.6.3) ## RAIDA 1.0 2021-06-23 [1] local ## ranacapa 0.1.0 2021-06-18 [1] Github (gauravsk/ranacapa@58c0cab) ## RColorBrewer * 1.1-3 2022-04-03 [2] CRAN (R 3.6.3) ## Rcpp * 1.0.7 2021-07-07 [1] CRAN (R 3.6.3) ## RcppParallel 5.1.4 2021-05-04 [1] CRAN (R 3.6.3) ## RCurl 1.98-1.6 2022-02-08 [2] CRAN (R 3.6.3) ## readr * 2.0.0 2021-07-20 [1] CRAN (R 3.6.3) ## readxl * 1.3.1 2019-03-13 [1] CRAN (R 3.6.3) ## remotes 2.4.2 2021-11-30 [1] CRAN (R 3.6.3) ## reprex 2.0.1 2021-08-05 [1] CRAN (R 3.6.3) ## reshape 0.8.9 2022-04-12 [1] CRAN (R 3.6.3) ## reshape2 * 1.4.4 2020-04-09 [2] CRAN (R 3.6.3) ## Rgraphviz 2.30.0 2019-10-29 [1] Bioconductor ## rhdf5 2.30.1 2019-11-26 [1] Bioconductor ## Rhdf5lib 1.8.0 2019-10-29 [1] Bioconductor ## rJava 1.0-5 2021-09-24 [1] CRAN (R 3.6.3) ## rjson 0.2.20 2018-06-08 [1] CRAN (R 3.6.3) ## R rlang 1.0.2 &lt;NA&gt; [2] &lt;NA&gt; ## rmarkdown 2.11 2021-09-14 [1] CRAN (R 3.6.3) ## robustbase 0.93-9 2021-09-27 [1] CRAN (R 3.6.3) ## rpart 4.1-15 2019-04-12 [2] CRAN (R 3.6.3) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 3.6.3) ## Rsamtools 2.2.3 2020-02-23 [1] Bioconductor ## rsconnect 0.8.25 2021-11-19 [1] CRAN (R 3.6.3) ## RSQLite 2.2.7 2021-04-22 [1] CRAN (R 3.6.3) ## rstatix 0.7.0 2021-02-13 [1] CRAN (R 3.6.3) ## rstudioapi 0.13 2020-11-12 [2] CRAN (R 3.6.3) ## Rtsne 0.15 2018-11-10 [1] CRAN (R 3.6.3) ## rvest 1.0.2 2021-10-16 [1] CRAN (R 3.6.3) ## S4Vectors * 0.24.4 2020-04-09 [2] Bioconductor ## sandwich 3.0-1 2021-05-18 [1] CRAN (R 3.6.3) ## sass 0.4.0 2021-05-12 [1] CRAN (R 3.6.3) ## scales 1.2.0 2022-04-13 [2] CRAN (R 3.6.3) ## seqinr * 4.2-8 2021-06-09 [1] CRAN (R 3.6.3) ## sessioninfo 1.2.2 2021-12-06 [2] CRAN (R 3.6.3) ## shape 1.4.6 2021-05-19 [1] CRAN (R 3.6.3) ## shiny 1.7.1 2021-10-02 [1] CRAN (R 3.6.3) ## ShortRead 1.44.3 2020-02-03 [1] Bioconductor ## slam 0.1-49 2021-11-17 [1] CRAN (R 3.6.3) ## sna 2.6 2020-10-06 [1] CRAN (R 3.6.3) ## statnet.common 4.5.0 2021-06-05 [1] CRAN (R 3.6.3) ## stringi 1.7.4 2021-08-25 [1] CRAN (R 3.6.3) ## stringr * 1.4.0 2019-02-10 [2] CRAN (R 3.6.3) ## SummarizedExperiment * 1.16.1 2019-12-19 [2] Bioconductor ## survival 3.1-8 2019-12-03 [2] CRAN (R 3.6.3) ## tensorA 0.36.2 2020-11-19 [1] CRAN (R 3.6.3) ## testthat 3.1.4 2022-04-26 [2] CRAN (R 3.6.3) ## textshape 1.7.3 2021-05-28 [1] CRAN (R 3.6.3) ## TH.data 1.1-0 2021-09-27 [1] CRAN (R 3.6.3) ## tibble * 3.1.6 2021-11-07 [1] CRAN (R 3.6.3) ## tidyr * 1.2.0 2022-02-01 [1] CRAN (R 3.6.3) ## tidyselect 1.1.1 2021-04-30 [1] CRAN (R 3.6.3) ## tidyverse * 1.3.1 2021-04-15 [1] CRAN (R 3.6.3) ## tzdb 0.2.0 2021-10-27 [1] CRAN (R 3.6.3) ## UpSetR 1.4.0 2019-05-22 [1] CRAN (R 3.6.3) ## usethis 2.1.6 2022-05-25 [2] CRAN (R 3.6.3) ## utf8 1.2.2 2021-07-24 [1] CRAN (R 3.6.3) ## vctrs 0.3.8 2021-04-29 [1] CRAN (R 3.6.3) ## vegan * 2.5-7 2020-11-28 [1] CRAN (R 3.6.3) ## VennDiagram 1.7.1 2021-12-02 [1] CRAN (R 3.6.3) ## viridisLite 0.4.0 2021-04-13 [2] CRAN (R 3.6.3) ## vroom 1.5.7 2021-11-30 [1] CRAN (R 3.6.3) ## wesanderson * 0.3.6.9000 2021-07-21 [1] Github (karthik/wesanderson@651c944) ## withr 2.4.3 2021-11-30 [1] CRAN (R 3.6.3) ## Wrench 1.4.0 2019-10-29 [1] Bioconductor ## xfun 0.23 2021-05-15 [1] CRAN (R 3.6.3) ## xlsx * 0.6.5 2020-11-10 [1] CRAN (R 3.6.3) ## xlsxjars 0.6.1 2014-08-22 [1] CRAN (R 3.6.3) ## XMAS * 0.0.0.9000 2022-03-23 [1] local ## XMAS2 2.1.7.9 2022-09-09 [2] local ## XML 3.99-0.3 2020-01-20 [1] CRAN (R 3.6.3) ## xml2 1.3.3 2021-11-30 [2] CRAN (R 3.6.3) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 3.6.3) ## XVector 0.26.0 2019-10-29 [2] Bioconductor ## xviz * 1.1.0 2021-01-14 [1] local ## yaml 2.2.2 2022-01-25 [1] CRAN (R 3.6.3) ## zlibbioc 1.32.0 2019-10-29 [2] Bioconductor ## zoo 1.8-9 2021-03-09 [1] CRAN (R 3.6.3) ## ## [1] /share/home/tongbangzhuo/R/x86_64-pc-linux-gnu-library/3.6 ## [2] /opt/R-3.6.3/lib/R/library ## ## R ── Package was removed from disk. ## ## ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── "],["picrust2.html", "Chapter 6 PICRUSt2 6.1 Environment Setup 6.2 Run PICRUSt2 6.3 Use DA to interpret result table from PICRUSt2 6.4 Session info", " Chapter 6 PICRUSt2 This demo would guide you how to implement funciton analysis on 16S data FlowChart_PICRUSt2} PICRUSt2 algorithm The Picture below shows the algorithm of PICRUSt2. Please find details on https://github.com/picrust/picrust2/wiki. (a) The PICRUSt2 method consists of phylogenetic placement, hidden-state-prediction and sample-wise gene and pathway abundance tabulation. ASV sequences and abundances are taken as input, and gene family and pathway abundances are output. All necessary reference tree and trait databases for the default workflow are included in the PICRUSt2 implementation. 6.1 Environment Setup Pull docker image of picrust2(authored by zhangzhikuan@xbiome.com) from server. You can skip this step if you have pulled docker image of picrust2 on your server already. docker pull harbor.xbiome.com/xbiome/environments/picrust2:v2.4.1-03d011a 6.2 Run PICRUSt2 Check the required parameters of picrust2 docker image. docker run -i --rm -u $(id -u):$(id -g) -v /home/tongbangzhuo/tongbangzhuo_Xbiome1/Project/PICRUSt2/:/in harbor.xbiome.com/xbiome/environments/picrust2:v2.4.1-03d011a bash -c &quot;python picrust2_main.py --help&quot; ## usage: picrust2_main.py [-h] -i INPUTDIR -o OUTPUTDIR [-b REFDB] [-r RESOURCE] ## -p PARAM ## ## optional arguments: ## -h, --help show this help message and exit ## -i INPUTDIR, --inputdir INPUTDIR ## input dir ## -o OUTPUTDIR, --outputdir OUTPUTDIR ## The dir that where the result output to ## -b REFDB, --refdb REFDB ## required database path if needed, for example: ## &quot;db_name:db_path&quot;, if there are more than 1 database, ## please join them by &quot;,&quot; ## -r RESOURCE, --resource RESOURCE ## The resources that the module need, ## &quot;cpu:2,mem:6,disk:6&quot; or &quot;cpu:2,mem:6&quot; or &quot;cpu:3&quot; ## -p PARAM, --param PARAM ## JSON format config file Three parameters are required: INPUTDIR, specify your dada2 output folder as the input of picrust2 docker image. OUTPUTDIR, specify the output dirctory. Don’t create the output folder your self, picrust2 docker image would take care of it. PARAM, config files of running picrust2 docker image. Usually use the default file in docker image: /opt/test/parameter_default.json The whole process might take hours to finish. Demo data (3970 ASVs cost approximately 1 hour) docker run -i --rm -u $(id -u):$(id -g) -v /home/tongbangzhuo/tongbangzhuo_Xbiome1/Project/PICRUSt2/:/in harbor.xbiome.com/xbiome/environments/picrust2:v2.4.1-03d011a bash -c &quot;python picrust2_main.py -i /in/Demodata/ -o /in/output/ -p /opt/test/parameter_default.json&quot; 6.3 Use DA to interpret result table from PICRUSt2 There are many possible ways to analyze the PICRUSt2 output. STAMP is one tool that can be used that requires no background in scripting languages. This tool is very useful for visualizing microbiome data, but note that there are better alternatives for conducting statistical tests with compositional data (such as the ALDEx2 R package). If you would like to try out STAMP for visualizing the PICRUSt2 output, see here. No matter what analysis approach you take, you should be aware that results based on differential abundance testing can vary substantially between shotgun metagenomics sequencing data and amplicon-based metagenome predictions based on the same samples. This is especially true for community-wide pathway predictions. Please check out this post and this response to a FAQ for more details. But here, we carry out DA on KO profile table predicted from PICRUSt2 as demo. 6.3.1 Read input In this chunk, we use TSS (Total sum scaling) to eliminate the influence of sequencing depth on samples. Read profile table from PICRUSt2 result ## Load aldex library(ALDEx2) library(tibble) library(magrittr) library(phyloseq) KO_profile &lt;- read.table(&#39;/share/projects/SOP/Functional_Analysis/Tongbangzhuo/Demodata/PICRUSt2/output/KO_metagenome_out/pred_metagenome_unstrat.tsv&#39;, sep = &#39;\\t&#39;, comment.char = &#39;&#39;, na.strings = &#39;&#39;, header = TRUE, check.names = FALSE) head(KO_profile) ## function 1-1 1-10 1-2 1-3 1-4 1-5 1-6 1-7 1-8 1-9 2-1_new 2-10 2-2 2-3 2-4 2-5 2-6 ## 1 K00001 1111.02 15361.65 13872.39 13718.14 13197.77 4978.74 8640.27 8610.96 13514.95 10794.91 24054.05 1577.49 2562.29 12037.83 21575.02 4129.33 537.12 ## 2 K00002 62.00 45.00 0.00 30.00 208.00 307.00 34.00 115.00 572.00 41.00 140.00 0.00 146.00 183.40 0.00 0.00 0.00 ## 3 K00003 2333.08 35353.06 17687.85 25700.77 21103.60 11221.88 30983.44 27016.03 8010.85 14502.45 40309.95 8444.30 13531.49 21307.22 24598.45 15593.47 11804.09 ## 4 K00004 1913.87 117.80 1304.60 3378.97 11791.20 11862.60 307.40 420.17 664.75 328.66 66993.10 13792.60 21589.49 2133.60 5628.47 10415.70 14730.80 ## 5 K00005 21600.27 48223.27 6437.13 5929.35 5347.54 3884.48 17472.11 20782.03 13209.86 7707.98 37765.21 433.10 1466.68 8481.97 9026.81 4212.19 4801.46 ## 6 K00007 10468.99 45.57 462.54 172.10 459.08 652.43 65.21 210.00 3495.53 155.72 18018.53 5.00 337.29 3010.23 47.38 45.93 2.71 ## 2-7 2-8 2-9 3-1 3-10 3-2 3-3 3-4_new 3-5 3-6_new 3-7 3-8_new 3-9_new 4-1 4-10 4-2 4-3 4-4 ## 1 3579.25 1879.32 6504.89 600.93 11001.92 594.74 2588.96 38966.52 3939.76 55757.66 4177.65 46536.71 52996.07 12799.43 15743.00 8006.54 17418.30 13203.65 ## 2 86.00 74.00 5.00 0.00 61.00 13.00 79.00 102.00 159.00 2191.00 844.00 1404.00 2802.00 0.00 1170.00 0.00 2354.00 410.00 ## 3 9616.33 11389.30 13398.25 11720.00 24071.84 11151.16 9787.05 44070.14 14095.11 63869.31 22690.82 33295.34 44499.99 6382.85 5207.10 16143.88 10088.60 4528.80 ## 4 11360.99 20338.00 15685.80 22329.80 780.60 14570.33 15106.40 18652.20 16127.80 4099.27 125.50 6176.00 3934.03 30.00 192.20 24.00 0.00 44.00 ## 5 2251.23 1018.49 1405.52 166.17 10586.31 3245.26 1172.18 11695.52 3886.85 47517.98 18250.52 29082.51 43558.97 5978.59 12638.42 6265.20 14223.27 12231.55 ## 6 200.14 174.86 4.15 0.00 208.64 14.26 170.43 572.72 305.85 11819.90 298.72 6875.43 9593.22 92.92 3784.21 70.99 3499.32 3828.33 ## 4-5 4-6 4-7 4-8 4-9 5-1 5-10 5-2 5-3 5-4 5-5 5-6 5-7 5-8 5-9_new 6-1 6-10 6-2 ## 1 15239.94 17004.02 14919.00 17362.83 18735.60 14412.40 11185.25 24000.96 18124.75 19642.75 15365.55 10873.53 11123.50 11579.00 49723.71 2032.02 490.23 1040.64 ## 2 1021.00 1428.00 1660.00 1877.00 2614.00 1561.00 0.00 4521.00 2087.00 2957.00 1816.00 153.00 0.00 0.00 522.00 0.00 38.00 12.00 ## 3 7241.90 6809.42 6946.40 7973.55 11145.80 6955.16 15659.17 19274.30 8416.25 11985.00 7350.30 19120.00 19435.17 11338.03 44850.17 9420.23 10552.97 9010.06 ## 4 7.00 235.75 201.80 235.60 225.40 0.00 99.25 11.60 2.00 7.00 8.00 80.00 78.00 357.95 611.85 13440.40 19492.40 15746.00 ## 5 12387.03 17688.55 14985.24 15053.94 16793.67 11458.42 10131.42 20513.47 15019.70 17020.17 12546.52 13788.47 13842.11 8711.45 27699.92 1789.83 200.89 200.10 ## 6 3186.93 6247.42 4006.83 4459.93 4493.67 2859.21 5.71 4698.32 4167.89 4485.42 3432.01 142.82 5.72 66.29 1714.11 0.00 2.86 0.00 ## 6-3 6-4_new 6-5_new 6-6 6-7_new 6-8_new 6-9 7-1 7-10 7-2 7-3 7-4 7-5 7-6 7-7 7-8 7-9 8-1 ## 1 477.12 39453.21 26497.25 2746.95 59430.45 49094.97 543.44 8061.66 15081.42 7689.49 11046.41 11913.08 18184.75 12650.25 7948.35 13681.54 14887.71 13590.42 ## 2 0.00 535.00 455.00 58.00 3982.00 1480.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 ## 3 10712.08 63167.75 49282.61 11464.98 45404.40 55049.48 13072.15 5829.43 5626.50 10723.00 12207.57 11690.03 12747.30 13734.58 10495.17 18670.50 7706.84 11422.33 ## 4 20157.87 22847.23 35772.70 17008.40 6240.25 17086.20 8690.07 18.20 20.00 36.00 0.00 24.40 22.60 84.00 0.00 52.00 11.00 28.00 ## 5 209.91 22441.96 24121.40 1250.74 41184.17 26278.59 7864.24 1538.00 660.50 2526.67 2195.41 1115.50 1860.83 3549.50 2878.00 3145.50 1004.17 1390.66 ## 6 3.57 1218.52 1569.78 4.33 9898.11 4345.75 4.67 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 1.25 ## 8-10 8-2 8-3 8-4 8-5 8-6 8-7 8-8 8-9 ## 1 13137.37 11680.42 9330.06 14908.71 12144.25 11506.58 12139.83 13407.25 12041.21 ## 2 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 3.20 ## 3 15111.75 9126.67 11392.08 18340.16 13613.83 6827.33 6532.00 10133.83 16754.94 ## 4 36.00 14.00 5.00 7.00 24.00 0.00 6.00 14.00 0.00 ## 5 3691.41 1289.25 3883.24 6055.33 3591.66 863.00 1052.50 1132.67 3653.50 ## 6 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 3.45 dim(KO_profile) ## [1] 7287 81 metadata &lt;- readxl::read_xlsx(&#39;/share/projects/SOP/Functional_Analysis/Tongbangzhuo/Demodata/PICRUSt2/Demodata/Eround1_Animal_metadata.xlsx&#39;) %&gt;% as.data.frame() %&gt;% column_to_rownames(&#39;SampleID&#39;) ## Construct phyloseq object of functional data phy &lt;- phyloseq::phyloseq(otu_table(KO_profile %&gt;% column_to_rownames(&#39;function&#39;), taxa_are_rows = TRUE), sample_data(metadata)) 6.3.2 Preprocess Data transformation In this chunk, we use TSS (Total sum scaling) to eliminate the influence of sequencing depth on samples. ## Normalize into relative abundance phy_ra &lt;- XMAS2::normalize(object = phy, method = &quot;TSS&quot;) head(otu_table(phy_ra)) ## OTU Table: [6 taxa and 80 samples] ## taxa are rows ## 1-1 1-10 1-2 1-3 1-4 1-5 1-6 1-7 1-8 1-9 2-1_new 2-10 ## K00001 2.801193e-05 2.352827e-04 3.410494e-04 2.981510e-04 2.521403e-04 1.462433e-04 1.648275e-04 1.963857e-04 3.363588e-04 3.413925e-04 1.353956e-04 6.023389e-05 ## K00002 1.563194e-06 6.892306e-07 0.000000e+00 6.520220e-07 3.973791e-06 9.017681e-06 6.486063e-07 2.622746e-06 1.423588e-05 1.296638e-06 7.880332e-07 0.000000e+00 ## K00003 5.882349e-05 5.414758e-04 4.348516e-04 5.585822e-04 4.031793e-04 3.296265e-04 5.910604e-04 6.161407e-04 1.993733e-04 4.586447e-04 2.268970e-04 3.224318e-04 ## K00004 4.825403e-05 1.804253e-06 3.207328e-05 7.343876e-05 2.252681e-04 3.484467e-04 5.864164e-06 9.582600e-06 1.654424e-05 1.039398e-05 3.770913e-04 5.266480e-04 ## K00005 5.446034e-04 7.385990e-04 1.582553e-04 1.288689e-04 1.021635e-04 1.141010e-04 3.333094e-04 4.739650e-04 3.287658e-04 2.437674e-04 2.125731e-04 1.653722e-05 ## K00007 2.639526e-04 6.979609e-07 1.137144e-05 3.740433e-06 8.770615e-06 1.916419e-05 1.243989e-06 4.789362e-06 8.699643e-05 4.924695e-06 1.014229e-04 1.909169e-07 ## 2-2 2-3 2-4 2-5 2-6 2-7 2-8 2-9 3-1 3-10 3-2 3-3 ## K00001 5.907292e-05 2.576559e-04 4.523432e-04 1.232080e-04 1.517257e-05 1.277041e-04 4.984256e-05 1.716372e-04 1.575852e-05 2.270144e-04 1.800142e-05 8.197794e-05 ## K00002 3.365992e-06 3.925466e-06 0.000000e+00 0.000000e+00 0.000000e+00 3.068396e-06 1.962598e-06 1.319294e-07 0.000000e+00 1.258678e-06 3.934802e-07 2.501490e-06 ## K00003 3.119649e-04 4.560565e-04 5.157326e-04 4.652668e-04 3.334419e-04 3.431012e-04 3.020624e-04 3.535246e-04 3.073400e-04 4.967000e-04 3.375201e-04 3.099014e-04 ## K00004 4.977400e-04 4.566725e-05 1.180069e-04 3.107762e-04 4.161156e-04 4.053490e-04 5.393961e-04 4.138836e-04 5.855666e-04 1.610696e-05 4.410105e-04 4.783356e-04 ## K00005 3.381392e-05 1.815468e-04 1.892567e-04 1.256803e-04 1.356316e-04 8.032168e-05 2.701197e-05 3.708588e-05 4.357567e-06 2.184387e-04 9.822658e-05 3.711641e-05 ## K00007 7.776132e-06 6.443051e-05 9.933720e-07 1.370426e-06 7.655208e-08 7.140799e-06 4.637565e-06 1.095014e-07 0.000000e+00 4.305092e-06 4.316175e-07 5.396569e-06 ## 3-4_new 3-5 3-6_new 3-7 3-8_new 3-9_new 4-1 4-10 4-2 4-3 4-4 4-5 ## K00001 3.077143e-04 9.929381e-05 3.183005e-04 9.031339e-05 3.809448e-04 3.381220e-04 4.443248e-04 3.987389e-04 2.494767e-04 4.022330e-04 3.625752e-04 3.767764e-04 ## K00002 8.054827e-07 4.007278e-06 1.250764e-05 1.824578e-05 1.149300e-05 1.787713e-05 0.000000e+00 2.963377e-05 0.000000e+00 5.435987e-05 1.125869e-05 2.524214e-05 ## K00003 3.480170e-04 3.552392e-04 3.646070e-04 4.905353e-04 2.725523e-04 2.839158e-04 2.215770e-04 1.318855e-04 5.030291e-04 2.329715e-04 1.243619e-04 1.790412e-04 ## K00004 1.472944e-04 4.064691e-04 2.340127e-05 2.713088e-06 5.055611e-05 2.509963e-05 1.041433e-06 4.868044e-06 7.478189e-07 0.000000e+00 1.208250e-06 1.730607e-07 ## K00005 9.235822e-05 9.796032e-05 2.712632e-04 3.945439e-04 2.380665e-04 2.779120e-04 2.075433e-04 3.201061e-04 1.952181e-04 3.284516e-04 3.358811e-04 3.062440e-04 ## K00007 4.522706e-06 7.708340e-06 6.747558e-05 6.457797e-06 5.628157e-05 6.120602e-05 3.225664e-06 9.584652e-05 2.211986e-06 8.080823e-05 1.051268e-04 7.879034e-05 ## 4-6 4-7 4-8 4-9 5-1 5-10 5-2 5-3 5-4 5-5 5-6 5-7 ## K00001 3.729072e-04 3.448071e-04 3.896673e-04 3.834663e-04 4.033027e-04 2.959880e-04 4.087573e-04 4.050189e-04 3.946021e-04 4.080849e-04 2.609576e-04 2.577150e-04 ## K00002 3.131680e-05 3.836583e-05 4.212479e-05 5.350141e-05 4.368152e-05 0.000000e+00 7.699658e-05 4.663647e-05 5.940301e-05 4.823012e-05 3.671900e-06 0.000000e+00 ## K00003 1.493342e-04 1.605448e-04 1.789473e-04 2.281239e-04 1.946265e-04 4.143785e-04 3.282582e-04 1.880710e-04 2.407660e-04 1.952125e-04 4.588675e-04 4.502841e-04 ## K00004 5.170123e-06 4.663991e-06 5.287480e-06 4.613319e-06 0.000000e+00 2.626389e-06 1.975581e-07 4.469235e-08 1.406226e-07 2.124675e-07 1.919948e-06 1.807144e-06 ## K00005 3.879193e-04 3.463381e-04 3.378498e-04 3.437203e-04 3.206414e-04 2.681012e-04 3.493623e-04 3.356329e-04 3.419172e-04 3.332159e-04 3.309142e-04 3.207012e-04 ## K00007 1.370092e-04 9.260565e-05 1.000925e-04 9.197309e-05 8.000937e-05 1.511000e-07 8.001649e-05 9.313641e-05 9.010735e-05 9.114881e-05 3.427586e-06 1.325239e-07 ## 5-8 5-9_new 6-1 6-10 6-2 6-3 6-4_new 6-5_new 6-6 6-7_new 6-8_new 6-9 ## K00001 3.662952e-04 3.876332e-04 7.037032e-05 1.451313e-05 3.643616e-05 1.365941e-05 2.453076e-04 1.835822e-04 7.841405e-05 3.599708e-04 3.138890e-04 1.625962e-05 ## K00002 0.000000e+00 4.069377e-06 0.000000e+00 1.124980e-06 4.201587e-07 0.000000e+00 3.326461e-06 3.152399e-06 1.655660e-06 2.411901e-05 9.462389e-06 0.000000e+00 ## K00003 3.586722e-04 3.496403e-04 3.262294e-04 3.124178e-04 3.154712e-04 3.066748e-04 3.927571e-04 3.414471e-04 3.272777e-04 2.750149e-04 3.519592e-04 3.911163e-04 ## K00004 1.132355e-05 4.769824e-06 4.654508e-04 5.770672e-04 5.513182e-04 5.770972e-04 1.420569e-04 2.478457e-04 4.855194e-04 3.779726e-05 1.092407e-04 2.600053e-04 ## K00005 2.755819e-04 2.159414e-04 6.198311e-05 5.947294e-06 7.006146e-06 6.009488e-06 1.395370e-04 1.671215e-04 3.570345e-05 2.494529e-04 1.680123e-04 2.352966e-04 ## K00007 2.097047e-06 1.336276e-05 0.000000e+00 8.466953e-08 0.000000e+00 1.022051e-07 7.576373e-06 1.087598e-05 1.236036e-07 5.995295e-05 2.778458e-05 1.397255e-07 ## 7-1 7-10 7-2 7-3 7-4 7-5 7-6 7-7 7-8 7-9 8-1 8-10 ## K00001 4.770528e-04 5.847251e-04 2.983688e-04 3.903168e-04 4.311137e-04 5.655906e-04 4.123612e-04 0.0003666980 3.938285e-04 5.193777e-04 4.405701e-04 3.523975e-04 ## K00002 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.0000000000 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 ## K00003 3.449595e-04 2.181463e-04 4.160755e-04 4.313456e-04 4.230419e-04 3.964725e-04 4.477072e-04 0.0004841959 5.374377e-04 2.688634e-04 3.702856e-04 4.053584e-04 ## K00004 1.076994e-06 7.754245e-07 1.396878e-06 0.000000e+00 8.829937e-07 7.029158e-07 2.738155e-06 0.0000000000 1.496840e-06 3.837498e-07 9.076955e-07 9.656659e-07 ## K00005 9.101193e-05 2.560839e-05 9.804024e-05 7.757321e-05 4.036801e-05 5.787641e-05 1.157033e-04 0.0001327769 9.054445e-05 3.503182e-05 4.508199e-05 9.901857e-05 ## K00007 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.0000000000 0.000000e+00 0.000000e+00 4.052212e-08 0.000000e+00 ## 8-2 8-3 8-4 8-5 8-6 8-7 8-8 8-9 ## K00001 5.024012e-04 3.705616e-04 4.364260e-04 3.945743e-04 5.142765e-04 4.992422e-04 4.641715e-04 3.800689e-04 ## K00002 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 1.010049e-07 ## K00003 3.925587e-04 4.524587e-04 5.368756e-04 4.423218e-04 3.051415e-04 2.686240e-04 3.508427e-04 5.288532e-04 ## K00004 6.021716e-07 1.985848e-07 2.049126e-07 7.797750e-07 0.000000e+00 2.467459e-07 4.846931e-07 0.000000e+00 ## K00005 5.545355e-05 1.542305e-04 1.772590e-04 1.166953e-04 3.857103e-05 4.328334e-05 3.921410e-05 1.153191e-04 ## K00007 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 1.088959e-07 Aggregate low abundance data In this chunck, we aggregate low abundance features to one row. Notably, you need to transform and remove unmapped entries in your data before running this chunk!! 1e-12 is an empirical threshold fot filtering low abundance feature. According to published paper Obese Individuals with and without Type 2 Diabetes Show Different Gut Microbial Functional Capacity and Composition pathway with top 50% mean abundance and top 50% variance are left. But in MaAsLin2，pathway with abundance less than 10-10 are filtered by default. source(&quot;/share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Kegg/Scripts/R/ultility.R&quot;) filtered_KO_profile &lt;- aggregate_low_abundance(input_data = otu_table(phy_ra) %&gt;% as.data.frame(), threshold = 1e-12) ## threshold should be modified based on your on study dim(filtered_KO_profile) ## [1] 7287 80 filtered_phy_ra &lt;- phyloseq::phyloseq(otu_table(filtered_KO_profile, taxa_are_rows = TRUE), sample_data(metadata)) Filter low prevalence pathway In this chunk, we would remove pathways apperaing in less than 5% of samples from data set before doing analysis. Remember to run all three chunks in data preprocessing section before running this chunk! ## Filter features whose frequency are less than 0.05. filtered_phy_ra &lt;- XMAS2::run_trim(object = filtered_phy_ra, cutoff = 0.05, trim = &quot;feature&quot;) dim(otu_table(filtered_phy_ra)) ## [1] 6542 80 Run DA Run CLR transformed wilcoxon DA ## Run DA DA_res &lt;- XMAS2::run_wilcox( ps = filtered_phy_ra, group = &quot;Group2&quot;, group_names = c(&quot;Baseline&quot;, &quot;Treatment&quot;), norm = &quot;CLR&quot;) head(DA_res) ## TaxaID Block Enrichment EffectSize Statistic Pvalue AdjustedPvalue Log2FoldChange (Median)\\nBaseline_vs_Treatment Median Abundance\\n(All) ## 1 K00001 20_Baseline vs 30_Treatment Nonsignif 0.03408348 400 0.0481294633 0.084008024 NaN -0.1482320 ## 2 K00002 20_Baseline vs 30_Treatment Treatment 0.00000000 153 0.0015758495 0.007121667 NA 0.0000000 ## 3 K00003 20_Baseline vs 30_Treatment Baseline 0.38917933 469 0.0005871079 0.004360078 4.053116 0.4637099 ## 4 K00004 20_Baseline vs 30_Treatment Baseline 0.13210957 424 0.0144350133 0.032641111 -6.455651 -0.6159066 ## 5 K00005 20_Baseline vs 30_Treatment Baseline 0.30350692 487 0.0001205459 0.001902819 NaN -1.2776484 ## 6 K00007 20_Baseline vs 30_Treatment Treatment 0.17518023 148 0.0019300012 0.007987687 NA -1.0353115 ## Median Abundance\\nBaseline Median Abundance\\nTreatment Log2FoldChange (Rank)\\nBaseline_vs_Treatment Mean Rank Abundance\\nBaseline Mean Rank Abundance\\nTreatment ## 1 0.49958520 -0.64810011 0.4602005 30.50 22.17 ## 2 -3.82423193 0.00000000 -0.7441018 18.15 30.40 ## 3 0.93270253 0.05618674 0.7728197 33.95 19.87 ## 4 -0.05899854 -5.17828202 0.5688959 31.70 21.37 ## 5 0.10889870 -1.87146624 0.8548021 34.85 19.27 ## 6 -3.66474858 0.00000000 -0.7721570 17.90 30.57 ## Occurrence (100%)\\n(All) Occurrence (100%)\\nBaseline Occurrence (100%)\\nTreatment Odds Ratio (95% CI) ## 1 100 100 100.00 0.57 (-0.51;1.7) ## 2 46 75 26.67 0.39 (-1.5;2.2) ## 3 100 100 100.00 0.28 (-2.3;2.8) ## 4 92 100 86.67 0.23 (-2.7;3.1) ## 5 100 100 100.00 0.23 (-2.6;3.1) ## 6 60 100 33.33 0.18 (-3.2;3.6) Visualize DA result ## Read in description for ID_Description_Mapping &lt;- read.table(&#39;/share/projects/SOP/Functional_Analysis/Tongbangzhuo/Demodata/PICRUSt2/output/KO_metagenome_out/pred_metagenome_unstrat_descrip.tsv&#39;, sep = &#39;\\t&#39;, comment.char = &#39;&#39;, na.strings = &#39;&#39;, quote = &#39;&#39;, header = TRUE, check.names = FALSE) %&gt;% .[, c(1,2)] %&gt;% column_to_rownames(&#39;function&#39;) renames_DA_res &lt;- DA_res %&gt;% dplyr::mutate(TaxaID = ID_Description_Mapping[DA_res$TaxaID,] %&gt;% as.vector()) ## Volcano plot p &lt;- XMAS2::plot_volcano( da_res = DA_res, group_names = c(&quot;Baseline&quot;, &quot;Treatment&quot;), x_index = &quot;Log2FoldChange (Rank)\\nBaseline_vs_Treatment&quot;, x_index_cutoff = 0.5, y_index = &quot;AdjustedPvalue&quot;, y_index_cutoff = 0.05, group_color = c(&quot;red&quot;, &quot;grey&quot;, &quot;blue&quot;), topN = 5, taxa_name = NULL) p filtered_DA_res &lt;- DA_res %&gt;% dplyr::arrange(`AdjustedPvalue`, `Log2FoldChange (Rank)\\nBaseline_vs_Treatment`) %&gt;% dplyr::filter(`AdjustedPvalue` &lt; 0.05) %&gt;% dplyr::filter(abs(`Log2FoldChange (Rank)\\nBaseline_vs_Treatment`) &gt; 0.5) top_features &lt;- filtered_DA_res[order(filtered_DA_res$AdjustedPvalue), ] %&gt;% head(5) %&gt;% .$TaxaID ## Boxplot filtered_pf &lt;- otu_table(filtered_phy_ra) %&gt;% as.data.frame() %&gt;% .[top_features, ] %&gt;% rownames_to_column(&#39;feature&#39;) %&gt;% dplyr::mutate(feature = ID_Description_Mapping[top_features, ]) %&gt;% column_to_rownames(&#39;feature&#39;) %&gt;% t() %&gt;% as.data.frame() filtered_pf %&lt;&gt;% cbind(., metadata) XMAS2::plot_boxplot(data = filtered_pf, y_index = ID_Description_Mapping[top_features, ] %&gt;% as.vector(), group = &quot;Group2&quot;, group_names = c(&#39;Treatment&#39;,&#39;Baseline&#39;), do_test = TRUE, method = &quot;wilcox.test&quot;) Same analysis can be applied to the EC profile, KEGG pathway profile as well as Metacyc pathway profile. 6.4 Session info devtools::session_info() ## ─ Session info ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 3.6.3 (2020-02-29) ## os Ubuntu 16.04.7 LTS ## system x86_64, linux-gnu ## ui RStudio ## language (EN) ## collate en_IN.UTF-8 ## ctype en_IN.UTF-8 ## tz Asia/Hong_Kong ## date 2022-09-13 ## rstudio 1.1.419 (server) ## pandoc 2.7.3 @ /usr/bin/ (via rmarkdown) ## ## ─ Packages ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## ! package * version date (UTC) lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 3.6.3) ## ade4 1.7-17 2021-06-17 [1] CRAN (R 3.6.3) ## ALDEx2 * 1.18.0 2019-10-29 [1] Bioconductor ## annotate 1.64.0 2019-10-29 [1] Bioconductor ## AnnotationDbi * 1.48.0 2019-10-29 [1] Bioconductor ## ape 5.5 2021-04-25 [1] CRAN (R 3.6.3) ## assertthat 0.2.1 2019-03-21 [2] CRAN (R 3.6.3) ## backports 1.4.1 2021-12-13 [1] CRAN (R 3.6.3) ## base64enc 0.1-3 2015-07-28 [2] CRAN (R 3.6.3) ## bayesm 3.1-4 2019-10-15 [1] CRAN (R 3.6.3) ## biglm 0.9-2.1 2020-11-27 [1] CRAN (R 3.6.3) ## Biobase * 2.46.0 2019-10-29 [2] Bioconductor ## BiocGenerics * 0.32.0 2019-10-29 [2] Bioconductor ## BiocParallel * 1.20.1 2019-12-21 [2] Bioconductor ## biomformat 1.14.0 2019-10-29 [1] Bioconductor ## Biostrings 2.54.0 2019-10-29 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] CRAN (R 3.6.3) ## bit64 4.0.5 2020-08-30 [1] CRAN (R 3.6.3) ## bitops 1.0-7 2021-04-24 [1] CRAN (R 3.6.3) ## blob 1.2.2 2021-07-23 [1] CRAN (R 3.6.3) ## bookdown 0.24 2021-09-02 [1] CRAN (R 3.6.3) ## brio 1.1.3 2021-11-30 [2] CRAN (R 3.6.3) ## broom 0.7.12 2022-01-28 [1] CRAN (R 3.6.3) ## bslib 0.3.1 2021-10-06 [1] CRAN (R 3.6.3) ## cachem 1.0.5 2021-05-15 [1] CRAN (R 3.6.3) ## callr 3.7.0 2021-04-20 [2] CRAN (R 3.6.3) ## car 3.0-12 2021-11-06 [1] CRAN (R 3.6.3) ## carData 3.0-4 2020-05-22 [1] CRAN (R 3.6.3) ## caTools 1.18.2 2021-03-28 [1] CRAN (R 3.6.3) ## cellranger 1.1.0 2016-07-27 [1] CRAN (R 3.6.3) ## checkmate 2.0.0 2020-02-06 [1] CRAN (R 3.6.3) ## circlize * 0.4.13 2021-06-09 [1] CRAN (R 3.6.3) ## cli 3.1.0 2021-10-27 [1] CRAN (R 3.6.3) ## clue 0.3-59 2021-04-16 [1] CRAN (R 3.6.3) ## cluster 2.1.0 2019-06-19 [2] CRAN (R 3.6.3) ## coda 0.19-4 2020-09-30 [1] CRAN (R 3.6.3) ## codetools 0.2-16 2018-12-24 [2] CRAN (R 3.6.3) ## coin 1.4-2 2021-10-08 [1] CRAN (R 3.6.3) ## colorspace 2.0-2 2021-06-24 [1] CRAN (R 3.6.3) ## ComplexHeatmap * 2.2.0 2019-10-29 [1] Bioconductor ## compositions 2.0-2 2021-07-14 [1] CRAN (R 3.6.3) ## cowplot * 1.1.1 2020-12-30 [1] CRAN (R 3.6.3) ## crayon 1.5.0 2022-02-14 [1] CRAN (R 3.6.3) ## curl 4.3.2 2021-06-23 [2] CRAN (R 3.6.3) ## dada2 * 1.14.1 2020-02-22 [1] Bioconductor ## data.table * 1.14.0 2021-02-21 [1] CRAN (R 3.6.3) ## DBI 1.1.1 2021-01-15 [1] CRAN (R 3.6.3) ## dbplyr 2.1.1 2021-04-06 [1] CRAN (R 3.6.3) ## DelayedArray * 0.12.3 2020-04-09 [2] Bioconductor ## DelayedMatrixStats 1.8.0 2019-10-29 [1] Bioconductor ## DEoptimR 1.0-9 2021-05-24 [1] CRAN (R 3.6.3) ## desc 1.4.1 2022-03-06 [2] CRAN (R 3.6.3) ## DESeq2 * 1.26.0 2019-10-29 [1] Bioconductor ## devtools 2.4.3 2021-11-30 [1] CRAN (R 3.6.3) ## digest 0.6.29 2021-12-01 [1] CRAN (R 3.6.3) ## dplyr * 1.0.6 2021-05-05 [1] CRAN (R 3.6.3) ## edgeR 3.28.1 2020-02-26 [1] Bioconductor ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 3.6.3) ## EnhancedVolcano * 1.4.0 2019-10-29 [1] Bioconductor ## enrichR * 3.0 2021-02-02 [1] CRAN (R 3.6.3) ## evaluate 0.15 2022-02-18 [2] CRAN (R 3.6.3) ## fansi 1.0.2 2022-01-14 [1] CRAN (R 3.6.3) ## farver 2.1.0 2021-02-28 [2] CRAN (R 3.6.3) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 3.6.3) ## fdrtool 1.2.17 2021-11-13 [1] CRAN (R 3.6.3) ## forcats * 0.5.1 2021-01-27 [1] CRAN (R 3.6.3) ## foreach 1.5.2 2022-02-02 [2] CRAN (R 3.6.3) ## foreign 0.8-75 2020-01-20 [2] CRAN (R 3.6.3) ## formatR 1.12 2022-03-31 [2] CRAN (R 3.6.3) ## Formula 1.2-4 2020-10-16 [1] CRAN (R 3.6.3) ## fs 1.5.2 2021-12-08 [1] CRAN (R 3.6.3) ## futile.logger 1.4.3 2016-07-10 [2] CRAN (R 3.6.3) ## futile.options 1.0.1 2018-04-20 [2] CRAN (R 3.6.3) ## genefilter 1.68.0 2019-10-29 [1] Bioconductor ## geneplotter 1.64.0 2019-10-29 [1] Bioconductor ## generics 0.1.2 2022-01-31 [1] CRAN (R 3.6.3) ## GenomeInfoDb * 1.22.1 2020-03-27 [2] Bioconductor ## GenomeInfoDbData 1.2.2 2020-08-24 [2] Bioconductor ## GenomicAlignments 1.22.1 2019-11-12 [1] Bioconductor ## GenomicRanges * 1.38.0 2019-10-29 [2] Bioconductor ## getopt 1.20.3 2019-03-22 [1] CRAN (R 3.6.3) ## GetoptLong 1.0.5 2020-12-15 [1] CRAN (R 3.6.3) ## GGally * 2.1.2 2021-06-21 [1] CRAN (R 3.6.3) ## ggbipart * 0.1.2 2022-07-20 [1] Github (pedroj/bipartite_plots@162f577) ## ggExtra * 0.9 2019-08-27 [1] CRAN (R 3.6.3) ## ggplot2 * 3.3.5 2021-06-25 [1] CRAN (R 3.6.3) ## ggpubr * 0.4.0 2020-06-27 [1] CRAN (R 3.6.3) ## ggrepel * 0.9.1 2021-01-15 [2] CRAN (R 3.6.3) ## ggsci * 2.9 2018-05-14 [1] CRAN (R 3.6.3) ## ggsignif 0.6.3 2021-09-09 [1] CRAN (R 3.6.3) ## glmnet 4.1-2 2021-06-24 [1] CRAN (R 3.6.3) ## GlobalOptions 0.1.2 2020-06-10 [1] CRAN (R 3.6.3) ## glue 1.6.1 2022-01-22 [1] CRAN (R 3.6.3) ## GMPR 0.1.3 2021-05-17 [1] local ## gplots 3.1.1 2020-11-28 [1] CRAN (R 3.6.3) ## graph 1.64.0 2019-10-29 [1] Bioconductor ## gridExtra 2.3 2017-09-09 [2] CRAN (R 3.6.3) ## gtable 0.3.0 2019-03-25 [2] CRAN (R 3.6.3) ## gtools 3.9.2 2021-06-06 [1] CRAN (R 3.6.3) ## haven 2.4.1 2021-04-23 [1] CRAN (R 3.6.3) ## highr 0.9 2021-04-16 [1] CRAN (R 3.6.3) ## Hmisc 4.5-0 2021-02-28 [1] CRAN (R 3.6.3) ## hms 1.1.1 2021-09-26 [1] CRAN (R 3.6.3) ## htmlTable 2.3.0 2021-10-12 [1] CRAN (R 3.6.3) ## htmltools 0.5.2 2021-08-25 [1] CRAN (R 3.6.3) ## htmlwidgets 1.5.4 2021-09-08 [2] CRAN (R 3.6.3) ## httpuv 1.6.1 2021-05-07 [1] CRAN (R 3.6.3) ## httr 1.4.3 2022-05-04 [2] CRAN (R 3.6.3) ## hwriter 1.3.2 2014-09-10 [1] CRAN (R 3.6.3) ## igraph 1.3.1 2022-04-20 [2] CRAN (R 3.6.3) ## IHW 1.14.0 2019-10-29 [1] Bioconductor ## IRanges * 2.20.2 2020-01-13 [2] Bioconductor ## iterators 1.0.14 2022-02-05 [2] CRAN (R 3.6.3) ## jpeg 0.1-9 2021-07-24 [1] CRAN (R 3.6.3) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 3.6.3) ## jsonlite 1.8.0 2022-02-22 [2] CRAN (R 3.6.3) ## KEGGgraph 1.46.0 2019-10-29 [1] Bioconductor ## KEGGREST 1.26.1 2019-11-06 [1] Bioconductor ## KernSmooth 2.23-16 2019-10-15 [2] CRAN (R 3.6.3) ## knitr 1.36 2021-09-29 [1] CRAN (R 3.6.3) ## labeling 0.4.2 2020-10-20 [2] CRAN (R 3.6.3) ## lambda.r 1.2.4 2019-09-18 [2] CRAN (R 3.6.3) ## later 1.3.0 2021-08-18 [2] CRAN (R 3.6.3) ## lattice * 0.20-38 2018-11-04 [2] CRAN (R 3.6.3) ## latticeExtra 0.6-29 2019-12-19 [1] CRAN (R 3.6.3) ## lazyeval 0.2.2 2019-03-15 [2] CRAN (R 3.6.3) ## libcoin 1.0-9 2021-09-27 [1] CRAN (R 3.6.3) ## lifecycle 1.0.1 2021-09-24 [1] CRAN (R 3.6.3) ## limma 3.42.2 2020-02-03 [2] Bioconductor ## locfit 1.5-9.4 2020-03-25 [1] CRAN (R 3.6.3) ## lpsymphony 1.14.0 2019-10-29 [1] Bioconductor (R 3.6.3) ## lubridate 1.7.10 2021-02-26 [1] CRAN (R 3.6.3) ## Maaslin2 1.7.3 2022-03-23 [1] Github (biobakery/maaslin2@8d090e4) ## magrittr * 2.0.2 2022-01-26 [1] CRAN (R 3.6.3) ## MASS 7.3-54 2021-05-03 [1] CRAN (R 3.6.3) ## Matrix 1.3-4 2021-06-01 [1] CRAN (R 3.6.3) ## matrixStats * 0.60.0 2021-07-26 [1] CRAN (R 3.6.3) ## mbzinb 0.2 2021-06-23 [1] local ## memoise 2.0.1 2021-11-26 [2] CRAN (R 3.6.3) ## metagenomeSeq 1.28.2 2020-02-03 [1] Bioconductor ## metamicrobiomeR 1.1 2021-02-03 [1] local ## mgcv 1.8-31 2019-11-09 [2] CRAN (R 3.6.3) ## microbiome 1.8.0 2019-10-29 [1] Bioconductor ## mime 0.12 2021-09-28 [2] CRAN (R 3.6.3) ## miniUI 0.1.1.1 2018-05-18 [1] CRAN (R 3.6.3) ## modelr 0.1.8 2020-05-19 [1] CRAN (R 3.6.3) ## modeltools 0.2-23 2020-03-05 [1] CRAN (R 3.6.3) ## multcomp 1.4-17 2021-04-29 [1] CRAN (R 3.6.3) ## multtest 2.42.0 2019-10-29 [2] Bioconductor ## munsell 0.5.0 2018-06-12 [2] CRAN (R 3.6.3) ## mvtnorm 1.1-3 2021-10-08 [1] CRAN (R 3.6.3) ## network * 1.17.1 2021-06-14 [1] CRAN (R 3.6.3) ## nlme 3.1-144 2020-02-06 [2] CRAN (R 3.6.3) ## nnet 7.3-12 2016-02-02 [2] CRAN (R 3.6.3) ## optparse 1.7.1 2021-10-08 [1] CRAN (R 3.6.3) ## org.Hs.eg.db * 3.10.0 2021-12-08 [1] Bioconductor ## pathview * 1.26.0 2019-10-29 [1] Bioconductor ## pcaPP 1.9-74 2021-04-23 [1] CRAN (R 3.6.3) ## permute * 0.9-5 2019-03-12 [1] CRAN (R 3.6.3) ## phyloseq * 1.30.0 2019-10-29 [1] Bioconductor ## pillar 1.7.0 2022-02-01 [1] CRAN (R 3.6.3) ## pkgbuild 1.3.1 2021-12-20 [2] CRAN (R 3.6.3) ## pkgconfig 2.0.3 2019-09-22 [2] CRAN (R 3.6.3) ## pkgload 1.2.4 2021-11-30 [2] CRAN (R 3.6.3) ## plotly * 4.10.0 2021-10-09 [1] CRAN (R 3.6.3) ## plyr 1.8.7 2022-03-24 [2] CRAN (R 3.6.3) ## png 0.1-7 2013-12-03 [1] CRAN (R 3.6.3) ## prettyunits 1.1.1 2020-01-24 [2] CRAN (R 3.6.3) ## processx 3.5.3 2022-03-25 [2] CRAN (R 3.6.3) ## promises 1.2.0.1 2021-02-11 [2] CRAN (R 3.6.3) ## protoclust 1.6.3 2019-01-31 [1] CRAN (R 3.6.3) ## ps 1.7.0 2022-04-23 [2] CRAN (R 3.6.3) ## pscl 1.5.5 2020-03-07 [1] CRAN (R 3.6.3) ## purrr * 0.3.4 2020-04-17 [2] CRAN (R 3.6.3) ## qvalue 2.18.0 2019-10-29 [1] Bioconductor ## R6 2.5.1 2021-08-19 [1] CRAN (R 3.6.3) ## RAIDA 1.0 2021-06-23 [1] local ## ranacapa 0.1.0 2021-06-18 [1] Github (gauravsk/ranacapa@58c0cab) ## RColorBrewer * 1.1-3 2022-04-03 [2] CRAN (R 3.6.3) ## Rcpp * 1.0.7 2021-07-07 [1] CRAN (R 3.6.3) ## RcppParallel 5.1.4 2021-05-04 [1] CRAN (R 3.6.3) ## RCurl 1.98-1.6 2022-02-08 [2] CRAN (R 3.6.3) ## readr * 2.0.0 2021-07-20 [1] CRAN (R 3.6.3) ## readxl * 1.3.1 2019-03-13 [1] CRAN (R 3.6.3) ## remotes 2.4.2 2021-11-30 [1] CRAN (R 3.6.3) ## reprex 2.0.1 2021-08-05 [1] CRAN (R 3.6.3) ## reshape 0.8.9 2022-04-12 [1] CRAN (R 3.6.3) ## reshape2 * 1.4.4 2020-04-09 [2] CRAN (R 3.6.3) ## Rgraphviz 2.30.0 2019-10-29 [1] Bioconductor ## rhdf5 2.30.1 2019-11-26 [1] Bioconductor ## Rhdf5lib 1.8.0 2019-10-29 [1] Bioconductor ## rJava 1.0-5 2021-09-24 [1] CRAN (R 3.6.3) ## rjson 0.2.20 2018-06-08 [1] CRAN (R 3.6.3) ## R rlang 1.0.2 &lt;NA&gt; [2] &lt;NA&gt; ## rmarkdown 2.11 2021-09-14 [1] CRAN (R 3.6.3) ## robustbase 0.93-9 2021-09-27 [1] CRAN (R 3.6.3) ## rpart 4.1-15 2019-04-12 [2] CRAN (R 3.6.3) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 3.6.3) ## Rsamtools 2.2.3 2020-02-23 [1] Bioconductor ## rsconnect 0.8.25 2021-11-19 [1] CRAN (R 3.6.3) ## RSQLite 2.2.7 2021-04-22 [1] CRAN (R 3.6.3) ## rstatix 0.7.0 2021-02-13 [1] CRAN (R 3.6.3) ## rstudioapi 0.13 2020-11-12 [2] CRAN (R 3.6.3) ## Rtsne 0.15 2018-11-10 [1] CRAN (R 3.6.3) ## rvest 1.0.2 2021-10-16 [1] CRAN (R 3.6.3) ## S4Vectors * 0.24.4 2020-04-09 [2] Bioconductor ## sandwich 3.0-1 2021-05-18 [1] CRAN (R 3.6.3) ## sass 0.4.0 2021-05-12 [1] CRAN (R 3.6.3) ## scales 1.2.0 2022-04-13 [2] CRAN (R 3.6.3) ## seqinr * 4.2-8 2021-06-09 [1] CRAN (R 3.6.3) ## sessioninfo 1.2.2 2021-12-06 [2] CRAN (R 3.6.3) ## shape 1.4.6 2021-05-19 [1] CRAN (R 3.6.3) ## shiny 1.7.1 2021-10-02 [1] CRAN (R 3.6.3) ## ShortRead 1.44.3 2020-02-03 [1] Bioconductor ## slam 0.1-49 2021-11-17 [1] CRAN (R 3.6.3) ## sna 2.6 2020-10-06 [1] CRAN (R 3.6.3) ## statnet.common 4.5.0 2021-06-05 [1] CRAN (R 3.6.3) ## stringi 1.7.4 2021-08-25 [1] CRAN (R 3.6.3) ## stringr * 1.4.0 2019-02-10 [2] CRAN (R 3.6.3) ## SummarizedExperiment * 1.16.1 2019-12-19 [2] Bioconductor ## survival 3.1-8 2019-12-03 [2] CRAN (R 3.6.3) ## tensorA 0.36.2 2020-11-19 [1] CRAN (R 3.6.3) ## testthat 3.1.4 2022-04-26 [2] CRAN (R 3.6.3) ## textshape 1.7.3 2021-05-28 [1] CRAN (R 3.6.3) ## TH.data 1.1-0 2021-09-27 [1] CRAN (R 3.6.3) ## tibble * 3.1.6 2021-11-07 [1] CRAN (R 3.6.3) ## tidyr * 1.2.0 2022-02-01 [1] CRAN (R 3.6.3) ## tidyselect 1.1.1 2021-04-30 [1] CRAN (R 3.6.3) ## tidyverse * 1.3.1 2021-04-15 [1] CRAN (R 3.6.3) ## tzdb 0.2.0 2021-10-27 [1] CRAN (R 3.6.3) ## UpSetR 1.4.0 2019-05-22 [1] CRAN (R 3.6.3) ## usethis 2.1.6 2022-05-25 [2] CRAN (R 3.6.3) ## utf8 1.2.2 2021-07-24 [1] CRAN (R 3.6.3) ## vctrs 0.3.8 2021-04-29 [1] CRAN (R 3.6.3) ## vegan * 2.5-7 2020-11-28 [1] CRAN (R 3.6.3) ## VennDiagram 1.7.1 2021-12-02 [1] CRAN (R 3.6.3) ## viridisLite 0.4.0 2021-04-13 [2] CRAN (R 3.6.3) ## vroom 1.5.7 2021-11-30 [1] CRAN (R 3.6.3) ## wesanderson * 0.3.6.9000 2021-07-21 [1] Github (karthik/wesanderson@651c944) ## withr 2.4.3 2021-11-30 [1] CRAN (R 3.6.3) ## Wrench 1.4.0 2019-10-29 [1] Bioconductor ## xfun 0.23 2021-05-15 [1] CRAN (R 3.6.3) ## xlsx * 0.6.5 2020-11-10 [1] CRAN (R 3.6.3) ## xlsxjars 0.6.1 2014-08-22 [1] CRAN (R 3.6.3) ## XMAS * 0.0.0.9000 2022-03-23 [1] local ## XMAS2 2.1.7.9 2022-09-09 [2] local ## XML 3.99-0.3 2020-01-20 [1] CRAN (R 3.6.3) ## xml2 1.3.3 2021-11-30 [2] CRAN (R 3.6.3) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 3.6.3) ## XVector 0.26.0 2019-10-29 [2] Bioconductor ## xviz * 1.1.0 2021-01-14 [1] local ## yaml 2.2.2 2022-01-25 [1] CRAN (R 3.6.3) ## zlibbioc 1.32.0 2019-10-29 [2] Bioconductor ## zoo 1.8-9 2021-03-09 [1] CRAN (R 3.6.3) ## ## [1] /share/home/tongbangzhuo/R/x86_64-pc-linux-gnu-library/3.6 ## [2] /opt/R-3.6.3/lib/R/library ## ## R ── Package was removed from disk. ## ## ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
