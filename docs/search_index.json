[["index.html", "Functional analysis Chapter 1 Introduction", " Functional analysis Bangzhuo Tong 2022-07-21 Chapter 1 Introduction This is a tutorial introducing the analysis of microbiome functional data (Including the analysis of data annotated from MetaCyc, KEGG, VFDB, SCFA, CARD, CAZY databases). Two cohortsâ€™ MGS data were used as demo data throughout this tutorial: One cohort contains 68 samples across 43 people (Including 15 donor, 1 BRS sample and 27 GvHD patients) in GvHD project. The other cohort consist of 10 samples from 8 patients, 1 water tube and 1 BRS in Newtech project. The first cohort was used as the input data for MetaCyc database analysis and the other one was used as the input for the analysis of KEGG, VFDB, SCFA, CARD, CAZY databases. This book includes 7 Chapters for the following 4 templates of funcitonal analysis: Analysis of Metacyc data Analysis of KEGG data Analysis of target database data MSEA Chapter1 introduces basic information of this tutorial. Chapter2 introduces the analysis of Metacyc data. Chapter3 introduces the preprocesssing (How to merge data of multiple samples and convert kegg genes to kegg pathways, etc,.) of KEGG data. Chapter4 introduces the analysis of processed KEGG data. Chapter5 introduces the preprocesssing (How to merge data of multiple samples) of VFDB, SCFA, CARD, CAZY data. Chapter6 introduces the analysis of processed CARD data. Chapter7 introduces MSEA. "],["functional-analysis-of-metacyc-database.html", "Chapter 2 Functional Analysis of Metacyc database 2.1 Environment setup 2.2 load data 2.3 Remove unppaed pathways 2.4 Plot Beta diversity 2.5 Permanova test 2.6 Differential analysis(DA) 2.7 Bacteria contributing to differential pathways 2.8 Plot Bacteria Contribution 2.9 Gene and Ensyme involed in differential pathways 2.10 Session Info", " Chapter 2 Functional Analysis of Metacyc database This demo provides guidance to standard data analysis of pathway data. Humman2 is used to identify pathways with MetaCyc database. There are five 7 steps in standard MGS data anlaysis process: load Humman2 output to Rstudio for analysis remove unintegrated and unmapped pathways from dataset beta diversity Permanova test Prevalance filtering differential analysis bacteria contribution to pathway reaction(enzyme) and gene to pathway 2.1 Environment setup knitr::opts_chunk$set(warning = FALSE, message = FALSE) ## remove all libraries and variables in current environment rm(list = ls()) library(XMAS) library(xviz) library(data.table) library(plotly) library(xlsx) library(magrittr) source(&quot;/share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Metacyc/RScript/permanova.R&quot;) source(&quot;/share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Metacyc/RScript/pathway2gene.R&quot;) 2.2 load data metadata metadata &lt;- read.table(&quot;/home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/Funtional/metadata.txt&quot;,header = TRUE,stringsAsFactors = FALSE) %&gt;% mutate(seqid2 = seqid) %&gt;% # keep seqid in the metadata column_to_rownames(&quot;seqid2&quot;) rownames(metadata) ## [1] &quot;4371&quot; &quot;4368&quot; &quot;4416&quot; &quot;4367&quot; &quot;4373&quot; &quot;4372&quot; &quot;4389&quot; &quot;4410&quot; &quot;4412&quot; &quot;4413&quot; &quot;4386&quot; &quot;4391&quot; &quot;4390&quot; Humann2: the unstratified pathway table generated by hummann2 is used for analysis first. pathwaydata &lt;- read_delim(&quot;/home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/Funtional/merged_relab_pathabundance_unstratified.tsv&quot;, delim = &quot;\\t&quot;) %&gt;% mutate(`# Pathway` = str_split_fixed(`# Pathway`, &quot;:&quot;, 2)[,1]) %&gt;% # do not edit column_to_rownames(&quot;# Pathway&quot;) %&gt;% # do not edit t() %&gt;% as.data.frame() %&gt;% # do not edit rownames_to_column(&quot;seq_id&quot;) %&gt;% # do not edit mutate(seq_id=str_extract(seq_id, &quot;\\\\d{4}&quot;)) %&gt;% # do not edit filter(seq_id %in% metadata$seqid) %&gt;% # *** only keep samples in metadata, edit if needed *** column_to_rownames(&quot;seq_id&quot;) %&gt;% # do not edit t() %&gt;% as.data.frame() %&gt;% # do not edit rownames_to_column(&quot;pathway&quot;) %&gt;% # do not edit filter(rowSums(.[,-1]) &gt; 0) %&gt;% # do not edit column_to_rownames(&quot;pathway&quot;) # do not edit colnames(pathwaydata) ## [1] &quot;4367&quot; &quot;4368&quot; &quot;4371&quot; &quot;4372&quot; &quot;4373&quot; &quot;4386&quot; &quot;4389&quot; &quot;4390&quot; &quot;4391&quot; &quot;4410&quot; &quot;4412&quot; &quot;4413&quot; &quot;4416&quot; 2.3 Remove unppaed pathways pathway.clean = pathwaydata %&gt;% rownames_to_column(&quot;pathway&quot;) %&gt;% filter(!pathway %in% c(&quot;UNMAPPED&quot;,&quot;UNINTEGRATED&quot;)) %&gt;% column_to_rownames(&quot;pathway&quot;) 2.4 Plot Beta diversity In this demo, we plot PCoA with Bray-Curtis distance as example. # plot_beta_diversity is a fucntion in XVIZ working on calculating the beta diversity distance and visualzing output # input of plot_beta_diversity is a phyloseq object phyloseq(otu_table(pathway.clean, taxa_are_rows = T), sample_data(metadata)) %&gt;% plot_beta_diversity(feature = &quot;Group&quot;,add_pc1 = TRUE, add_pc2 = TRUE) 2.5 Permanova test The first output is dispersion test and the second output is PERMANOVA test. # run_permanova_betadisp is a function in XMAS working on doing dispersion test and PERMANOVA test. phyloseq(otu_table(pathway.clean, taxa_are_rows = T), sample_data(metadata)) %&gt;% run_permanova_betadisp(vars = &quot;Group&quot;) ## $betadisp_res ## variable p_value analysis ## 1 Group 0.101 beta_dispersion_permutation999 ## ## $permanova_res ## variable p_value R2 analysis ## 1 Group 0.157 0.1082203 permanova_permutation999 2.6 Differential analysis(DA) 2.6.1 Preprocess before DA We would remove pathways apperaing in less than max(2 , 5% of samples) from data set before doing analysis. pathway.filter &lt;- XMAS::filter_prevalence(otu_table = pathway.clean, metadata = metadata.clean, threshold = 0.05, taxa_are_rows = TRUE) nrow(pathway.clean) ## [1] 429 nrow(pathway.filter) ## [1] 367 2.6.2 LefSE da_pathway = phyloseq(otu_table(pathway.filter, taxa_are_rows = T), sample_data(metadata)) %&gt;% lefse_mgs(compvar = &quot;Group&quot;) %&gt;% .$DA_features da_pathway$id %&lt;&gt;% str_replace_all(&quot;_&quot;,&quot;-&quot;) 2.7 Bacteria contributing to differential pathways options(stringsAsFactors = FALSE) pathway_stratified &lt;- read_delim(&quot;/share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Metacyc/Demodata/merged_relab_pathabundance_stratified.pcl&quot;, delim = &quot;\\t&quot;) %&gt;% column_to_rownames(&quot;pathwayID&quot;) %&gt;% t() %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;seq_id&quot;) %&gt;% mutate(seq_id=str_extract(seq_id, &quot;\\\\d{4}&quot;)) %&gt;% filter(seq_id %in% metadata$seqid) %&gt;% column_to_rownames(&quot;seq_id&quot;) %&gt;% t() %&gt;% as.data.frame() %&gt;% .[apply(.&gt;0, 1, any),] %&gt;% # .[apply(.&gt;0,1, function(x) sum(x) &gt; 4),] %&gt;% rownames_to_column(&quot;pathwayID&quot;) %&gt;% mutate(PathwayID=str_split_fixed(pathwayID,&quot;:&quot;,2)[,1]) %&gt;% mutate(Introduce=str_split_fixed(str_split_fixed(pathwayID,&quot;:&quot;,2)[,2],&quot;\\\\|&quot;,2)[,1]) %&gt;% mutate(Genus=str_split_fixed(str_split_fixed(pathwayID,&quot;\\\\|&quot;,2)[,2], &quot;\\\\.&quot;, 2)[,1]) %&gt;% mutate(Species=str_split_fixed(str_split_fixed(pathwayID,&quot;\\\\|&quot;,2)[,2], &quot;\\\\.&quot;, 2)[,2]) %&gt;% mutate(Species=str_replace(Species, &quot;s__&quot;, &quot;&quot;)) pathway_list &lt;- pathway_stratified %&gt;% as.data.frame() %&gt;% dplyr::select(PathwayID, Species) %&gt;% filter((!str_detect(PathwayID, &quot;UNINTEGRATED&quot;)) &amp; (PathwayID %in% da_pathway$id) &amp; Species!=&quot;&quot;) %&gt;% pivot_wider(names_from = &quot;Species&quot;,values_from = &quot;Species&quot;) %&gt;% column_to_rownames(&quot;PathwayID&quot;) %&gt;% .[apply(.,1,function(x) sum(!is.na(x))) &gt;= 2,] %&gt;% rownames() read_delim(&quot;/home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/Funtional/merged_relab_pathabundance_stratified.tsv&quot;, delim = &quot;\\t&quot;) %&gt;% column_to_rownames(&quot;# Pathway&quot;) %&gt;% t() %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;seqid&quot;) %&gt;% mutate(seqid=str_extract(seqid, &quot;\\\\d{4}&quot;)) %&gt;% merge(metadata,., by=&quot;seqid&quot;) %&gt;% filter(seqid %in% metadata$seqid) %&gt;% column_to_rownames(&quot;seqid&quot;) %&gt;% t() %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;pathwayID&quot;) %&gt;% write.table(.,&quot;/share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Metacyc/Demodata/merged_relab_pathabundance_stratified.pcl&quot;, row.names = FALSE, quote = FALSE, sep = &quot;\\t&quot;) for (i in pathway_list) { commond_text &lt;- &quot;python3.5 ~/tongbangzhuo_Xbiome1/Script/humann2_barplot.py --input /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/Funtional/merged_relab_pathabundance_stratified.pcl --focal-feature ${pathwayID} --focal-metadatum Group --last-metadatum Group -d 8 4 --output /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Metacyc/Demodata/pathway_bacteria/${pathwayID}.png -e 0.8&quot; commond_text &lt;- stringr::str_interp(commond_text, list(pathwayID = i)) system(commond_text) } 2.8 Plot Bacteria Contribution image_path &lt;- NULL # for (image in list.files(&quot;/share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Metacyc/Demodata/pathway_bacteria/&quot;)){ # if (str_detect(image,&quot;.png$&quot;)){ # image_path &lt;- c(image_path, paste0(&quot;/share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Metacyc/Demodata/pathway_bacteria/&quot;,image)) # } # } system(&#39;cp /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Metacyc/Demodata/pathway_bacteria/*.png ./&#39;) image_path &lt;- system(&#39;ls ./*PWY*png&#39;, intern = TRUE) %&gt;% unlist() %&gt;% as.character() %&gt;% as.vector() ## In the graph(s) below, green KO are those KOs enriched in GroupB, red KO are those KOs enriched in GroupA knitr::include_graphics(image_path) 2.9 Gene and Ensyme involed in differential pathways 2.9.1 load tables to mapping pathway to gene and enzyme # gene family my_genefamily = read.table(&quot;/home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/Funtional/metacyc_data/all.genefamilies.tsv&quot;,sep=&quot;\\t&quot;) my_genefamily_unstratified = my_genefamily %&gt;% filter(!str_detect(V1,&quot;[|]&quot;)) metacyc_pwy_name = read_delim(&quot;/home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/Funtional/metacyc_data/map_metacyc-pwy_name.txt&quot;,delim = &quot;\\t&quot;,col_names = FALSE) 2.9.2 Mapping pathway to related gene and reaction cur_path = 1 append_option = TRUE da_pathway_gene_full_list = list() for(i in 1:length(pathway_list)){ pathway_gene_result = pathway2gene(pathway_list[i]) if(is.null(pathway_gene_result)){ cur_path = cur_path+1 next() } else{ pathway_gene_result = pathway_gene_result %&gt;% dplyr::filter(genefamily %in% my_genefamily$V1) if(cur_path == 1){ append_option = FALSE } if(cur_path &gt; 1){ append_option = TRUE } #write.xlsx(pathway_gene_result,&quot;/home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/Funtional/pathway_reaction_gene.xlsx&quot;, # row.names = FALSE, col.names = TRUE,sheetName = pathway_list[i], # append = append_option) da_pathway_gene_full_list[[pathway_list[i]]] = pathway_gene_result cur_path = cur_path + 1 } } Show the result of one of the differential pathways for example: head(da_pathway_gene_full_list[[1]]) ## reaction genefamily ## 1 RXN-15513 UniRef90_A0A010ZHV5 ## 2 RXN-15513 UniRef90_A3N0J2 ## 3 RXN-15513 UniRef90_A6L1K6 ## 4 RXN-15513 UniRef90_A6L9K8 ## 5 GAPOXNPHOSPHN-RXN UniRef90_A0A024L2B0 ## 6 GAPOXNPHOSPHN-RXN UniRef90_A0A024L2Z2 2.10 Session Info devtools::session_info() ## â”€ Session info â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ ## setting value ## version R version 3.6.3 (2020-02-29) ## os Ubuntu 16.04.7 LTS ## system x86_64, linux-gnu ## ui RStudio ## language (EN) ## collate en_IN.UTF-8 ## ctype en_IN.UTF-8 ## tz Asia/Hong_Kong ## date 2022-07-21 ## rstudio 1.1.419 (server) ## pandoc 2.7.3 @ /usr/bin/ (via rmarkdown) ## ## â”€ Packages â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ ## ! package * version date (UTC) lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 3.6.3) ## ade4 1.7-17 2021-06-17 [1] CRAN (R 3.6.3) ## ALDEx2 1.18.0 2019-10-29 [1] Bioconductor ## annotate 1.64.0 2019-10-29 [1] Bioconductor ## AnnotationDbi * 1.48.0 2019-10-29 [1] Bioconductor ## ape 5.5 2021-04-25 [1] CRAN (R 3.6.3) ## assertthat 0.2.1 2019-03-21 [2] CRAN (R 3.6.3) ## backports 1.4.1 2021-12-13 [1] CRAN (R 3.6.3) ## base64enc 0.1-3 2015-07-28 [2] CRAN (R 3.6.3) ## bayesm 3.1-4 2019-10-15 [1] CRAN (R 3.6.3) ## biglm 0.9-2.1 2020-11-27 [1] CRAN (R 3.6.3) ## Biobase * 2.46.0 2019-10-29 [2] Bioconductor ## BiocGenerics * 0.32.0 2019-10-29 [2] Bioconductor ## BiocParallel * 1.20.1 2019-12-21 [2] Bioconductor ## biomformat 1.14.0 2019-10-29 [1] Bioconductor ## Biostrings 2.54.0 2019-10-29 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] CRAN (R 3.6.3) ## bit64 4.0.5 2020-08-30 [1] CRAN (R 3.6.3) ## bitops 1.0-7 2021-04-24 [1] CRAN (R 3.6.3) ## blob 1.2.2 2021-07-23 [1] CRAN (R 3.6.3) ## bookdown 0.24 2021-09-02 [1] CRAN (R 3.6.3) ## brio 1.1.3 2021-11-30 [2] CRAN (R 3.6.3) ## broom 0.7.12 2022-01-28 [1] CRAN (R 3.6.3) ## bslib 0.3.1 2021-10-06 [1] CRAN (R 3.6.3) ## cachem 1.0.5 2021-05-15 [1] CRAN (R 3.6.3) ## callr 3.7.0 2021-04-20 [2] CRAN (R 3.6.3) ## car 3.0-12 2021-11-06 [1] CRAN (R 3.6.3) ## carData 3.0-4 2020-05-22 [1] CRAN (R 3.6.3) ## caTools 1.18.2 2021-03-28 [1] CRAN (R 3.6.3) ## cellranger 1.1.0 2016-07-27 [1] CRAN (R 3.6.3) ## checkmate 2.0.0 2020-02-06 [1] CRAN (R 3.6.3) ## circlize * 0.4.13 2021-06-09 [1] CRAN (R 3.6.3) ## cli 3.1.0 2021-10-27 [1] CRAN (R 3.6.3) ## clue 0.3-59 2021-04-16 [1] CRAN (R 3.6.3) ## cluster 2.1.0 2019-06-19 [2] CRAN (R 3.6.3) ## coda 0.19-4 2020-09-30 [1] CRAN (R 3.6.3) ## codetools 0.2-16 2018-12-24 [2] CRAN (R 3.6.3) ## colorspace 2.0-2 2021-06-24 [1] CRAN (R 3.6.3) ## ComplexHeatmap * 2.2.0 2019-10-29 [1] Bioconductor ## compositions 2.0-2 2021-07-14 [1] CRAN (R 3.6.3) ## cowplot * 1.1.1 2020-12-30 [1] CRAN (R 3.6.3) ## crayon 1.5.0 2022-02-14 [1] CRAN (R 3.6.3) ## dada2 * 1.14.1 2020-02-22 [1] Bioconductor ## data.table * 1.14.0 2021-02-21 [1] CRAN (R 3.6.3) ## DBI 1.1.1 2021-01-15 [1] CRAN (R 3.6.3) ## dbplyr 2.1.1 2021-04-06 [1] CRAN (R 3.6.3) ## DelayedArray * 0.12.3 2020-04-09 [2] Bioconductor ## DelayedMatrixStats 1.8.0 2019-10-29 [1] Bioconductor ## DEoptimR 1.0-9 2021-05-24 [1] CRAN (R 3.6.3) ## desc 1.4.1 2022-03-06 [2] CRAN (R 3.6.3) ## DESeq2 * 1.26.0 2019-10-29 [1] Bioconductor ## devtools 2.4.3 2021-11-30 [1] CRAN (R 3.6.3) ## digest 0.6.29 2021-12-01 [1] CRAN (R 3.6.3) ## dplyr * 1.0.6 2021-05-05 [1] CRAN (R 3.6.3) ## edgeR 3.28.1 2020-02-26 [1] Bioconductor ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 3.6.3) ## EnhancedVolcano * 1.4.0 2019-10-29 [1] Bioconductor ## evaluate 0.15 2022-02-18 [2] CRAN (R 3.6.3) ## fansi 1.0.2 2022-01-14 [1] CRAN (R 3.6.3) ## farver 2.1.0 2021-02-28 [2] CRAN (R 3.6.3) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 3.6.3) ## fdrtool 1.2.17 2021-11-13 [1] CRAN (R 3.6.3) ## forcats * 0.5.1 2021-01-27 [1] CRAN (R 3.6.3) ## foreach 1.5.2 2022-02-02 [2] CRAN (R 3.6.3) ## foreign 0.8-75 2020-01-20 [2] CRAN (R 3.6.3) ## formatR 1.12 2022-03-31 [2] CRAN (R 3.6.3) ## Formula 1.2-4 2020-10-16 [1] CRAN (R 3.6.3) ## fs 1.5.2 2021-12-08 [1] CRAN (R 3.6.3) ## futile.logger 1.4.3 2016-07-10 [2] CRAN (R 3.6.3) ## futile.options 1.0.1 2018-04-20 [2] CRAN (R 3.6.3) ## genefilter 1.68.0 2019-10-29 [1] Bioconductor ## geneplotter 1.64.0 2019-10-29 [1] Bioconductor ## generics 0.1.2 2022-01-31 [1] CRAN (R 3.6.3) ## GenomeInfoDb * 1.22.1 2020-03-27 [2] Bioconductor ## GenomeInfoDbData 1.2.2 2020-08-24 [2] Bioconductor ## GenomicAlignments 1.22.1 2019-11-12 [1] Bioconductor ## GenomicRanges * 1.38.0 2019-10-29 [2] Bioconductor ## getopt 1.20.3 2019-03-22 [1] CRAN (R 3.6.3) ## GetoptLong 1.0.5 2020-12-15 [1] CRAN (R 3.6.3) ## GGally * 2.1.2 2021-06-21 [1] CRAN (R 3.6.3) ## ggbipart * 0.1.2 2022-07-20 [1] Github (pedroj/bipartite_plots@162f577) ## ggExtra * 0.9 2019-08-27 [1] CRAN (R 3.6.3) ## ggplot2 * 3.3.5 2021-06-25 [1] CRAN (R 3.6.3) ## ggpubr * 0.4.0 2020-06-27 [1] CRAN (R 3.6.3) ## ggrepel * 0.9.1 2021-01-15 [2] CRAN (R 3.6.3) ## ggsci * 2.9 2018-05-14 [1] CRAN (R 3.6.3) ## ggsignif 0.6.3 2021-09-09 [1] CRAN (R 3.6.3) ## glmnet 4.1-2 2021-06-24 [1] CRAN (R 3.6.3) ## GlobalOptions 0.1.2 2020-06-10 [1] CRAN (R 3.6.3) ## glue 1.6.1 2022-01-22 [1] CRAN (R 3.6.3) ## GMPR 0.1.3 2021-05-17 [1] local ## gplots 3.1.1 2020-11-28 [1] CRAN (R 3.6.3) ## graph 1.64.0 2019-10-29 [1] Bioconductor ## gridExtra 2.3 2017-09-09 [2] CRAN (R 3.6.3) ## gtable 0.3.0 2019-03-25 [2] CRAN (R 3.6.3) ## gtools 3.9.2 2021-06-06 [1] CRAN (R 3.6.3) ## haven 2.4.1 2021-04-23 [1] CRAN (R 3.6.3) ## highr 0.9 2021-04-16 [1] CRAN (R 3.6.3) ## Hmisc 4.5-0 2021-02-28 [1] CRAN (R 3.6.3) ## hms 1.1.1 2021-09-26 [1] CRAN (R 3.6.3) ## htmlTable 2.3.0 2021-10-12 [1] CRAN (R 3.6.3) ## htmltools 0.5.2 2021-08-25 [1] CRAN (R 3.6.3) ## htmlwidgets 1.5.4 2021-09-08 [2] CRAN (R 3.6.3) ## httpuv 1.6.1 2021-05-07 [1] CRAN (R 3.6.3) ## httr 1.4.3 2022-05-04 [2] CRAN (R 3.6.3) ## hwriter 1.3.2 2014-09-10 [1] CRAN (R 3.6.3) ## igraph 1.3.1 2022-04-20 [2] CRAN (R 3.6.3) ## IHW 1.14.0 2019-10-29 [1] Bioconductor ## IRanges * 2.20.2 2020-01-13 [2] Bioconductor ## iterators 1.0.14 2022-02-05 [2] CRAN (R 3.6.3) ## jpeg 0.1-9 2021-07-24 [1] CRAN (R 3.6.3) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 3.6.3) ## jsonlite 1.8.0 2022-02-22 [2] CRAN (R 3.6.3) ## KEGGgraph 1.46.0 2019-10-29 [1] Bioconductor ## KEGGREST 1.26.1 2019-11-06 [1] Bioconductor ## KernSmooth 2.23-16 2019-10-15 [2] CRAN (R 3.6.3) ## knitr 1.36 2021-09-29 [1] CRAN (R 3.6.3) ## labeling 0.4.2 2020-10-20 [2] CRAN (R 3.6.3) ## lambda.r 1.2.4 2019-09-18 [2] CRAN (R 3.6.3) ## later 1.3.0 2021-08-18 [2] CRAN (R 3.6.3) ## lattice * 0.20-38 2018-11-04 [2] CRAN (R 3.6.3) ## latticeExtra 0.6-29 2019-12-19 [1] CRAN (R 3.6.3) ## lazyeval 0.2.2 2019-03-15 [2] CRAN (R 3.6.3) ## lifecycle 1.0.1 2021-09-24 [1] CRAN (R 3.6.3) ## limma 3.42.2 2020-02-03 [2] Bioconductor ## locfit 1.5-9.4 2020-03-25 [1] CRAN (R 3.6.3) ## lpsymphony 1.14.0 2019-10-29 [1] Bioconductor (R 3.6.3) ## lubridate 1.7.10 2021-02-26 [1] CRAN (R 3.6.3) ## Maaslin2 1.7.3 2022-03-23 [1] Github (biobakery/maaslin2@8d090e4) ## magrittr * 2.0.2 2022-01-26 [1] CRAN (R 3.6.3) ## MASS 7.3-54 2021-05-03 [1] CRAN (R 3.6.3) ## Matrix 1.3-4 2021-06-01 [1] CRAN (R 3.6.3) ## matrixStats * 0.60.0 2021-07-26 [1] CRAN (R 3.6.3) ## mbzinb 0.2 2021-06-23 [1] local ## memoise 2.0.1 2021-11-26 [2] CRAN (R 3.6.3) ## metagenomeSeq 1.28.2 2020-02-03 [1] Bioconductor ## metamicrobiomeR 1.1 2021-02-03 [1] local ## mgcv 1.8-31 2019-11-09 [2] CRAN (R 3.6.3) ## microbiome 1.8.0 2019-10-29 [1] Bioconductor ## mime 0.12 2021-09-28 [2] CRAN (R 3.6.3) ## miniUI 0.1.1.1 2018-05-18 [1] CRAN (R 3.6.3) ## modelr 0.1.8 2020-05-19 [1] CRAN (R 3.6.3) ## multtest 2.42.0 2019-10-29 [2] Bioconductor ## munsell 0.5.0 2018-06-12 [2] CRAN (R 3.6.3) ## mvtnorm 1.1-3 2021-10-08 [1] CRAN (R 3.6.3) ## network * 1.17.1 2021-06-14 [1] CRAN (R 3.6.3) ## nlme 3.1-144 2020-02-06 [2] CRAN (R 3.6.3) ## nnet 7.3-12 2016-02-02 [2] CRAN (R 3.6.3) ## optparse 1.7.1 2021-10-08 [1] CRAN (R 3.6.3) ## org.Hs.eg.db * 3.10.0 2021-12-08 [1] Bioconductor ## pathview * 1.26.0 2019-10-29 [1] Bioconductor ## pcaPP 1.9-74 2021-04-23 [1] CRAN (R 3.6.3) ## permute * 0.9-5 2019-03-12 [1] CRAN (R 3.6.3) ## phyloseq * 1.30.0 2019-10-29 [1] Bioconductor ## pillar 1.7.0 2022-02-01 [1] CRAN (R 3.6.3) ## pkgbuild 1.3.1 2021-12-20 [2] CRAN (R 3.6.3) ## pkgconfig 2.0.3 2019-09-22 [2] CRAN (R 3.6.3) ## pkgload 1.2.4 2021-11-30 [2] CRAN (R 3.6.3) ## plotly * 4.10.0 2021-10-09 [1] CRAN (R 3.6.3) ## plyr 1.8.7 2022-03-24 [2] CRAN (R 3.6.3) ## png 0.1-7 2013-12-03 [1] CRAN (R 3.6.3) ## prettyunits 1.1.1 2020-01-24 [2] CRAN (R 3.6.3) ## processx 3.5.3 2022-03-25 [2] CRAN (R 3.6.3) ## promises 1.2.0.1 2021-02-11 [2] CRAN (R 3.6.3) ## protoclust 1.6.3 2019-01-31 [1] CRAN (R 3.6.3) ## ps 1.7.0 2022-04-23 [2] CRAN (R 3.6.3) ## pscl 1.5.5 2020-03-07 [1] CRAN (R 3.6.3) ## purrr * 0.3.4 2020-04-17 [2] CRAN (R 3.6.3) ## qvalue 2.18.0 2019-10-29 [1] Bioconductor ## R6 2.5.1 2021-08-19 [1] CRAN (R 3.6.3) ## RAIDA 1.0 2021-06-23 [1] local ## ranacapa 0.1.0 2021-06-18 [1] Github (gauravsk/ranacapa@58c0cab) ## RColorBrewer * 1.1-3 2022-04-03 [2] CRAN (R 3.6.3) ## Rcpp * 1.0.7 2021-07-07 [1] CRAN (R 3.6.3) ## RcppParallel 5.1.4 2021-05-04 [1] CRAN (R 3.6.3) ## RCurl 1.98-1.6 2022-02-08 [2] CRAN (R 3.6.3) ## readr * 2.0.0 2021-07-20 [1] CRAN (R 3.6.3) ## readxl * 1.3.1 2019-03-13 [1] CRAN (R 3.6.3) ## remotes 2.4.2 2021-11-30 [1] CRAN (R 3.6.3) ## reprex 2.0.1 2021-08-05 [1] CRAN (R 3.6.3) ## reshape 0.8.9 2022-04-12 [1] CRAN (R 3.6.3) ## reshape2 * 1.4.4 2020-04-09 [2] CRAN (R 3.6.3) ## Rgraphviz 2.30.0 2019-10-29 [1] Bioconductor ## rhdf5 2.30.1 2019-11-26 [1] Bioconductor ## Rhdf5lib 1.8.0 2019-10-29 [1] Bioconductor ## rJava 1.0-5 2021-09-24 [1] CRAN (R 3.6.3) ## rjson 0.2.20 2018-06-08 [1] CRAN (R 3.6.3) ## R rlang 1.0.2 &lt;NA&gt; [2] &lt;NA&gt; ## rmarkdown 2.11 2021-09-14 [1] CRAN (R 3.6.3) ## robustbase 0.93-9 2021-09-27 [1] CRAN (R 3.6.3) ## rpart 4.1-15 2019-04-12 [2] CRAN (R 3.6.3) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 3.6.3) ## Rsamtools 2.2.3 2020-02-23 [1] Bioconductor ## rsconnect 0.8.25 2021-11-19 [1] CRAN (R 3.6.3) ## RSQLite 2.2.7 2021-04-22 [1] CRAN (R 3.6.3) ## rstatix 0.7.0 2021-02-13 [1] CRAN (R 3.6.3) ## rstudioapi 0.13 2020-11-12 [2] CRAN (R 3.6.3) ## Rtsne 0.15 2018-11-10 [1] CRAN (R 3.6.3) ## rvest 1.0.2 2021-10-16 [1] CRAN (R 3.6.3) ## S4Vectors * 0.24.4 2020-04-09 [2] Bioconductor ## sass 0.4.0 2021-05-12 [1] CRAN (R 3.6.3) ## scales 1.2.0 2022-04-13 [2] CRAN (R 3.6.3) ## seqinr * 4.2-8 2021-06-09 [1] CRAN (R 3.6.3) ## sessioninfo 1.2.2 2021-12-06 [2] CRAN (R 3.6.3) ## shape 1.4.6 2021-05-19 [1] CRAN (R 3.6.3) ## shiny 1.7.1 2021-10-02 [1] CRAN (R 3.6.3) ## ShortRead 1.44.3 2020-02-03 [1] Bioconductor ## slam 0.1-49 2021-11-17 [1] CRAN (R 3.6.3) ## sna 2.6 2020-10-06 [1] CRAN (R 3.6.3) ## statnet.common 4.5.0 2021-06-05 [1] CRAN (R 3.6.3) ## VP stringi 1.7.6 2021-08-25 [2] CRAN (R 3.6.3) (on disk 1.7.4) ## stringr * 1.4.0 2019-02-10 [2] CRAN (R 3.6.3) ## SummarizedExperiment * 1.16.1 2019-12-19 [2] Bioconductor ## survival 3.1-8 2019-12-03 [2] CRAN (R 3.6.3) ## tensorA 0.36.2 2020-11-19 [1] CRAN (R 3.6.3) ## testthat 3.1.4 2022-04-26 [2] CRAN (R 3.6.3) ## textshape 1.7.3 2021-05-28 [1] CRAN (R 3.6.3) ## tibble * 3.1.6 2021-11-07 [1] CRAN (R 3.6.3) ## tidyr * 1.2.0 2022-02-01 [1] CRAN (R 3.6.3) ## tidyselect 1.1.1 2021-04-30 [1] CRAN (R 3.6.3) ## tidyverse * 1.3.1 2021-04-15 [1] CRAN (R 3.6.3) ## tzdb 0.2.0 2021-10-27 [1] CRAN (R 3.6.3) ## UpSetR 1.4.0 2019-05-22 [1] CRAN (R 3.6.3) ## usethis 2.1.6 2022-05-25 [2] CRAN (R 3.6.3) ## utf8 1.2.2 2021-07-24 [1] CRAN (R 3.6.3) ## vctrs 0.3.8 2021-04-29 [1] CRAN (R 3.6.3) ## vegan * 2.5-7 2020-11-28 [1] CRAN (R 3.6.3) ## VennDiagram 1.7.1 2021-12-02 [1] CRAN (R 3.6.3) ## viridisLite 0.4.0 2021-04-13 [2] CRAN (R 3.6.3) ## vroom 1.5.7 2021-11-30 [1] CRAN (R 3.6.3) ## wesanderson * 0.3.6.9000 2021-07-21 [1] Github (karthik/wesanderson@651c944) ## withr 2.4.3 2021-11-30 [1] CRAN (R 3.6.3) ## Wrench 1.4.0 2019-10-29 [1] Bioconductor ## xfun 0.23 2021-05-15 [1] CRAN (R 3.6.3) ## xlsx * 0.6.5 2020-11-10 [1] CRAN (R 3.6.3) ## xlsxjars 0.6.1 2014-08-22 [1] CRAN (R 3.6.3) ## XMAS * 0.0.0.9000 2022-03-23 [1] local ## XML 3.99-0.3 2020-01-20 [1] CRAN (R 3.6.3) ## xml2 1.3.3 2021-11-30 [2] CRAN (R 3.6.3) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 3.6.3) ## XVector 0.26.0 2019-10-29 [2] Bioconductor ## xviz * 1.1.0 2021-01-14 [1] local ## yaml 2.2.2 2022-01-25 [1] CRAN (R 3.6.3) ## zlibbioc 1.32.0 2019-10-29 [2] Bioconductor ## ## [1] /share/home/tongbangzhuo/R/x86_64-pc-linux-gnu-library/3.6 ## [2] /opt/R-3.6.3/lib/R/library ## ## V â”€â”€ Loaded and on-disk version mismatch. ## P â”€â”€ Loaded and on-disk path mismatch. ## R â”€â”€ Package was removed from disk. ## ## â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ "],["preprocess-of-functional-analysis-of-kegg.html", "Chapter 3 Preprocess of Functional Analysis of KEGG 3.1 Environment Setup 3.2 Process pipeline output 3.3 Session info", " Chapter 3 Preprocess of Functional Analysis of KEGG 3.1 Environment Setup setwd(&#39;/share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Kegg/Analysis_template/&#39;) 3.2 Process pipeline output Demo data were saved in folder Demo_data: Pipeline_Out. Folder containing all samplesâ€™ pipeline result. metadata.xls. Metadata of samples. 3.2.1 Merge data from humann2 pipeline (Kegg database) 3.2.1.1 List folder structure of humann2 pipeline result. Four files should be included in humann2_kegg folder of each sample: *_genefamilies.tsv (KEGG gene profile file, rows are gene names consist of SpeciesCode:GeneName, columns are samples, unit of abundance is RPK) *.log *_pathabundance.tsv *_pathcoverage.tsv tree -L 4 /share/projects/Analytics/analytics/Function_Analysis/Tongbangzhuo/Phase1/Kegg/Demo_data/Pipeline_Out/14286/ ## /share/projects/Analytics/analytics/Function_Analysis/Tongbangzhuo/Phase1/Kegg/Demo_data/Pipeline_Out/14286/ ## â””â”€â”€ humann2_kegg ## â”œâ”€â”€ 14286_genefamilies.tsv ## â”œâ”€â”€ 14286.log ## â”œâ”€â”€ 14286_pathabundance.tsv ## â””â”€â”€ 14286_pathcoverage.tsv ## ## 1 directory, 4 files 3.2.1.2 Use Script merge_metaphlan_tables.py from humann2 to merge all gene_family profile files. In this chunk, we merge all *genefamilies.tsv into one file and edit the colnames of the table input: genefamilies.tsv, path of all genefamilies.tsv files output: file name of merged profile table. ## Remove previously merged profile #docker run -i --rm -u $(id -u):$(id -g) -v /share/projects/Analytics/analytics/Function_Analysis/Tongbangzhuo/Phase1/Kegg:/in harbor.xbiome.com/xbiome/environments/humann2:2.8.1-2b8c5c3 bash -c &quot;rm /in/Demo_data/merged_profile.tsv&quot; ## Start merging profile files docker run -i --rm -u $(id -u):$(id -g) -v /share/projects/Analytics/analytics/Function_Analysis/Tongbangzhuo/Phase1/Kegg:/in harbor.xbiome.com/xbiome/environments/humann2:2.8.1-2b8c5c3 bash -c &quot;merge_metaphlan_tables.py /in/Demo_data/Pipeline_Out/*/humann2_kegg/*genefamilies.tsv &gt; /in/Demo_data/merged_profile.tsv&quot; ## Remove suffix in sample name sed -i &#39;s#_genefamilies##g&#39; /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Kegg/Demo_data/merged_profile.tsv sed -i &#39;s$^ID$# Gene Family$g&#39; /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Kegg/Demo_data/merged_profile.tsv 3.2.1.3 Transform all species code with species name in merged profile file &amp; map kegg gene ID to KO entries In this chunk, we transform the species code to species names and convert the kegg gene id to K numbers. input1: *profile.tsv input2: path of kegg database output: kegg, renamed profile table. (suffix must be .kegg) ## Mapping file prokaryotes.dat.gz was used to map species code to species names and map kegg gene id to K numbers. ## Version of prokaryotes.dat.gz should be consistent with the version of Kegg database. ## Note!!!! file name of output must ends with &quot;.kegg&quot; python /share/projects/Analytics/analytics/Function_Analysis/Tongbangzhuo/Phase1/Kegg/Scripts/rename-kegg-gene.py -in /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Kegg/Demo_data/merged_profile.tsv -db /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Kegg/Scripts/db/ -out /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Kegg/Demo_data/merged.kegg -species 1 tail -n 2 /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Kegg/Demo_data/merged.kegg ## zpr:ZPR_4648 0.0 0.0 5.8609585979 3.2134754484 0.0 9.130038598 3.937457596 17.7084295999 0.0 0.0 ## zpr:ZPR_4648|s_Zunongwangia_profunda 0.0 0.0 5.8609585979 3.2134754484 0.0 9.130038598 3.937457596 17.7084295999 0.0 0.0 3.2.1.4 Remove unmapped row in merged profile file In this chunk, we remove unmapped row from merged profile file. ## Since unmapped row doesn&#39;t convey any information we need, we remove unmapped row from merged profile file. grep -v &quot;^UNMAPPED&quot; /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Kegg/Demo_data/merged.kegg &gt; /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Kegg/Demo_data/merged_remove_unmapped.txt 3.2.1.5 Re-scale (Total Sum Scale) &amp; map kegg gene entries to KO entries In this chunk, we re-scale the profile of each feature by divding their RPK value by the column sum (sum of RPK values within one sample). input: the *remove_unmapped.txt file from last step output1: *knumber.txt, the profile table of all k numbers in all samples output2: input, a list including all K numers in knumber.txt ## In this chunk we take merged_remove_unmapped.txt from last step as input, re-scale all features abundance into relative abundance (sum to 1). We also extracted the abundance of K numbers and saved in *knumber.txt python /share/projects/Analytics/analytics/Function_Analysis/Tongbangzhuo/Phase1/Kegg/Scripts/reminpath.py -i /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Kegg/Demo_data/merged_remove_unmapped.txt -k /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Kegg/Demo_data/merged_knumber.txt -m /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Kegg/Demo_data/merged.input 3.2.1.6 Use minpath to extract the mapping information between Knumers and KEGG pathways In this chunk, we use minpath to extract the mapping relation between K numers and KEGG pathways and generate report and details for the calculation of pathway abundance. input: *input from last step output1: *report, report of minpath output2: *details, detail of minpath python /share/work/runtime/softwares/MinPath/MinPath.py -ko /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Kegg/Demo_data/merged.input -report /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Kegg/Demo_data/merged.report -details /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Kegg/Demo_data/merged.details &gt; /dev/null 2&gt;&amp;1 3.2.1.7 Calculate the abundance of Kegg pathways In this chunk we calculate the abundance of KEGG pathways. Since multiple K numbers may belong to the same Pathway, we provided three methods to calculate the abundance of pathway from multiple K numbers: Harmonic Mean Median Average of top 50% abundance KOs input1: *report from last step input2: *details from last step input3: *remove_unmapped.txt from chunk remove unmapped row, unit for each feature is RPK. output: *pathway.txt, pathway profile file ## In this chunk, we use the minpath report (stroing the mapping information between KO and Kegg pathway) and abundance table (unit of feature is RPK) of KO to estimate the abundance of pathways. ## Note: Becasue minpath mapping file doesn&#39;t include the UMAPPED entry, we need to add UMAPPED entry to the output manually after the calcualtion of pathway abundance. python /share/projects/Analytics/analytics/Function_Analysis/Tongbangzhuo/Phase1/Kegg/Scripts/kegg_abundance.py -path /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Kegg/Demo_data/merged.report -detail /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Kegg/Demo_data/merged.details -in /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Kegg/Demo_data/merged_remove_unmapped.txt -out /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Kegg/Demo_data/merged_pathway.txt ## Add UNMAPPED row to pathway abundance table grep &quot;UNMAPPED&quot; /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Kegg/Demo_data/merged.kegg | grep -v &quot;|&quot; &gt;&gt; /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Kegg/Demo_data/merged_pathway.txt ## Quick view of kegg pathway profile head /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Kegg/Demo_data/merged_pathway.txt ## # Gene Family 14286 14287 14288 14289 14290 14291 14292 14293 14294 14295 ## 00010 5947.956833127901 206.4171318373 820.2781166492 3347.7553326125 201.14052381119998 171.59917911649998 1334.4083721097 165.99768445080005 1421.4703949554 0.0 ## 00020 3188.38915159045 584.3494875558001 1174.9152938714 4129.5363162696 637.00629415665 622.07045936685 1595.90621966225 594.7157296549999 1335.3594613054997 0.0 ## 00030 189.9400101 0.0 67.70359926875 1562.3995269805 21.5439298511 21.7629168057 183.8472359562 52.283541589500004 117.99324261619999 0.0 ## 00040 53.318527655100006 33.326521076700004 65.30936012689999 258.9344738527 24.5995484145 0 43.297908892200006 18.725243294600002 0 0.0 ## 00051 953.9344640029 125.2205068581 91.036795328 1801.0554231356 34.234599064899996 70.633450268 243.828461326 16.806722689700006 1070.9931901685 0.0 ## 00052 530.0746804299 300.271065183 193.8664536295 2191.9950307487 163.3999406518 48.198882973 381.77839881660003 74.449850811 2192.5614262354 0.0 ## 00053 0 0 0 0 0 0 0 0 0 0 ## 00061 43.728001148500006 0 156.8103154342 563.7285164538 70.5150046695 0 559.1490593607 0 147.3375876432 0.0 ## 00071 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 3.3 Session info devtools::session_info() ## â”€ Session info â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ ## setting value ## version R version 3.6.3 (2020-02-29) ## os Ubuntu 16.04.7 LTS ## system x86_64, linux-gnu ## ui RStudio ## language (EN) ## collate en_IN.UTF-8 ## ctype en_IN.UTF-8 ## tz Asia/Hong_Kong ## date 2022-07-21 ## rstudio 1.1.419 (server) ## pandoc 2.7.3 @ /usr/bin/ (via rmarkdown) ## ## â”€ Packages â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ ## ! package * version date (UTC) lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 3.6.3) ## ade4 1.7-17 2021-06-17 [1] CRAN (R 3.6.3) ## ALDEx2 1.18.0 2019-10-29 [1] Bioconductor ## annotate 1.64.0 2019-10-29 [1] Bioconductor ## AnnotationDbi * 1.48.0 2019-10-29 [1] Bioconductor ## ape 5.5 2021-04-25 [1] CRAN (R 3.6.3) ## assertthat 0.2.1 2019-03-21 [2] CRAN (R 3.6.3) ## backports 1.4.1 2021-12-13 [1] CRAN (R 3.6.3) ## base64enc 0.1-3 2015-07-28 [2] CRAN (R 3.6.3) ## bayesm 3.1-4 2019-10-15 [1] CRAN (R 3.6.3) ## biglm 0.9-2.1 2020-11-27 [1] CRAN (R 3.6.3) ## Biobase * 2.46.0 2019-10-29 [2] Bioconductor ## BiocGenerics * 0.32.0 2019-10-29 [2] Bioconductor ## BiocParallel * 1.20.1 2019-12-21 [2] Bioconductor ## biomformat 1.14.0 2019-10-29 [1] Bioconductor ## Biostrings 2.54.0 2019-10-29 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] CRAN (R 3.6.3) ## bit64 4.0.5 2020-08-30 [1] CRAN (R 3.6.3) ## bitops 1.0-7 2021-04-24 [1] CRAN (R 3.6.3) ## blob 1.2.2 2021-07-23 [1] CRAN (R 3.6.3) ## bookdown 0.24 2021-09-02 [1] CRAN (R 3.6.3) ## brio 1.1.3 2021-11-30 [2] CRAN (R 3.6.3) ## broom 0.7.12 2022-01-28 [1] CRAN (R 3.6.3) ## bslib 0.3.1 2021-10-06 [1] CRAN (R 3.6.3) ## cachem 1.0.5 2021-05-15 [1] CRAN (R 3.6.3) ## callr 3.7.0 2021-04-20 [2] CRAN (R 3.6.3) ## car 3.0-12 2021-11-06 [1] CRAN (R 3.6.3) ## carData 3.0-4 2020-05-22 [1] CRAN (R 3.6.3) ## caTools 1.18.2 2021-03-28 [1] CRAN (R 3.6.3) ## cellranger 1.1.0 2016-07-27 [1] CRAN (R 3.6.3) ## checkmate 2.0.0 2020-02-06 [1] CRAN (R 3.6.3) ## circlize * 0.4.13 2021-06-09 [1] CRAN (R 3.6.3) ## cli 3.1.0 2021-10-27 [1] CRAN (R 3.6.3) ## clue 0.3-59 2021-04-16 [1] CRAN (R 3.6.3) ## cluster 2.1.0 2019-06-19 [2] CRAN (R 3.6.3) ## coda 0.19-4 2020-09-30 [1] CRAN (R 3.6.3) ## codetools 0.2-16 2018-12-24 [2] CRAN (R 3.6.3) ## colorspace 2.0-2 2021-06-24 [1] CRAN (R 3.6.3) ## ComplexHeatmap * 2.2.0 2019-10-29 [1] Bioconductor ## compositions 2.0-2 2021-07-14 [1] CRAN (R 3.6.3) ## cowplot * 1.1.1 2020-12-30 [1] CRAN (R 3.6.3) ## crayon 1.5.0 2022-02-14 [1] CRAN (R 3.6.3) ## dada2 * 1.14.1 2020-02-22 [1] Bioconductor ## data.table * 1.14.0 2021-02-21 [1] CRAN (R 3.6.3) ## DBI 1.1.1 2021-01-15 [1] CRAN (R 3.6.3) ## dbplyr 2.1.1 2021-04-06 [1] CRAN (R 3.6.3) ## DelayedArray * 0.12.3 2020-04-09 [2] Bioconductor ## DelayedMatrixStats 1.8.0 2019-10-29 [1] Bioconductor ## DEoptimR 1.0-9 2021-05-24 [1] CRAN (R 3.6.3) ## desc 1.4.1 2022-03-06 [2] CRAN (R 3.6.3) ## DESeq2 * 1.26.0 2019-10-29 [1] Bioconductor ## devtools 2.4.3 2021-11-30 [1] CRAN (R 3.6.3) ## digest 0.6.29 2021-12-01 [1] CRAN (R 3.6.3) ## dplyr * 1.0.6 2021-05-05 [1] CRAN (R 3.6.3) ## edgeR 3.28.1 2020-02-26 [1] Bioconductor ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 3.6.3) ## EnhancedVolcano * 1.4.0 2019-10-29 [1] Bioconductor ## evaluate 0.15 2022-02-18 [2] CRAN (R 3.6.3) ## fansi 1.0.2 2022-01-14 [1] CRAN (R 3.6.3) ## farver 2.1.0 2021-02-28 [2] CRAN (R 3.6.3) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 3.6.3) ## fdrtool 1.2.17 2021-11-13 [1] CRAN (R 3.6.3) ## forcats * 0.5.1 2021-01-27 [1] CRAN (R 3.6.3) ## foreach 1.5.2 2022-02-02 [2] CRAN (R 3.6.3) ## foreign 0.8-75 2020-01-20 [2] CRAN (R 3.6.3) ## formatR 1.12 2022-03-31 [2] CRAN (R 3.6.3) ## Formula 1.2-4 2020-10-16 [1] CRAN (R 3.6.3) ## fs 1.5.2 2021-12-08 [1] CRAN (R 3.6.3) ## futile.logger 1.4.3 2016-07-10 [2] CRAN (R 3.6.3) ## futile.options 1.0.1 2018-04-20 [2] CRAN (R 3.6.3) ## genefilter 1.68.0 2019-10-29 [1] Bioconductor ## geneplotter 1.64.0 2019-10-29 [1] Bioconductor ## generics 0.1.2 2022-01-31 [1] CRAN (R 3.6.3) ## GenomeInfoDb * 1.22.1 2020-03-27 [2] Bioconductor ## GenomeInfoDbData 1.2.2 2020-08-24 [2] Bioconductor ## GenomicAlignments 1.22.1 2019-11-12 [1] Bioconductor ## GenomicRanges * 1.38.0 2019-10-29 [2] Bioconductor ## getopt 1.20.3 2019-03-22 [1] CRAN (R 3.6.3) ## GetoptLong 1.0.5 2020-12-15 [1] CRAN (R 3.6.3) ## GGally * 2.1.2 2021-06-21 [1] CRAN (R 3.6.3) ## ggbipart * 0.1.2 2022-07-20 [1] Github (pedroj/bipartite_plots@162f577) ## ggExtra * 0.9 2019-08-27 [1] CRAN (R 3.6.3) ## ggplot2 * 3.3.5 2021-06-25 [1] CRAN (R 3.6.3) ## ggpubr * 0.4.0 2020-06-27 [1] CRAN (R 3.6.3) ## ggrepel * 0.9.1 2021-01-15 [2] CRAN (R 3.6.3) ## ggsci * 2.9 2018-05-14 [1] CRAN (R 3.6.3) ## ggsignif 0.6.3 2021-09-09 [1] CRAN (R 3.6.3) ## glmnet 4.1-2 2021-06-24 [1] CRAN (R 3.6.3) ## GlobalOptions 0.1.2 2020-06-10 [1] CRAN (R 3.6.3) ## glue 1.6.1 2022-01-22 [1] CRAN (R 3.6.3) ## GMPR 0.1.3 2021-05-17 [1] local ## gplots 3.1.1 2020-11-28 [1] CRAN (R 3.6.3) ## graph 1.64.0 2019-10-29 [1] Bioconductor ## gridExtra 2.3 2017-09-09 [2] CRAN (R 3.6.3) ## gtable 0.3.0 2019-03-25 [2] CRAN (R 3.6.3) ## gtools 3.9.2 2021-06-06 [1] CRAN (R 3.6.3) ## haven 2.4.1 2021-04-23 [1] CRAN (R 3.6.3) ## highr 0.9 2021-04-16 [1] CRAN (R 3.6.3) ## Hmisc 4.5-0 2021-02-28 [1] CRAN (R 3.6.3) ## hms 1.1.1 2021-09-26 [1] CRAN (R 3.6.3) ## htmlTable 2.3.0 2021-10-12 [1] CRAN (R 3.6.3) ## htmltools 0.5.2 2021-08-25 [1] CRAN (R 3.6.3) ## htmlwidgets 1.5.4 2021-09-08 [2] CRAN (R 3.6.3) ## httpuv 1.6.1 2021-05-07 [1] CRAN (R 3.6.3) ## httr 1.4.3 2022-05-04 [2] CRAN (R 3.6.3) ## hwriter 1.3.2 2014-09-10 [1] CRAN (R 3.6.3) ## igraph 1.3.1 2022-04-20 [2] CRAN (R 3.6.3) ## IHW 1.14.0 2019-10-29 [1] Bioconductor ## IRanges * 2.20.2 2020-01-13 [2] Bioconductor ## iterators 1.0.14 2022-02-05 [2] CRAN (R 3.6.3) ## jpeg 0.1-9 2021-07-24 [1] CRAN (R 3.6.3) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 3.6.3) ## jsonlite 1.8.0 2022-02-22 [2] CRAN (R 3.6.3) ## KEGGgraph 1.46.0 2019-10-29 [1] Bioconductor ## KEGGREST 1.26.1 2019-11-06 [1] Bioconductor ## KernSmooth 2.23-16 2019-10-15 [2] CRAN (R 3.6.3) ## knitr 1.36 2021-09-29 [1] CRAN (R 3.6.3) ## labeling 0.4.2 2020-10-20 [2] CRAN (R 3.6.3) ## lambda.r 1.2.4 2019-09-18 [2] CRAN (R 3.6.3) ## later 1.3.0 2021-08-18 [2] CRAN (R 3.6.3) ## lattice * 0.20-38 2018-11-04 [2] CRAN (R 3.6.3) ## latticeExtra 0.6-29 2019-12-19 [1] CRAN (R 3.6.3) ## lazyeval 0.2.2 2019-03-15 [2] CRAN (R 3.6.3) ## lifecycle 1.0.1 2021-09-24 [1] CRAN (R 3.6.3) ## limma 3.42.2 2020-02-03 [2] Bioconductor ## locfit 1.5-9.4 2020-03-25 [1] CRAN (R 3.6.3) ## lpsymphony 1.14.0 2019-10-29 [1] Bioconductor (R 3.6.3) ## lubridate 1.7.10 2021-02-26 [1] CRAN (R 3.6.3) ## Maaslin2 1.7.3 2022-03-23 [1] Github (biobakery/maaslin2@8d090e4) ## magrittr * 2.0.2 2022-01-26 [1] CRAN (R 3.6.3) ## MASS 7.3-54 2021-05-03 [1] CRAN (R 3.6.3) ## Matrix 1.3-4 2021-06-01 [1] CRAN (R 3.6.3) ## matrixStats * 0.60.0 2021-07-26 [1] CRAN (R 3.6.3) ## mbzinb 0.2 2021-06-23 [1] local ## memoise 2.0.1 2021-11-26 [2] CRAN (R 3.6.3) ## metagenomeSeq 1.28.2 2020-02-03 [1] Bioconductor ## metamicrobiomeR 1.1 2021-02-03 [1] local ## mgcv 1.8-31 2019-11-09 [2] CRAN (R 3.6.3) ## microbiome 1.8.0 2019-10-29 [1] Bioconductor ## mime 0.12 2021-09-28 [2] CRAN (R 3.6.3) ## miniUI 0.1.1.1 2018-05-18 [1] CRAN (R 3.6.3) ## modelr 0.1.8 2020-05-19 [1] CRAN (R 3.6.3) ## multtest 2.42.0 2019-10-29 [2] Bioconductor ## munsell 0.5.0 2018-06-12 [2] CRAN (R 3.6.3) ## mvtnorm 1.1-3 2021-10-08 [1] CRAN (R 3.6.3) ## network * 1.17.1 2021-06-14 [1] CRAN (R 3.6.3) ## nlme 3.1-144 2020-02-06 [2] CRAN (R 3.6.3) ## nnet 7.3-12 2016-02-02 [2] CRAN (R 3.6.3) ## optparse 1.7.1 2021-10-08 [1] CRAN (R 3.6.3) ## org.Hs.eg.db * 3.10.0 2021-12-08 [1] Bioconductor ## pathview * 1.26.0 2019-10-29 [1] Bioconductor ## pcaPP 1.9-74 2021-04-23 [1] CRAN (R 3.6.3) ## permute * 0.9-5 2019-03-12 [1] CRAN (R 3.6.3) ## phyloseq * 1.30.0 2019-10-29 [1] Bioconductor ## pillar 1.7.0 2022-02-01 [1] CRAN (R 3.6.3) ## pkgbuild 1.3.1 2021-12-20 [2] CRAN (R 3.6.3) ## pkgconfig 2.0.3 2019-09-22 [2] CRAN (R 3.6.3) ## pkgload 1.2.4 2021-11-30 [2] CRAN (R 3.6.3) ## plotly * 4.10.0 2021-10-09 [1] CRAN (R 3.6.3) ## plyr 1.8.7 2022-03-24 [2] CRAN (R 3.6.3) ## png 0.1-7 2013-12-03 [1] CRAN (R 3.6.3) ## prettyunits 1.1.1 2020-01-24 [2] CRAN (R 3.6.3) ## processx 3.5.3 2022-03-25 [2] CRAN (R 3.6.3) ## promises 1.2.0.1 2021-02-11 [2] CRAN (R 3.6.3) ## protoclust 1.6.3 2019-01-31 [1] CRAN (R 3.6.3) ## ps 1.7.0 2022-04-23 [2] CRAN (R 3.6.3) ## pscl 1.5.5 2020-03-07 [1] CRAN (R 3.6.3) ## purrr * 0.3.4 2020-04-17 [2] CRAN (R 3.6.3) ## qvalue 2.18.0 2019-10-29 [1] Bioconductor ## R6 2.5.1 2021-08-19 [1] CRAN (R 3.6.3) ## RAIDA 1.0 2021-06-23 [1] local ## ranacapa 0.1.0 2021-06-18 [1] Github (gauravsk/ranacapa@58c0cab) ## RColorBrewer * 1.1-3 2022-04-03 [2] CRAN (R 3.6.3) ## Rcpp * 1.0.7 2021-07-07 [1] CRAN (R 3.6.3) ## RcppParallel 5.1.4 2021-05-04 [1] CRAN (R 3.6.3) ## RCurl 1.98-1.6 2022-02-08 [2] CRAN (R 3.6.3) ## readr * 2.0.0 2021-07-20 [1] CRAN (R 3.6.3) ## readxl * 1.3.1 2019-03-13 [1] CRAN (R 3.6.3) ## remotes 2.4.2 2021-11-30 [1] CRAN (R 3.6.3) ## reprex 2.0.1 2021-08-05 [1] CRAN (R 3.6.3) ## reshape 0.8.9 2022-04-12 [1] CRAN (R 3.6.3) ## reshape2 * 1.4.4 2020-04-09 [2] CRAN (R 3.6.3) ## Rgraphviz 2.30.0 2019-10-29 [1] Bioconductor ## rhdf5 2.30.1 2019-11-26 [1] Bioconductor ## Rhdf5lib 1.8.0 2019-10-29 [1] Bioconductor ## rJava 1.0-5 2021-09-24 [1] CRAN (R 3.6.3) ## rjson 0.2.20 2018-06-08 [1] CRAN (R 3.6.3) ## R rlang 1.0.2 &lt;NA&gt; [2] &lt;NA&gt; ## rmarkdown 2.11 2021-09-14 [1] CRAN (R 3.6.3) ## robustbase 0.93-9 2021-09-27 [1] CRAN (R 3.6.3) ## rpart 4.1-15 2019-04-12 [2] CRAN (R 3.6.3) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 3.6.3) ## Rsamtools 2.2.3 2020-02-23 [1] Bioconductor ## rsconnect 0.8.25 2021-11-19 [1] CRAN (R 3.6.3) ## RSQLite 2.2.7 2021-04-22 [1] CRAN (R 3.6.3) ## rstatix 0.7.0 2021-02-13 [1] CRAN (R 3.6.3) ## rstudioapi 0.13 2020-11-12 [2] CRAN (R 3.6.3) ## Rtsne 0.15 2018-11-10 [1] CRAN (R 3.6.3) ## rvest 1.0.2 2021-10-16 [1] CRAN (R 3.6.3) ## S4Vectors * 0.24.4 2020-04-09 [2] Bioconductor ## sass 0.4.0 2021-05-12 [1] CRAN (R 3.6.3) ## scales 1.2.0 2022-04-13 [2] CRAN (R 3.6.3) ## seqinr * 4.2-8 2021-06-09 [1] CRAN (R 3.6.3) ## sessioninfo 1.2.2 2021-12-06 [2] CRAN (R 3.6.3) ## shape 1.4.6 2021-05-19 [1] CRAN (R 3.6.3) ## shiny 1.7.1 2021-10-02 [1] CRAN (R 3.6.3) ## ShortRead 1.44.3 2020-02-03 [1] Bioconductor ## slam 0.1-49 2021-11-17 [1] CRAN (R 3.6.3) ## sna 2.6 2020-10-06 [1] CRAN (R 3.6.3) ## statnet.common 4.5.0 2021-06-05 [1] CRAN (R 3.6.3) ## VP stringi 1.7.6 2021-08-25 [2] CRAN (R 3.6.3) (on disk 1.7.4) ## stringr * 1.4.0 2019-02-10 [2] CRAN (R 3.6.3) ## SummarizedExperiment * 1.16.1 2019-12-19 [2] Bioconductor ## survival 3.1-8 2019-12-03 [2] CRAN (R 3.6.3) ## tensorA 0.36.2 2020-11-19 [1] CRAN (R 3.6.3) ## testthat 3.1.4 2022-04-26 [2] CRAN (R 3.6.3) ## textshape 1.7.3 2021-05-28 [1] CRAN (R 3.6.3) ## tibble * 3.1.6 2021-11-07 [1] CRAN (R 3.6.3) ## tidyr * 1.2.0 2022-02-01 [1] CRAN (R 3.6.3) ## tidyselect 1.1.1 2021-04-30 [1] CRAN (R 3.6.3) ## tidyverse * 1.3.1 2021-04-15 [1] CRAN (R 3.6.3) ## tzdb 0.2.0 2021-10-27 [1] CRAN (R 3.6.3) ## UpSetR 1.4.0 2019-05-22 [1] CRAN (R 3.6.3) ## usethis 2.1.6 2022-05-25 [2] CRAN (R 3.6.3) ## utf8 1.2.2 2021-07-24 [1] CRAN (R 3.6.3) ## vctrs 0.3.8 2021-04-29 [1] CRAN (R 3.6.3) ## vegan * 2.5-7 2020-11-28 [1] CRAN (R 3.6.3) ## VennDiagram 1.7.1 2021-12-02 [1] CRAN (R 3.6.3) ## viridisLite 0.4.0 2021-04-13 [2] CRAN (R 3.6.3) ## vroom 1.5.7 2021-11-30 [1] CRAN (R 3.6.3) ## wesanderson * 0.3.6.9000 2021-07-21 [1] Github (karthik/wesanderson@651c944) ## withr 2.4.3 2021-11-30 [1] CRAN (R 3.6.3) ## Wrench 1.4.0 2019-10-29 [1] Bioconductor ## xfun 0.23 2021-05-15 [1] CRAN (R 3.6.3) ## xlsx * 0.6.5 2020-11-10 [1] CRAN (R 3.6.3) ## xlsxjars 0.6.1 2014-08-22 [1] CRAN (R 3.6.3) ## XMAS * 0.0.0.9000 2022-03-23 [1] local ## XML 3.99-0.3 2020-01-20 [1] CRAN (R 3.6.3) ## xml2 1.3.3 2021-11-30 [2] CRAN (R 3.6.3) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 3.6.3) ## XVector 0.26.0 2019-10-29 [2] Bioconductor ## xviz * 1.1.0 2021-01-14 [1] local ## yaml 2.2.2 2022-01-25 [1] CRAN (R 3.6.3) ## zlibbioc 1.32.0 2019-10-29 [2] Bioconductor ## ## [1] /share/home/tongbangzhuo/R/x86_64-pc-linux-gnu-library/3.6 ## [2] /opt/R-3.6.3/lib/R/library ## ## V â”€â”€ Loaded and on-disk version mismatch. ## P â”€â”€ Loaded and on-disk path mismatch. ## R â”€â”€ Package was removed from disk. ## ## â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ "],["functional-analysis-of-kegg.html", "Chapter 4 Functional Analysis of KEGG 4.1 Environment setup 4.2 Read in processed profile table from script Functional_Analysis_Kegg_Pathway_preprocess.Rmd 4.3 Pre-process pathway data 4.4 Standard Analysis 4.5 Differential analysis 4.6 Session information", " Chapter 4 Functional Analysis of KEGG 4.1 Environment setup 4.2 Read in processed profile table from script Functional_Analysis_Kegg_Pathway_preprocess.Rmd Here we use example data from Functional_Analysis_Kegg_Pathway_preprocess.Rmd and demo metadata created from Create_Demo_Metadata. ../Demo_data/merged_pathway.txt, in merged pathway file, rows are pathways, columns are samples. ../Demo_data/Demo_metadata.xls, in metadata file, rows are samples, columns are group info. ## Some pathway ID start with 0, thus we need to read in first column as character object. pathway_profile_tbl &lt;- read.table(&#39;/share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Kegg/Demo_data/merged_pathway.txt&#39;,header = TRUE, comment.char = &#39;!&#39;, stringsAsFactors = FALSE , colClasses = c(&#39;# Gene Family&#39; = &#39;character&#39;), na.strings = &#39;&#39;, sep=&#39;\\t&#39;, check.names = FALSE) ## We can map pathway ID to pathway names with the mapping file in minpath. ## But it is not suggested to do the mapping in this step, because pathway names contain species characters, but we read in mapping file here anyways. ID2Name_mapping_tbl &lt;- read.table(&#39;/share/work/runtime/softwares/MinPath/data/KEGG-pathway.txt&#39;, header = FALSE, na.strings = &#39;&#39;, comment.char = &#39;&#39;, sep = &#39;\\t&#39;, colClasses = c(&#39;V1&#39; = &#39;character&#39;)) colnames(ID2Name_mapping_tbl) &lt;- c(&#39;PathwayID&#39;, &#39;Label&#39;) ## Next we read in metadata (Group information) metadata &lt;- read.table(&#39;/share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Kegg/Demo_data/Demo_metadata.xls&#39;, check.names = FALSE, header = TRUE) metadata %&lt;&gt;% column_to_rownames(&#39;sample&#39;) %&gt;% as.data.frame() 4.3 Pre-process pathway data 4.3.1 Remove the pathways whose abundance are 0 across all samples ## If we use harmonic mean or median to calcualte pathway abundance from KOs, the pathway abundance may be 0, we therefore need to remove those pathways having 0 abundance across all samples. ## Sample 14295 is water, don&#39;t panick when you see loads of 0s in your data, check the sample source when you see weird numbers in profile table. pathway_profile_tbl %&lt;&gt;% column_to_rownames(&#39;# Gene Family&#39;) %&gt;% dplyr::filter(rowSums(.) &gt; 0) 4.3.2 Rescale data ## In this chunk, we use TSS (Total sum scaling) to eliminate the influence of sequencing depth on samples. After re-scaling, we can apply DA to samples. rescaled_pathway_profile_tbl &lt;- pathway_profile_tbl %&gt;% apply(., 2, function(x) x/sum(x)) %&gt;% as.data.frame() head(rescaled_pathway_profile_tbl) ## 14286 14287 14288 14289 14290 14291 14292 14293 14294 14295 ## 00010 1.283440e-04 3.357828e-06 1.128246e-05 9.462703e-05 3.238698e-06 2.927676e-06 2.364773e-05 8.041385e-06 7.623641e-05 0 ## 00020 6.879852e-05 9.505726e-06 1.616029e-05 1.167247e-04 1.025686e-05 1.061323e-05 2.828187e-05 2.880967e-05 7.161811e-05 0 ## 00030 4.098493e-06 0.000000e+00 9.312244e-07 4.416249e-05 3.468932e-07 3.713000e-07 3.258050e-06 2.532759e-06 6.328223e-06 0 ## 00040 1.150498e-06 5.421290e-07 8.982930e-07 7.318994e-06 3.960937e-07 0.000000e+00 7.673043e-07 9.071024e-07 0.000000e+00 0 ## 00051 2.058384e-05 2.036986e-06 1.252159e-06 5.090830e-05 5.512341e-07 1.205087e-06 4.321008e-06 8.141639e-07 5.743959e-05 0 ## 00052 1.143786e-05 4.884568e-06 2.666522e-06 6.195852e-05 2.631011e-06 8.223274e-07 6.765689e-06 3.606556e-06 1.175916e-04 0 nrow(rescaled_pathway_profile_tbl) ## [1] 68 4.3.3 Remove UNAMMPED entry ## In this chunk, we remove the umapped row in rescaled profile table because we are not able to intepret UNMAPPED entry. rescaled_pathway_profile_tbl %&lt;&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::select(!UNMAPPED) %&gt;% t() %&gt;% as.data.frame() 4.3.4 Filter low abundance pathway ## In this chunck, we aggregate low abundance features to one row. ## Import functions for filtering into enviroment. ## 1e-12 is an empirical threshold fot filtering low abundance feature. According to published paper [Obese Individuals with and without Type 2 Diabetes Show Different Gut Microbial Functional Capacity and Composition] https://doi.org/10.1016/j.chom.2019.07.004, pathway with top 50% mean abundance and top 50% variance are left. But in MaAsLin2ï¼Œpathway with abundance less than 10-10 are filtered by default. source(&#39;/share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Kegg/Scripts/R/ultility.R&#39;) filtered_pathway_RA_profile_tbl &lt;- aggregate_low_abundance(input_data = rescaled_pathway_profile_tbl, threshold = 1e-12) ## threshold should be modified based on your on study head(filtered_pathway_RA_profile_tbl) ## 14286 14287 14288 14289 14290 14291 14292 14293 14294 14295 ## 00010 1.283440e-04 3.357828e-06 1.128246e-05 9.462703e-05 3.238698e-06 2.927676e-06 2.364773e-05 8.041385e-06 7.623641e-05 0 ## 00020 6.879852e-05 9.505726e-06 1.616029e-05 1.167247e-04 1.025686e-05 1.061323e-05 2.828187e-05 2.880967e-05 7.161811e-05 0 ## 00030 4.098493e-06 0.000000e+00 9.312244e-07 4.416249e-05 3.468932e-07 3.713000e-07 3.258050e-06 2.532759e-06 6.328223e-06 0 ## 00040 1.150498e-06 5.421290e-07 8.982930e-07 7.318994e-06 3.960937e-07 0.000000e+00 7.673043e-07 9.071024e-07 0.000000e+00 0 ## 00051 2.058384e-05 2.036986e-06 1.252159e-06 5.090830e-05 5.512341e-07 1.205087e-06 4.321008e-06 8.141639e-07 5.743959e-05 0 ## 00052 1.143786e-05 4.884568e-06 2.666522e-06 6.195852e-05 2.631011e-06 8.223274e-07 6.765689e-06 3.606556e-06 1.175916e-04 0 nrow(filtered_pathway_RA_profile_tbl) ## [1] 67 4.4 Standard Analysis Compositional barplot ## In this chunk, we construct stacked pathway barplot to depict the pathway composition of samples, we use function plot_stacked_bar from xviz to plot. ## In case there are too much entries, we use parameter &quot;collapse&quot; in plot_stacked_bar function to integrate entries whose abundance are below given threshold into &quot;Others&quot;. ## Note: make sure your graph is long enough to show the group information. pathway_stacked_barplot &lt;- xviz::plot_stacked_bar(otu_table = filtered_pathway_RA_profile_tbl %&gt;% t() %&gt;% as.data.frame(), metadata = metadata, collapse = 1e-3, feature = &#39;group&#39;) print(pathway_stacked_barplot) Beta diversity ## In this chunk, we inherit the concept of Beta diversity of microbial taxa data and apply it to pathway data to explore the similarity between samples. ## construct phyloseq for beta diversity analysis phy &lt;- phyloseq(otu_table(filtered_pathway_RA_profile_tbl, taxa_are_rows = TRUE), sample_data(metadata)) ## PCOA plot with bray_curtis distance PCOA_plot &lt;- xviz::plot_beta_diversity(phyloseq = phy, feature = &#39;group&#39;, method = &#39;bray&#39;, label = TRUE) print(PCOA_plot) ## PERMANOVA test &amp; beta dispersion test ## We use PERMANOVA test to check the differences of function composition among different groups. Additionally, we also take homogeneity of group variance into consideration. dispersion_permanova_res &lt;- run_permanova_betadisp(physeq = phy, vars = &#39;group&#39; ) dispersion_permanova_res ## $betadisp_res ## variable p_value analysis ## 1 group 0.787 beta_dispersion_permutation999 ## ## $permanova_res ## variable p_value R2 analysis ## 1 group 0.782 0.07308638 permanova_permutation999 4.5 Differential analysis 4.5.1 Filter low prevalence pathway ## Low prevalence pathways are pathways only occur in minor samples. ## In this chunk we filter low prevalence data with threshold of 0.02, 0.02 is an empirical value, users should change this value according to their own study. filtered_pathway_RA_profile_tbl &lt;- filter_prevalence(otu_table = filtered_pathway_RA_profile_tbl, threshold = 0.02, taxa_are_rows = TRUE ) head(filtered_pathway_RA_profile_tbl) ## 14286 14287 14288 14289 14290 14291 14292 14293 14294 14295 ## 00010 1.283440e-04 3.357828e-06 1.128246e-05 9.462703e-05 3.238698e-06 2.927676e-06 2.364773e-05 8.041385e-06 7.623641e-05 0 ## 00020 6.879852e-05 9.505726e-06 1.616029e-05 1.167247e-04 1.025686e-05 1.061323e-05 2.828187e-05 2.880967e-05 7.161811e-05 0 ## 00030 4.098493e-06 0.000000e+00 9.312244e-07 4.416249e-05 3.468932e-07 3.713000e-07 3.258050e-06 2.532759e-06 6.328223e-06 0 ## 00040 1.150498e-06 5.421290e-07 8.982930e-07 7.318994e-06 3.960937e-07 0.000000e+00 7.673043e-07 9.071024e-07 0.000000e+00 0 ## 00051 2.058384e-05 2.036986e-06 1.252159e-06 5.090830e-05 5.512341e-07 1.205087e-06 4.321008e-06 8.141639e-07 5.743959e-05 0 ## 00052 1.143786e-05 4.884568e-06 2.666522e-06 6.195852e-05 2.631011e-06 8.223274e-07 6.765689e-06 3.606556e-06 1.175916e-04 0 nrow(filtered_pathway_RA_profile_tbl) ## [1] 57 4.5.2 DA DA with LM ## In this chunk, you would be using logistic regression model to find pathways that are significantly enriched in certain group. ## Due to the nature of compositional data, we cannot apply linear models to compositional data directly. ## Transformation of relative abundance data should be carried out before feeding the data to LM. ## Here, we add a very small value (1e-12) to the pathway profile table to avoid genrating NA during transformation, then use logit transformation to transform data. And eventually we apply LM to the transformed data ## Adding small value to the profile table (The value is arbitrary). DA_pathway_RA_profile_tbl &lt;- filtered_pathway_RA_profile_tbl + 1e-12 ## Reshape profile data table and use logit transformation. DA_pathway_RA_profile_tbl &lt;- DA_pathway_RA_profile_tbl %&gt;% t() %&gt;% as.data.frame() %&gt;% rownames_to_column(&#39;SeqID&#39;) %&gt;% as.data.frame() DA_metadata &lt;- metadata %&gt;% rownames_to_column(&#39;SeqID&#39;) %&gt;% as.data.frame() ## Reshape dataframe into long table DA_input &lt;- merge(DA_pathway_RA_profile_tbl, DA_metadata, by=&#39;SeqID&#39;) %&gt;% reshape2::melt(value.name = &#39;RA&#39;, variable.name = &#39;PathwayIDs&#39;) ## Logit transformation DA_input %&lt;&gt;% mutate(RA_logit = log(RA/(1-RA))) ## Fit data to LM ## Loop over each pathway in two groups LM_res &lt;- DA_input %&gt;% split(.$PathwayIDs) %&gt;% lapply(., function(x){ gml_res_summary &lt;- lm(data = x, formula = RA_logit ~ group) %&gt;% summary() %&gt;% .$coefficients %&gt;% as.matrix() %&gt;% as.data.frame() %&gt;% rownames_to_column(var = &quot;Factors&quot;) } ) ## Merge all result in one table LM_res &lt;- LM_res %&gt;% data.table::rbindlist(idcol = &quot;PathwayID&quot;) %&gt;% filter(Factors != &quot;(Intercept)&quot;) ## Adjust p value using p.adjust function from stats package, you could choose different adjust method. LM_res %&lt;&gt;% mutate(adjust.p = stats::p.adjust(.$`Pr(&gt;|t|)`, method = &#39;BH&#39;)) ## Calculate effect size (Odds ratio) of each feature LM_res %&lt;&gt;% mutate(OR = exp(Estimate)) %&gt;% as.data.frame() ## Add label to pathwayIDs LM_res %&lt;&gt;% merge(., ID2Name_mapping_tbl, by = &#39;PathwayID&#39;) Show DA result with volcano plot ## Plot volcano plot to show effect size (x-axis) and p value (y-axis) of pathways. ## Here we only tend to hightlight pathways that satisfy adjust.p &lt; 0.614 and OR &lt; 0.2 at the same time. ## You can nevertheless choose different threshold accroding to your own data. volcano_plot &lt;- LM_res %&gt;% mutate(p.adj.log = -log10(adjust.p), log10OR = log10(OR)) %&gt;% ggplot(aes(x = log10OR, y = p.adj.log)) + geom_point(size = 0.5) + geom_point(size = 0.5, color = &quot;red&quot;, data = . %&gt;% filter(adjust.p &lt; 0.614 &amp; OR &lt; 0.2)) + #geom_text_repel(size = 6/.pt, aes(label = Label), data = . %&gt;% filter(adjust.p&lt;0.614 &amp; OR&lt;0.2)) + geom_vline(xintercept = log10(c(0.05, 0.1, 0.2, 0.5, 1, 2)), size = 0.05, color = &quot;grey&quot;) + geom_hline(yintercept = -log10(c(0.7)), size = 0.05, color = &quot;grey&quot;) + theme(aspect.ratio = 1, panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ) + labs(x = &quot;Estimated Odds Ratio&quot;, y = &quot;FDR adjusted p-values(-log10)&quot;) print(volcano_plot) Show DA result with pathview ## In this chunk, we use pathview to visualize enriched KOs in differential pathways. We will use generated from Functional_Analysis_Kegg_Pathway_preprocess.Rmd ## Step1. First we extract all KOs in differential pathways obtained from last chunk with mapping file: /share/work/runtime/softwares/MinPath/data/KEGG-mapping.txt. ## Step2. We find differential KO in two groups using the same LM method in previous chunk. ## Step3. Visualize differential KO in differential pathways with pathview. ## Read in KO profile, since we&#39;ve already removed UNMAPPED and re-scaled KO profile in Functional_Analysis_Kegg_Pathway_preprocess.Rmd, we only need to filer low_abundance and low-prevalenece KOs here. KO_profile &lt;- read.table(&#39;/share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Kegg/Demo_data/merged_knumber.txt&#39;) ## Add hearder to KO profile, because KO profile file generated from Functional_Analysis_Kegg_Pathway_preprocess.Rmd has no headers by default. header &lt;- read.table(&#39;/share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Kegg/Demo_data/merged_pathway.txt&#39;,header = TRUE, comment.char = &#39;!&#39;, stringsAsFactors = FALSE , colClasses = c(&#39;# Gene Family&#39; = &#39;character&#39;), na.strings = &#39;&#39;, sep=&#39;\\t&#39;, check.names = FALSE) %&gt;% colnames() header[1] &lt;- &#39;KOs&#39; colnames(KO_profile) &lt;- header ## Rescale KO profile KO_profile %&lt;&gt;% column_to_rownames(&#39;KOs&#39;) %&gt;% apply(., 2, function(x) x/sum(x)) %&gt;% as.data.frame() %&gt;% rownames_to_column(&#39;KOs&#39;) ## Filter low abundance KOs filtered_KO_profile &lt;- KO_profile %&gt;% column_to_rownames(&#39;KOs&#39;) %&gt;% aggregate_low_abundance(input_data = ., threshold = 1e-12) ## Filter low-prevalenece KOs filtered_KO_profile &lt;- filter_prevalence(otu_table = filtered_KO_profile, threshold = 0.02, taxa_are_rows = TRUE ) ## Read in KO-Pathway mapping file KO2Pathway_mapping &lt;- read.table(&#39;/share/work/runtime/softwares/MinPath/data/KEGG-mapping.txt&#39;, colClasses = c(&#39;V1&#39; = &#39;character&#39;)) ## Loop over differential pathways Diff_pathway &lt;- LM_res %&gt;% filter(`Pr(&gt;|t|)` &lt; .05) %&gt;% .$PathwayID %&gt;% as.vector() for (pathway in Diff_pathway){ ## Create a list to store the log2fc of each KO in each kegg pathway log2fc_list &lt;- list() ## Extract all KOs in differential pathway KO_ID_in_mapping &lt;- KO2Pathway_mapping %&gt;% filter(V1 == pathway) %&gt;% .$V2 ## Some KOs are not included in mapping file, here we take intersection of KO ID in mapping file and avaiable KO ID in KO profile KO_ID &lt;- intersect(KO_ID_in_mapping, rownames(filtered_KO_profile)) tmp_KO_profile &lt;- filtered_KO_profile[KO_ID,] tmp_KO_meta &lt;- DA_metadata ## re-format tmp KO profile table KO_DA_input &lt;- merge(tmp_KO_profile %&gt;% t() %&gt;% as.data.frame() %&gt;% rownames_to_column(&#39;SeqID&#39;), tmp_KO_meta, by = &#39;SeqID&#39;) %&gt;% reshape2::melt(variable.name = &#39;KO&#39;, value.name = &#39;RA&#39;) %&gt;% mutate(RA = RA + 1e-12) %&gt;% mutate(RA_logit = log(RA/(1-RA))) ## DA using LM KO_LM_res &lt;- KO_DA_input %&gt;% split(.$KO) %&gt;% lapply(., function(x){ KO_gml_res_summary &lt;- lm(data = x, formula = RA_logit ~ group) %&gt;% summary() %&gt;% .$coefficients %&gt;% as.matrix() %&gt;% as.data.frame() %&gt;% rownames_to_column(var = &quot;Factors&quot;) } ) ## Merge result of all tested KOs KO_LM_res %&lt;&gt;% data.table::rbindlist(idcol = &quot;KOID&quot;) %&gt;% filter(Factors != &quot;(Intercept)&quot;) ## Adjust p value using p.adjust function from stats package, you could choose different adjust method. KO_LM_res %&lt;&gt;% mutate(adjust.p = stats::p.adjust(.$`Pr(&gt;|t|)`, method = &#39;BH&#39;)) %&gt;% as.data.frame() ## Filter significant differential KOs with p-value, we use pvalue &lt; 0.05 as filtering criteria here, choose your own standard for filtering. Sig_KO &lt;- KO_LM_res %&gt;% filter(`Pr(&gt;|t|)` &lt; 0.05) %&gt;% .$KOID ## Calculate Log2FC of each significant KO in two groups for (ko in Sig_KO){ ## Add a small value to avoid 0 Sig_KO_profile &lt;- tmp_KO_profile[ko, ] + 1e-12 ## calculate median for each KO in two groups Sig_KO_log2fc &lt;- merge(Sig_KO_profile %&gt;% t() %&gt;% as.data.frame() %&gt;% rownames_to_column(&#39;SeqID&#39;), tmp_KO_meta, by = &#39;SeqID&#39;) %&gt;% column_to_rownames(&#39;SeqID&#39;) %&gt;% group_by(group) %&gt;% summarize(median = median(!!as.symbol(ko))) %&gt;% as.data.frame() ## Here we extact the median value for each group separatly GroupA_median &lt;- Sig_KO_log2fc %&gt;% column_to_rownames(&#39;group&#39;) %&gt;% .[&#39;A&#39;, &#39;median&#39;] GroupB_median &lt;- Sig_KO_log2fc %&gt;% column_to_rownames(&#39;group&#39;) %&gt;% .[&#39;B&#39;, &#39;median&#39;] ## Calculate log2FC for each KO and save the value in list ## Please be clear which group is divided by the other, it decides the direction of your log2fc ## Positive log2fc value would be highlighted in red in pathview result while negative log2fc value would be highlighted in green log2fc_list[[ko]] &lt;- log2(GroupA_median - GroupB_median) } ## converst list to data frame and use it as input for pathview input &lt;- as.matrix(log2fc_list) %&gt;% as.matrix() ## Visualization pathview(input, pathway.id = pathway, species = &quot;ko&quot;, out.suffix= &#39;PathView&#39;) } ## Knit Pathview picture to RMD graph_list &lt;- system(&#39;ls *.PathView.png&#39;, intern = TRUE) ## In the graph(s) below, green KO are those KOs enriched in GroupB, red KO are those KOs enriched in GroupA knitr::include_graphics(graph_list) 4.6 Session information devtools::session_info() ## â”€ Session info â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ ## setting value ## version R version 3.6.3 (2020-02-29) ## os Ubuntu 16.04.7 LTS ## system x86_64, linux-gnu ## ui RStudio ## language (EN) ## collate en_IN.UTF-8 ## ctype en_IN.UTF-8 ## tz Asia/Hong_Kong ## date 2022-07-21 ## rstudio 1.1.419 (server) ## pandoc 2.7.3 @ /usr/bin/ (via rmarkdown) ## ## â”€ Packages â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ ## ! package * version date (UTC) lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 3.6.3) ## ade4 1.7-17 2021-06-17 [1] CRAN (R 3.6.3) ## ALDEx2 1.18.0 2019-10-29 [1] Bioconductor ## annotate 1.64.0 2019-10-29 [1] Bioconductor ## AnnotationDbi * 1.48.0 2019-10-29 [1] Bioconductor ## ape 5.5 2021-04-25 [1] CRAN (R 3.6.3) ## assertthat 0.2.1 2019-03-21 [2] CRAN (R 3.6.3) ## backports 1.4.1 2021-12-13 [1] CRAN (R 3.6.3) ## base64enc 0.1-3 2015-07-28 [2] CRAN (R 3.6.3) ## bayesm 3.1-4 2019-10-15 [1] CRAN (R 3.6.3) ## biglm 0.9-2.1 2020-11-27 [1] CRAN (R 3.6.3) ## Biobase * 2.46.0 2019-10-29 [2] Bioconductor ## BiocGenerics * 0.32.0 2019-10-29 [2] Bioconductor ## BiocParallel * 1.20.1 2019-12-21 [2] Bioconductor ## biomformat 1.14.0 2019-10-29 [1] Bioconductor ## Biostrings 2.54.0 2019-10-29 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] CRAN (R 3.6.3) ## bit64 4.0.5 2020-08-30 [1] CRAN (R 3.6.3) ## bitops 1.0-7 2021-04-24 [1] CRAN (R 3.6.3) ## blob 1.2.2 2021-07-23 [1] CRAN (R 3.6.3) ## bookdown 0.24 2021-09-02 [1] CRAN (R 3.6.3) ## brio 1.1.3 2021-11-30 [2] CRAN (R 3.6.3) ## broom 0.7.12 2022-01-28 [1] CRAN (R 3.6.3) ## bslib 0.3.1 2021-10-06 [1] CRAN (R 3.6.3) ## cachem 1.0.5 2021-05-15 [1] CRAN (R 3.6.3) ## callr 3.7.0 2021-04-20 [2] CRAN (R 3.6.3) ## car 3.0-12 2021-11-06 [1] CRAN (R 3.6.3) ## carData 3.0-4 2020-05-22 [1] CRAN (R 3.6.3) ## caTools 1.18.2 2021-03-28 [1] CRAN (R 3.6.3) ## cellranger 1.1.0 2016-07-27 [1] CRAN (R 3.6.3) ## checkmate 2.0.0 2020-02-06 [1] CRAN (R 3.6.3) ## circlize * 0.4.13 2021-06-09 [1] CRAN (R 3.6.3) ## cli 3.1.0 2021-10-27 [1] CRAN (R 3.6.3) ## clue 0.3-59 2021-04-16 [1] CRAN (R 3.6.3) ## cluster 2.1.0 2019-06-19 [2] CRAN (R 3.6.3) ## coda 0.19-4 2020-09-30 [1] CRAN (R 3.6.3) ## codetools 0.2-16 2018-12-24 [2] CRAN (R 3.6.3) ## colorspace 2.0-2 2021-06-24 [1] CRAN (R 3.6.3) ## ComplexHeatmap * 2.2.0 2019-10-29 [1] Bioconductor ## compositions 2.0-2 2021-07-14 [1] CRAN (R 3.6.3) ## cowplot * 1.1.1 2020-12-30 [1] CRAN (R 3.6.3) ## crayon 1.5.0 2022-02-14 [1] CRAN (R 3.6.3) ## dada2 * 1.14.1 2020-02-22 [1] Bioconductor ## data.table * 1.14.0 2021-02-21 [1] CRAN (R 3.6.3) ## DBI 1.1.1 2021-01-15 [1] CRAN (R 3.6.3) ## dbplyr 2.1.1 2021-04-06 [1] CRAN (R 3.6.3) ## DelayedArray * 0.12.3 2020-04-09 [2] Bioconductor ## DelayedMatrixStats 1.8.0 2019-10-29 [1] Bioconductor ## DEoptimR 1.0-9 2021-05-24 [1] CRAN (R 3.6.3) ## desc 1.4.1 2022-03-06 [2] CRAN (R 3.6.3) ## DESeq2 * 1.26.0 2019-10-29 [1] Bioconductor ## devtools 2.4.3 2021-11-30 [1] CRAN (R 3.6.3) ## digest 0.6.29 2021-12-01 [1] CRAN (R 3.6.3) ## dplyr * 1.0.6 2021-05-05 [1] CRAN (R 3.6.3) ## edgeR 3.28.1 2020-02-26 [1] Bioconductor ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 3.6.3) ## EnhancedVolcano * 1.4.0 2019-10-29 [1] Bioconductor ## evaluate 0.15 2022-02-18 [2] CRAN (R 3.6.3) ## fansi 1.0.2 2022-01-14 [1] CRAN (R 3.6.3) ## farver 2.1.0 2021-02-28 [2] CRAN (R 3.6.3) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 3.6.3) ## fdrtool 1.2.17 2021-11-13 [1] CRAN (R 3.6.3) ## forcats * 0.5.1 2021-01-27 [1] CRAN (R 3.6.3) ## foreach 1.5.2 2022-02-02 [2] CRAN (R 3.6.3) ## foreign 0.8-75 2020-01-20 [2] CRAN (R 3.6.3) ## formatR 1.12 2022-03-31 [2] CRAN (R 3.6.3) ## Formula 1.2-4 2020-10-16 [1] CRAN (R 3.6.3) ## fs 1.5.2 2021-12-08 [1] CRAN (R 3.6.3) ## futile.logger 1.4.3 2016-07-10 [2] CRAN (R 3.6.3) ## futile.options 1.0.1 2018-04-20 [2] CRAN (R 3.6.3) ## genefilter 1.68.0 2019-10-29 [1] Bioconductor ## geneplotter 1.64.0 2019-10-29 [1] Bioconductor ## generics 0.1.2 2022-01-31 [1] CRAN (R 3.6.3) ## GenomeInfoDb * 1.22.1 2020-03-27 [2] Bioconductor ## GenomeInfoDbData 1.2.2 2020-08-24 [2] Bioconductor ## GenomicAlignments 1.22.1 2019-11-12 [1] Bioconductor ## GenomicRanges * 1.38.0 2019-10-29 [2] Bioconductor ## getopt 1.20.3 2019-03-22 [1] CRAN (R 3.6.3) ## GetoptLong 1.0.5 2020-12-15 [1] CRAN (R 3.6.3) ## GGally * 2.1.2 2021-06-21 [1] CRAN (R 3.6.3) ## ggbipart * 0.1.2 2022-07-20 [1] Github (pedroj/bipartite_plots@162f577) ## ggExtra * 0.9 2019-08-27 [1] CRAN (R 3.6.3) ## ggplot2 * 3.3.5 2021-06-25 [1] CRAN (R 3.6.3) ## ggpubr * 0.4.0 2020-06-27 [1] CRAN (R 3.6.3) ## ggrepel * 0.9.1 2021-01-15 [2] CRAN (R 3.6.3) ## ggsci * 2.9 2018-05-14 [1] CRAN (R 3.6.3) ## ggsignif 0.6.3 2021-09-09 [1] CRAN (R 3.6.3) ## glmnet 4.1-2 2021-06-24 [1] CRAN (R 3.6.3) ## GlobalOptions 0.1.2 2020-06-10 [1] CRAN (R 3.6.3) ## glue 1.6.1 2022-01-22 [1] CRAN (R 3.6.3) ## GMPR 0.1.3 2021-05-17 [1] local ## gplots 3.1.1 2020-11-28 [1] CRAN (R 3.6.3) ## graph 1.64.0 2019-10-29 [1] Bioconductor ## gridExtra 2.3 2017-09-09 [2] CRAN (R 3.6.3) ## gtable 0.3.0 2019-03-25 [2] CRAN (R 3.6.3) ## gtools 3.9.2 2021-06-06 [1] CRAN (R 3.6.3) ## haven 2.4.1 2021-04-23 [1] CRAN (R 3.6.3) ## highr 0.9 2021-04-16 [1] CRAN (R 3.6.3) ## Hmisc 4.5-0 2021-02-28 [1] CRAN (R 3.6.3) ## hms 1.1.1 2021-09-26 [1] CRAN (R 3.6.3) ## htmlTable 2.3.0 2021-10-12 [1] CRAN (R 3.6.3) ## htmltools 0.5.2 2021-08-25 [1] CRAN (R 3.6.3) ## htmlwidgets 1.5.4 2021-09-08 [2] CRAN (R 3.6.3) ## httpuv 1.6.1 2021-05-07 [1] CRAN (R 3.6.3) ## httr 1.4.3 2022-05-04 [2] CRAN (R 3.6.3) ## hwriter 1.3.2 2014-09-10 [1] CRAN (R 3.6.3) ## igraph 1.3.1 2022-04-20 [2] CRAN (R 3.6.3) ## IHW 1.14.0 2019-10-29 [1] Bioconductor ## IRanges * 2.20.2 2020-01-13 [2] Bioconductor ## iterators 1.0.14 2022-02-05 [2] CRAN (R 3.6.3) ## jpeg 0.1-9 2021-07-24 [1] CRAN (R 3.6.3) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 3.6.3) ## jsonlite 1.8.0 2022-02-22 [2] CRAN (R 3.6.3) ## KEGGgraph 1.46.0 2019-10-29 [1] Bioconductor ## KEGGREST 1.26.1 2019-11-06 [1] Bioconductor ## KernSmooth 2.23-16 2019-10-15 [2] CRAN (R 3.6.3) ## knitr 1.36 2021-09-29 [1] CRAN (R 3.6.3) ## labeling 0.4.2 2020-10-20 [2] CRAN (R 3.6.3) ## lambda.r 1.2.4 2019-09-18 [2] CRAN (R 3.6.3) ## later 1.3.0 2021-08-18 [2] CRAN (R 3.6.3) ## lattice * 0.20-38 2018-11-04 [2] CRAN (R 3.6.3) ## latticeExtra 0.6-29 2019-12-19 [1] CRAN (R 3.6.3) ## lazyeval 0.2.2 2019-03-15 [2] CRAN (R 3.6.3) ## lifecycle 1.0.1 2021-09-24 [1] CRAN (R 3.6.3) ## limma 3.42.2 2020-02-03 [2] Bioconductor ## locfit 1.5-9.4 2020-03-25 [1] CRAN (R 3.6.3) ## lpsymphony 1.14.0 2019-10-29 [1] Bioconductor (R 3.6.3) ## lubridate 1.7.10 2021-02-26 [1] CRAN (R 3.6.3) ## Maaslin2 1.7.3 2022-03-23 [1] Github (biobakery/maaslin2@8d090e4) ## magrittr * 2.0.2 2022-01-26 [1] CRAN (R 3.6.3) ## MASS 7.3-54 2021-05-03 [1] CRAN (R 3.6.3) ## Matrix 1.3-4 2021-06-01 [1] CRAN (R 3.6.3) ## matrixStats * 0.60.0 2021-07-26 [1] CRAN (R 3.6.3) ## mbzinb 0.2 2021-06-23 [1] local ## memoise 2.0.1 2021-11-26 [2] CRAN (R 3.6.3) ## metagenomeSeq 1.28.2 2020-02-03 [1] Bioconductor ## metamicrobiomeR 1.1 2021-02-03 [1] local ## mgcv 1.8-31 2019-11-09 [2] CRAN (R 3.6.3) ## microbiome 1.8.0 2019-10-29 [1] Bioconductor ## mime 0.12 2021-09-28 [2] CRAN (R 3.6.3) ## miniUI 0.1.1.1 2018-05-18 [1] CRAN (R 3.6.3) ## modelr 0.1.8 2020-05-19 [1] CRAN (R 3.6.3) ## multtest 2.42.0 2019-10-29 [2] Bioconductor ## munsell 0.5.0 2018-06-12 [2] CRAN (R 3.6.3) ## mvtnorm 1.1-3 2021-10-08 [1] CRAN (R 3.6.3) ## network * 1.17.1 2021-06-14 [1] CRAN (R 3.6.3) ## nlme 3.1-144 2020-02-06 [2] CRAN (R 3.6.3) ## nnet 7.3-12 2016-02-02 [2] CRAN (R 3.6.3) ## optparse 1.7.1 2021-10-08 [1] CRAN (R 3.6.3) ## org.Hs.eg.db * 3.10.0 2021-12-08 [1] Bioconductor ## pathview * 1.26.0 2019-10-29 [1] Bioconductor ## pcaPP 1.9-74 2021-04-23 [1] CRAN (R 3.6.3) ## permute * 0.9-5 2019-03-12 [1] CRAN (R 3.6.3) ## phyloseq * 1.30.0 2019-10-29 [1] Bioconductor ## pillar 1.7.0 2022-02-01 [1] CRAN (R 3.6.3) ## pkgbuild 1.3.1 2021-12-20 [2] CRAN (R 3.6.3) ## pkgconfig 2.0.3 2019-09-22 [2] CRAN (R 3.6.3) ## pkgload 1.2.4 2021-11-30 [2] CRAN (R 3.6.3) ## plotly * 4.10.0 2021-10-09 [1] CRAN (R 3.6.3) ## plyr 1.8.7 2022-03-24 [2] CRAN (R 3.6.3) ## png 0.1-7 2013-12-03 [1] CRAN (R 3.6.3) ## prettyunits 1.1.1 2020-01-24 [2] CRAN (R 3.6.3) ## processx 3.5.3 2022-03-25 [2] CRAN (R 3.6.3) ## promises 1.2.0.1 2021-02-11 [2] CRAN (R 3.6.3) ## protoclust 1.6.3 2019-01-31 [1] CRAN (R 3.6.3) ## ps 1.7.0 2022-04-23 [2] CRAN (R 3.6.3) ## pscl 1.5.5 2020-03-07 [1] CRAN (R 3.6.3) ## purrr * 0.3.4 2020-04-17 [2] CRAN (R 3.6.3) ## qvalue 2.18.0 2019-10-29 [1] Bioconductor ## R6 2.5.1 2021-08-19 [1] CRAN (R 3.6.3) ## RAIDA 1.0 2021-06-23 [1] local ## ranacapa 0.1.0 2021-06-18 [1] Github (gauravsk/ranacapa@58c0cab) ## RColorBrewer * 1.1-3 2022-04-03 [2] CRAN (R 3.6.3) ## Rcpp * 1.0.7 2021-07-07 [1] CRAN (R 3.6.3) ## RcppParallel 5.1.4 2021-05-04 [1] CRAN (R 3.6.3) ## RCurl 1.98-1.6 2022-02-08 [2] CRAN (R 3.6.3) ## readr * 2.0.0 2021-07-20 [1] CRAN (R 3.6.3) ## readxl * 1.3.1 2019-03-13 [1] CRAN (R 3.6.3) ## remotes 2.4.2 2021-11-30 [1] CRAN (R 3.6.3) ## reprex 2.0.1 2021-08-05 [1] CRAN (R 3.6.3) ## reshape 0.8.9 2022-04-12 [1] CRAN (R 3.6.3) ## reshape2 * 1.4.4 2020-04-09 [2] CRAN (R 3.6.3) ## Rgraphviz 2.30.0 2019-10-29 [1] Bioconductor ## rhdf5 2.30.1 2019-11-26 [1] Bioconductor ## Rhdf5lib 1.8.0 2019-10-29 [1] Bioconductor ## rJava 1.0-5 2021-09-24 [1] CRAN (R 3.6.3) ## rjson 0.2.20 2018-06-08 [1] CRAN (R 3.6.3) ## R rlang 1.0.2 &lt;NA&gt; [2] &lt;NA&gt; ## rmarkdown 2.11 2021-09-14 [1] CRAN (R 3.6.3) ## robustbase 0.93-9 2021-09-27 [1] CRAN (R 3.6.3) ## rpart 4.1-15 2019-04-12 [2] CRAN (R 3.6.3) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 3.6.3) ## Rsamtools 2.2.3 2020-02-23 [1] Bioconductor ## rsconnect 0.8.25 2021-11-19 [1] CRAN (R 3.6.3) ## RSQLite 2.2.7 2021-04-22 [1] CRAN (R 3.6.3) ## rstatix 0.7.0 2021-02-13 [1] CRAN (R 3.6.3) ## rstudioapi 0.13 2020-11-12 [2] CRAN (R 3.6.3) ## Rtsne 0.15 2018-11-10 [1] CRAN (R 3.6.3) ## rvest 1.0.2 2021-10-16 [1] CRAN (R 3.6.3) ## S4Vectors * 0.24.4 2020-04-09 [2] Bioconductor ## sass 0.4.0 2021-05-12 [1] CRAN (R 3.6.3) ## scales 1.2.0 2022-04-13 [2] CRAN (R 3.6.3) ## seqinr * 4.2-8 2021-06-09 [1] CRAN (R 3.6.3) ## sessioninfo 1.2.2 2021-12-06 [2] CRAN (R 3.6.3) ## shape 1.4.6 2021-05-19 [1] CRAN (R 3.6.3) ## shiny 1.7.1 2021-10-02 [1] CRAN (R 3.6.3) ## ShortRead 1.44.3 2020-02-03 [1] Bioconductor ## slam 0.1-49 2021-11-17 [1] CRAN (R 3.6.3) ## sna 2.6 2020-10-06 [1] CRAN (R 3.6.3) ## statnet.common 4.5.0 2021-06-05 [1] CRAN (R 3.6.3) ## VP stringi 1.7.6 2021-08-25 [2] CRAN (R 3.6.3) (on disk 1.7.4) ## stringr * 1.4.0 2019-02-10 [2] CRAN (R 3.6.3) ## SummarizedExperiment * 1.16.1 2019-12-19 [2] Bioconductor ## survival 3.1-8 2019-12-03 [2] CRAN (R 3.6.3) ## tensorA 0.36.2 2020-11-19 [1] CRAN (R 3.6.3) ## testthat 3.1.4 2022-04-26 [2] CRAN (R 3.6.3) ## textshape 1.7.3 2021-05-28 [1] CRAN (R 3.6.3) ## tibble * 3.1.6 2021-11-07 [1] CRAN (R 3.6.3) ## tidyr * 1.2.0 2022-02-01 [1] CRAN (R 3.6.3) ## tidyselect 1.1.1 2021-04-30 [1] CRAN (R 3.6.3) ## tidyverse * 1.3.1 2021-04-15 [1] CRAN (R 3.6.3) ## tzdb 0.2.0 2021-10-27 [1] CRAN (R 3.6.3) ## UpSetR 1.4.0 2019-05-22 [1] CRAN (R 3.6.3) ## usethis 2.1.6 2022-05-25 [2] CRAN (R 3.6.3) ## utf8 1.2.2 2021-07-24 [1] CRAN (R 3.6.3) ## vctrs 0.3.8 2021-04-29 [1] CRAN (R 3.6.3) ## vegan * 2.5-7 2020-11-28 [1] CRAN (R 3.6.3) ## VennDiagram 1.7.1 2021-12-02 [1] CRAN (R 3.6.3) ## viridisLite 0.4.0 2021-04-13 [2] CRAN (R 3.6.3) ## vroom 1.5.7 2021-11-30 [1] CRAN (R 3.6.3) ## wesanderson * 0.3.6.9000 2021-07-21 [1] Github (karthik/wesanderson@651c944) ## withr 2.4.3 2021-11-30 [1] CRAN (R 3.6.3) ## Wrench 1.4.0 2019-10-29 [1] Bioconductor ## xfun 0.23 2021-05-15 [1] CRAN (R 3.6.3) ## xlsx * 0.6.5 2020-11-10 [1] CRAN (R 3.6.3) ## xlsxjars 0.6.1 2014-08-22 [1] CRAN (R 3.6.3) ## XMAS * 0.0.0.9000 2022-03-23 [1] local ## XML 3.99-0.3 2020-01-20 [1] CRAN (R 3.6.3) ## xml2 1.3.3 2021-11-30 [2] CRAN (R 3.6.3) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 3.6.3) ## XVector 0.26.0 2019-10-29 [2] Bioconductor ## xviz * 1.1.0 2021-01-14 [1] local ## yaml 2.2.2 2022-01-25 [1] CRAN (R 3.6.3) ## zlibbioc 1.32.0 2019-10-29 [2] Bioconductor ## ## [1] /share/home/tongbangzhuo/R/x86_64-pc-linux-gnu-library/3.6 ## [2] /opt/R-3.6.3/lib/R/library ## ## V â”€â”€ Loaded and on-disk version mismatch. ## P â”€â”€ Loaded and on-disk path mismatch. ## R â”€â”€ Package was removed from disk. ## ## â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ "],["preprocess-of-functional-analysis-of-targetdatabase.html", "Chapter 5 Preprocess of Functional Analysis of TargetDatabase 5.1 Preprocess - Merge sample data", " Chapter 5 Preprocess of Functional Analysis of TargetDatabase 5.1 Preprocess - Merge sample data 5.1.1 Use Script merge_metaphlan_tables.py from humann2 to merge all gene_family profile files. In this chunk, we merge *genefamilies.tsv files of all samples into one file for each input: genefamilies.tsv, path of all genefamilies.tsv files output: file name of merged profile table. Current target database inclues 7 types of databases: acetate butyrate formate propionate card card vfdb But the format of profile tables of the databases above are nevertheless the same. Next, we merge 7 types of target database profile files one by one. ## Remove previously merged profile # docker run -i --rm -u $(id -u):$(id -g) -v /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase2/TargetDatabase/:/in harbor.xbiome.com/xbiome/environments/humann2:2.8.1-2b8c5c3 bash -c &quot;rm /in/Demo_data/merged_*_profile.tsv&quot; ## 1. Start merging acetate profile files docker run -i --rm -u $(id -u):$(id -g) -v /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase2/TargetDatabase/:/in harbor.xbiome.com/xbiome/environments/humann2:2.8.1-2b8c5c3 bash -c &quot;merge_metaphlan_tables.py /in/Demo_data/pipeline_output/*/humann2_acetate/*genefamilies.tsv &gt; /in/Demo_data/merged_acetate_profile.tsv&quot; ## 2. Start merging butyrate profile files docker run -i --rm -u $(id -u):$(id -g) -v /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase2/TargetDatabase/:/in harbor.xbiome.com/xbiome/environments/humann2:2.8.1-2b8c5c3 bash -c &quot;merge_metaphlan_tables.py /in/Demo_data/pipeline_output/*/humann2_butyrate/*genefamilies.tsv &gt; /in/Demo_data/merged_butyrate_profile.tsv&quot; ## 3. Start merging formate profile files docker run -i --rm -u $(id -u):$(id -g) -v /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase2/TargetDatabase/:/in harbor.xbiome.com/xbiome/environments/humann2:2.8.1-2b8c5c3 bash -c &quot;merge_metaphlan_tables.py /in/Demo_data/pipeline_output/*/humann2_formate/*genefamilies.tsv &gt; /in/Demo_data/merged_formate_profile.tsv&quot; ## 4. Start merging propionate profile files docker run -i --rm -u $(id -u):$(id -g) -v /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase2/TargetDatabase/:/in harbor.xbiome.com/xbiome/environments/humann2:2.8.1-2b8c5c3 bash -c &quot;merge_metaphlan_tables.py /in/Demo_data/pipeline_output/*/humann2_propionate/*genefamilies.tsv &gt; /in/Demo_data/merged_propionate_profile.tsv&quot; ## 5. Start merging card profile files docker run -i --rm -u $(id -u):$(id -g) -v /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase2/TargetDatabase/:/in harbor.xbiome.com/xbiome/environments/humann2:2.8.1-2b8c5c3 bash -c &quot;merge_metaphlan_tables.py /in/Demo_data/pipeline_output/*/humann2_card/*genefamilies.tsv &gt; /in/Demo_data/merged_card_profile.tsv&quot; ## 6. Start merging card profile files docker run -i --rm -u $(id -u):$(id -g) -v /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase2/TargetDatabase/:/in harbor.xbiome.com/xbiome/environments/humann2:2.8.1-2b8c5c3 bash -c &quot;merge_metaphlan_tables.py /in/Demo_data/pipeline_output/*/humann2_card/*genefamilies.tsv &gt; /in/Demo_data/merged_card_profile.tsv&quot; ## 7. Start merging vfdb profile files docker run -i --rm -u $(id -u):$(id -g) -v /share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase2/TargetDatabase/:/in harbor.xbiome.com/xbiome/environments/humann2:2.8.1-2b8c5c3 bash -c &quot;merge_metaphlan_tables.py /in/Demo_data/pipeline_output/*/humann2_vfdb/*genefamilies.tsv &gt; /in/Demo_data/merged_vfdb_profile.tsv&quot; "],["functional-analysis-of-targetdatabase.html", "Chapter 6 Functional Analysis of TargetDatabase 6.1 Environment setup 6.2 Use card data as example 6.3 Differential analysis 6.4 Session info", " Chapter 6 Functional Analysis of TargetDatabase 6.1 Environment setup 6.2 Use card data as example Same as kegg pathway data, we normalize data at the begining of analysis to reduce the differences of sequencing depth across all samples. 6.2.1 Read in card data ## Read in merged card profile data merged_card_profile &lt;- read.table(&#39;/share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase2/TargetDatabase/Demo_data/merged_card_profile.tsv&#39;, sep = &#39;\\t&#39;, header = TRUE, check.names = FALSE, na.strings = &#39;?&#39;,comment.char = &#39;?&#39;) head(merged_card_profile, n = 2) ## ID 14286_genefamilies 14287_genefamilies 14288_genefamilies 14289_genefamilies 14290_genefamilies 14291_genefamilies ## 1 UNMAPPED 74770310 78620271 9.108383e+07 59917196 7.522313e+07 83467959 ## 2 gb|AAA20116.1|ARO:3000180|tetA(P)_[Clostridium_perfringens] 0 0 5.717561e+01 0 5.297855e+02 0 ## 14292_genefamilies 14293_genefamilies 14294_genefamilies 14295_genefamilies ## 1 7.715543e+07 33464854 36544800 10196 ## 2 7.087747e+01 0 0 0 ## Read in metadata (Group information) metadata &lt;- read.table(&#39;/share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase2/TargetDatabase/Demo_data/Demo_metadata.xls&#39;, check.names = FALSE, header = TRUE) 6.2.2 Split strain info ## Split strain info. Profile generated from humann2 has species information, thus we need to extract them. ## Straintified profile straintified_merged_card_profile &lt;- merged_card_profile[grep(&#39;\\\\|s_&#39;, merged_card_profile$ID),] head(straintified_merged_card_profile, n = 2) ## ID 14286_genefamilies 14287_genefamilies 14288_genefamilies 14289_genefamilies ## 3 gb|AAA20116.1|ARO:3000180|tetA(P)_[Clostridium_perfringens]|s_Clostridium_perfringens 0.00000 0.00000 57.17561 0 ## 5 gb|AAA20117.1|ARO:3000195|tetB(P)_[Clostridium_perfringens]|s_Clostridium_perfringens 39.23001 24.44716 0.00000 0 ## 14290_genefamilies 14291_genefamilies 14292_genefamilies 14293_genefamilies 14294_genefamilies 14295_genefamilies ## 3 529.7855 0 70.87747 0 0 0 ## 5 1075.7261 0 86.77132 0 0 0 ## Exclude Strain info merged_card_profile &lt;- merged_card_profile[grep(&#39;\\\\|s_&#39;, merged_card_profile$ID, invert = TRUE),] head(merged_card_profile, n = 2) ## ID 14286_genefamilies 14287_genefamilies 14288_genefamilies 14289_genefamilies 14290_genefamilies 14291_genefamilies ## 1 UNMAPPED 74770310 78620271 9.108383e+07 59917196 7.522313e+07 83467959 ## 2 gb|AAA20116.1|ARO:3000180|tetA(P)_[Clostridium_perfringens] 0 0 5.717561e+01 0 5.297855e+02 0 ## 14292_genefamilies 14293_genefamilies 14294_genefamilies 14295_genefamilies ## 1 7.715543e+07 33464854 36544800 10196 ## 2 7.087747e+01 0 0 0 rownames(straintified_merged_card_profile) &lt;- NULL rownames(merged_card_profile) &lt;- NULL 6.2.3 Rescale card data rescaled_merged_card_profile &lt;- merged_card_profile %&gt;% column_to_rownames(&#39;ID&#39;) %&gt;% apply(., 2, function(x) x/sum(x)) %&gt;% as.data.frame() head(rescaled_merged_card_profile, n = 2) ## 14286_genefamilies 14287_genefamilies 14288_genefamilies 14289_genefamilies 14290_genefamilies 14291_genefamilies ## UNMAPPED 0.9965919 0.9986121 9.977503e-01 0.9971895 9.975481e-01 0.9987778 ## gb|AAA20116.1|ARO:3000180|tetA(P)_[Clostridium_perfringens] 0.0000000 0.0000000 6.263129e-07 0.0000000 7.025585e-06 0.0000000 ## 14292_genefamilies 14293_genefamilies 14294_genefamilies 14295_genefamilies ## UNMAPPED 9.98160e-01 0.9985668 0.996236 1 ## gb|AAA20116.1|ARO:3000180|tetA(P)_[Clostridium_perfringens] 9.16942e-07 0.0000000 0.000000 0 6.2.4 Remove UNMAPPED row ## In this chunk, we remove the umapped row in rescaled profile table because we are not able to intepret UNMAPPED entry. card_profile &lt;- rescaled_merged_card_profile[grep(&quot;UNMAPPED&quot;, rownames(rescaled_merged_card_profile), invert = TRUE), ] 6.2.5 Filter low abundance data ## In this chunck, we can aggregate low abundance features to one row. ## Import functions for filtering into enviroment. ## 1e-12 is an empirical threshold fot filtering low abundance feature. According to published paper [Obese Individuals with and without Type 2 Diabetes Show Different Gut Microbial Functional Capacity and Composition] https://doi.org/10.1016/j.chom.2019.07.004, pathway with top 50% mean abundance and top 50% variance are left. But in MaAsLin2ï¼Œpathway with abundance less than 10-10 are filtered by default. source(&#39;/share/projects/SOP/Functional_Analysis/Tongbangzhuo/Phase1/Kegg/Scripts/R/ultility.R&#39;) Filtered_card_profile &lt;- aggregate_low_abundance(input_data = card_profile, threshold = 1e-12) ## threshold should be modified based on your on study head(Filtered_card_profile) ## 14286_genefamilies 14287_genefamilies 14288_genefamilies 14289_genefamilies ## gb|AAA20116.1|ARO:3000180|tetA(P)_[Clostridium_perfringens] 0.000000e+00 0.000000e+00 6.263129e-07 0.000000e+00 ## gb|AAA20117.1|ARO:3000195|tetB(P)_[Clostridium_perfringens] 5.228855e-07 3.105208e-07 0.000000e+00 0.000000e+00 ## gb|AAA21532.1|ARO:3003559|cepA_beta-lactamase_[Bacteroides_fragilis] 0.000000e+00 0.000000e+00 4.097285e-07 2.170252e-06 ## gb|AAA22851.1|ARO:3000179|tet(L)_[Geobacillus_stearothermophilus] 0.000000e+00 0.000000e+00 3.862229e-06 0.000000e+00 ## gb|AAA23018.1|ARO:3004454|Campylobacter_coli_chloramphenicol_acetyltransferase_[Campylobacter_coli] 5.029702e-07 0.000000e+00 3.202401e-06 0.000000e+00 ## gb|AAA23033.2|ARO:3000190|tetO_[Campylobacter_jejuni] 7.318239e-05 5.256998e-05 6.987475e-05 1.643611e-04 ## 14290_genefamilies 14291_genefamilies 14292_genefamilies 14293_genefamilies ## gb|AAA20116.1|ARO:3000180|tetA(P)_[Clostridium_perfringens] 7.025585e-06 0.000000e+00 9.169420e-07 0.000000e+00 ## gb|AAA20117.1|ARO:3000195|tetB(P)_[Clostridium_perfringens] 1.426541e-05 0.000000e+00 1.122561e-06 0.000000e+00 ## gb|AAA21532.1|ARO:3003559|cepA_beta-lactamase_[Bacteroides_fragilis] 1.450946e-06 4.197908e-06 7.825537e-07 8.941966e-07 ## gb|AAA22851.1|ARO:3000179|tet(L)_[Geobacillus_stearothermophilus] 3.221460e-06 0.000000e+00 0.000000e+00 0.000000e+00 ## gb|AAA23018.1|ARO:3004454|Campylobacter_coli_chloramphenicol_acetyltransferase_[Campylobacter_coli] 0.000000e+00 0.000000e+00 7.595413e-07 6.190414e-07 ## gb|AAA23033.2|ARO:3000190|tetO_[Campylobacter_jejuni] 7.846210e-05 3.909896e-05 8.713070e-05 1.479822e-04 ## 14294_genefamilies 14295_genefamilies ## gb|AAA20116.1|ARO:3000180|tetA(P)_[Clostridium_perfringens] 0.000000e+00 0 ## gb|AAA20117.1|ARO:3000195|tetB(P)_[Clostridium_perfringens] 0.000000e+00 0 ## gb|AAA21532.1|ARO:3003559|cepA_beta-lactamase_[Bacteroides_fragilis] 3.664871e-05 0 ## gb|AAA22851.1|ARO:3000179|tet(L)_[Geobacillus_stearothermophilus] 4.363010e-05 0 ## gb|AAA23018.1|ARO:3004454|Campylobacter_coli_chloramphenicol_acetyltransferase_[Campylobacter_coli] 0.000000e+00 0 ## gb|AAA23033.2|ARO:3000190|tetO_[Campylobacter_jejuni] 2.776405e-05 0 6.2.6 Basic analysis Compositional barplot ## In this chunk, we construct stacked pathway barplot to depict the pathway composition of samples, we use function plot_stacked_bar from xviz to plot. ## In case there are too much entries, we use parameter &quot;collapse&quot; in plot_stacked_bar function to integrate entries whose abundance are below given threshold into &quot;Others&quot;. ## Note: Adjust your graph size to show complete graph. compositional_plt &lt;- xviz::plot_stacked_bar(otu_table = Filtered_card_profile %&gt;% t() %&gt;% as.data.frame(), metadata = metadata, collapse = 0.01) + theme(axis.text.x = element_text(vjust = 1)) compositional_plt Beta diversity ## In this chunk, we inherit the concept of Beta diversity of microbial taxa data and apply it to pathway data to explore the similarity between samples. ## construct phyloseq for beta diversity analysis tmp_phyloseq &lt;- phyloseq(otu_table(Filtered_card_profile, taxa_are_rows = TRUE), sample_data(metadata)) ## PCoA plot PCOA_plot &lt;- xviz::plot_beta_diversity(phyloseq = tmp_phyloseq, feature = &#39;group&#39;, method = &#39;bray&#39;, label = TRUE) print(PCOA_plot) ## PERMANOVA test &amp; beta dispersion test ## We use PERMANOVA test to check the differences of function composition among different groups. Additionally, we also take homogeneity of group variance into consideration. dispersion_permanova_res &lt;- run_permanova_betadisp(physeq = tmp_phyloseq, vars = &#39;group&#39; ) dispersion_permanova_res ## $betadisp_res ## variable p_value analysis ## 1 group 0.607 beta_dispersion_permutation999 ## ## $permanova_res ## variable p_value R2 analysis ## 1 group 0.543 0.1016834 permanova_permutation999 6.3 Differential analysis 6.3.1 Filter low prevalence pathway ## Low prevalence pathways are pathways only occur in minor samples. ## In this chunk we filter low prevalence data with threshold of 0.02, 0.02 is an arbitrary value, users should change this value according to their own study. print(paste0(nrow(Filtered_card_profile), &#39; entries before filtering low prevalence data&#39;)) ## [1] &quot;790 entries before filtering low prevalence data&quot; Filtered_card_profile &lt;- filter_prevalence(otu_table = Filtered_card_profile, threshold = 0.02, taxa_are_rows = TRUE ) head(Filtered_card_profile, n =2) ## 14286_genefamilies 14287_genefamilies 14288_genefamilies 14289_genefamilies 14290_genefamilies 14291_genefamilies ## gb|AAA20116.1|ARO:3000180|tetA(P)_[Clostridium_perfringens] 0.000000e+00 0.000000e+00 6.263129e-07 0 7.025585e-06 0 ## gb|AAA20117.1|ARO:3000195|tetB(P)_[Clostridium_perfringens] 5.228855e-07 3.105208e-07 0.000000e+00 0 1.426541e-05 0 ## 14292_genefamilies 14293_genefamilies 14294_genefamilies 14295_genefamilies ## gb|AAA20116.1|ARO:3000180|tetA(P)_[Clostridium_perfringens] 9.169420e-07 0 0 0 ## gb|AAA20117.1|ARO:3000195|tetB(P)_[Clostridium_perfringens] 1.122561e-06 0 0 0 print(paste0(nrow(Filtered_card_profile), &#39; entries After filtering low prevalence data&#39;)) ## [1] &quot;486 entries After filtering low prevalence data&quot; 6.3.2 DA DA with LM ## In this chunk, you would be using logistic regression model to find pathways that are significantly enriched in certain group. ## Due to the nature of compositional data, we cannot apply linear models to compositional data directly. ## Transformation of relative abundance data should be carried out before feeding the data to LM. ## Here, we add a very small value (1e-12) to the pathway profile table to avoid genrating NA during transformation, then use logit transformation to transform data. And eventually we apply LM to the transformed data ## Adding small value to the profile table (The value is arbitrary). DA_card_profile &lt;- Filtered_card_profile + 1e-12 ## Reshape profile data table and use logit transformation. DA_card_profile &lt;- DA_card_profile %&gt;% t() %&gt;% as.data.frame() %&gt;% rownames_to_column(&#39;SeqID&#39;) %&gt;% as.data.frame() DA_metadata &lt;- metadata %&gt;% rownames_to_column(&#39;SeqID&#39;) %&gt;% as.data.frame() ## Reshape dataframe into long table DA_input &lt;- merge(DA_card_profile, DA_metadata, by=&#39;SeqID&#39;) %&gt;% reshape2::melt(value.name = &#39;RA&#39;, variable.name = &#39;PathwayIDs&#39;) ## Logit transformation DA_input %&lt;&gt;% mutate(RA_logit = log(RA/(1-RA))) ## Fit data to LM ## Loop over each pathway in two groups LM_res &lt;- DA_input %&gt;% split(.$PathwayIDs) %&gt;% lapply(., function(x){ gml_res_summary &lt;- lm(data = x, formula = RA_logit ~ group) %&gt;% summary() %&gt;% .$coefficients %&gt;% as.matrix() %&gt;% as.data.frame() %&gt;% rownames_to_column(var = &quot;Factors&quot;) } ) ## Merge all result in one table LM_res &lt;- LM_res %&gt;% data.table::rbindlist(idcol = &quot;PathwayID&quot;) %&gt;% filter(Factors != &quot;(Intercept)&quot;) ## Adjust p value using p.adjust function from stats package, you could choose different adjust method. LM_res %&lt;&gt;% mutate(adjust.p = stats::p.adjust(.$`Pr(&gt;|t|)`, method = &#39;BH&#39;)) ## Calculate effect size (Odds ratio) of each feature LM_res %&lt;&gt;% mutate(OR = exp(Estimate)) %&gt;% as.data.frame() head(LM_res) ## PathwayID Factors Estimate Std. Error t value Pr(&gt;|t|) adjust.p OR ## 1 gb|AAA20116.1|ARO:3000180|tetA(P)_[Clostridium_perfringens] groupB -3.0767765 4.516473 -0.68123433 0.5149549 0.999663 0.046107646 ## 2 gb|AAA20117.1|ARO:3000195|tetB(P)_[Clostridium_perfringens] groupB -5.6710734 4.484963 -1.26446392 0.2416563 0.999663 0.003444166 ## 3 gb|AAA21532.1|ARO:3003559|cepA_beta-lactamase_[Bacteroides_fragilis] groupB 3.6479383 4.597033 0.79354186 0.4503555 0.999663 38.395423365 ## 4 gb|AAA22851.1|ARO:3000179|tet(L)_[Geobacillus_stearothermophilus] groupB -2.5121613 5.100610 -0.49252174 0.6355821 0.999663 0.081092784 ## 5 gb|AAA23018.1|ARO:3004454|Campylobacter_coli_chloramphenicol_acetyltransferase_[Campylobacter_coli] groupB -0.2462604 4.772051 -0.05160472 0.9601089 0.999663 0.781718662 ## 6 gb|AAA23033.2|ARO:3000190|tetO_[Campylobacter_jejuni] groupB -3.8655588 3.602882 -1.07290747 0.3146072 0.999663 0.020951211 Show DA result with volcano plot ## Plot volcano plot to show effect size (x-axis) and p value (y-axis) of pathways. ## Here we only tend to hightlight pathways that satisfy adjust.p &lt; 0.7 and OR &gt; 0.01 at the same time. ## You can nevertheless choose different threshold accroding to your own data. volcano_plot &lt;- LM_res %&gt;% mutate(p.log = -log10(`Pr(&gt;|t|)`), log10OR = log10(OR)) %&gt;% ggplot(aes(x = log10OR, y = p.log)) + geom_point(size = 0.5) + geom_point(size = 0.5, color = &quot;red&quot;, data = . %&gt;% filter(`Pr(&gt;|t|)` &lt; 0.05 &amp; OR &gt; 0.2)) + theme_bw() + geom_vline(xintercept = log10(c(0.05, 0.1, 0.2, 0.5, 1, 2)), size = 0.05, color = &quot;grey&quot;) + geom_hline(yintercept = -log10(c(0.7)), size = 0.05, color = &quot;grey&quot;) + theme(aspect.ratio = 1, panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ) + labs(x = &quot;Estimated Odds Ratio&quot;, y = &quot;FDR p-values(-log10)&quot;) print(volcano_plot) 6.4 Session info devtools::session_info() ## â”€ Session info â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ ## setting value ## version R version 3.6.3 (2020-02-29) ## os Ubuntu 16.04.7 LTS ## system x86_64, linux-gnu ## ui RStudio ## language (EN) ## collate en_IN.UTF-8 ## ctype en_IN.UTF-8 ## tz Asia/Hong_Kong ## date 2022-07-21 ## rstudio 1.1.419 (server) ## pandoc 2.7.3 @ /usr/bin/ (via rmarkdown) ## ## â”€ Packages â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ ## ! package * version date (UTC) lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 3.6.3) ## ade4 1.7-17 2021-06-17 [1] CRAN (R 3.6.3) ## ALDEx2 1.18.0 2019-10-29 [1] Bioconductor ## annotate 1.64.0 2019-10-29 [1] Bioconductor ## AnnotationDbi * 1.48.0 2019-10-29 [1] Bioconductor ## ape 5.5 2021-04-25 [1] CRAN (R 3.6.3) ## assertthat 0.2.1 2019-03-21 [2] CRAN (R 3.6.3) ## backports 1.4.1 2021-12-13 [1] CRAN (R 3.6.3) ## base64enc 0.1-3 2015-07-28 [2] CRAN (R 3.6.3) ## bayesm 3.1-4 2019-10-15 [1] CRAN (R 3.6.3) ## biglm 0.9-2.1 2020-11-27 [1] CRAN (R 3.6.3) ## Biobase * 2.46.0 2019-10-29 [2] Bioconductor ## BiocGenerics * 0.32.0 2019-10-29 [2] Bioconductor ## BiocParallel * 1.20.1 2019-12-21 [2] Bioconductor ## biomformat 1.14.0 2019-10-29 [1] Bioconductor ## Biostrings 2.54.0 2019-10-29 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] CRAN (R 3.6.3) ## bit64 4.0.5 2020-08-30 [1] CRAN (R 3.6.3) ## bitops 1.0-7 2021-04-24 [1] CRAN (R 3.6.3) ## blob 1.2.2 2021-07-23 [1] CRAN (R 3.6.3) ## bookdown 0.24 2021-09-02 [1] CRAN (R 3.6.3) ## brio 1.1.3 2021-11-30 [2] CRAN (R 3.6.3) ## broom 0.7.12 2022-01-28 [1] CRAN (R 3.6.3) ## bslib 0.3.1 2021-10-06 [1] CRAN (R 3.6.3) ## cachem 1.0.5 2021-05-15 [1] CRAN (R 3.6.3) ## callr 3.7.0 2021-04-20 [2] CRAN (R 3.6.3) ## car 3.0-12 2021-11-06 [1] CRAN (R 3.6.3) ## carData 3.0-4 2020-05-22 [1] CRAN (R 3.6.3) ## caTools 1.18.2 2021-03-28 [1] CRAN (R 3.6.3) ## cellranger 1.1.0 2016-07-27 [1] CRAN (R 3.6.3) ## checkmate 2.0.0 2020-02-06 [1] CRAN (R 3.6.3) ## circlize * 0.4.13 2021-06-09 [1] CRAN (R 3.6.3) ## cli 3.1.0 2021-10-27 [1] CRAN (R 3.6.3) ## clue 0.3-59 2021-04-16 [1] CRAN (R 3.6.3) ## cluster 2.1.0 2019-06-19 [2] CRAN (R 3.6.3) ## coda 0.19-4 2020-09-30 [1] CRAN (R 3.6.3) ## codetools 0.2-16 2018-12-24 [2] CRAN (R 3.6.3) ## colorspace 2.0-2 2021-06-24 [1] CRAN (R 3.6.3) ## ComplexHeatmap * 2.2.0 2019-10-29 [1] Bioconductor ## compositions 2.0-2 2021-07-14 [1] CRAN (R 3.6.3) ## cowplot * 1.1.1 2020-12-30 [1] CRAN (R 3.6.3) ## crayon 1.5.0 2022-02-14 [1] CRAN (R 3.6.3) ## dada2 * 1.14.1 2020-02-22 [1] Bioconductor ## data.table * 1.14.0 2021-02-21 [1] CRAN (R 3.6.3) ## DBI 1.1.1 2021-01-15 [1] CRAN (R 3.6.3) ## dbplyr 2.1.1 2021-04-06 [1] CRAN (R 3.6.3) ## DelayedArray * 0.12.3 2020-04-09 [2] Bioconductor ## DelayedMatrixStats 1.8.0 2019-10-29 [1] Bioconductor ## DEoptimR 1.0-9 2021-05-24 [1] CRAN (R 3.6.3) ## desc 1.4.1 2022-03-06 [2] CRAN (R 3.6.3) ## DESeq2 * 1.26.0 2019-10-29 [1] Bioconductor ## devtools 2.4.3 2021-11-30 [1] CRAN (R 3.6.3) ## digest 0.6.29 2021-12-01 [1] CRAN (R 3.6.3) ## dplyr * 1.0.6 2021-05-05 [1] CRAN (R 3.6.3) ## edgeR 3.28.1 2020-02-26 [1] Bioconductor ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 3.6.3) ## EnhancedVolcano * 1.4.0 2019-10-29 [1] Bioconductor ## evaluate 0.15 2022-02-18 [2] CRAN (R 3.6.3) ## fansi 1.0.2 2022-01-14 [1] CRAN (R 3.6.3) ## farver 2.1.0 2021-02-28 [2] CRAN (R 3.6.3) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 3.6.3) ## fdrtool 1.2.17 2021-11-13 [1] CRAN (R 3.6.3) ## forcats * 0.5.1 2021-01-27 [1] CRAN (R 3.6.3) ## foreach 1.5.2 2022-02-02 [2] CRAN (R 3.6.3) ## foreign 0.8-75 2020-01-20 [2] CRAN (R 3.6.3) ## formatR 1.12 2022-03-31 [2] CRAN (R 3.6.3) ## Formula 1.2-4 2020-10-16 [1] CRAN (R 3.6.3) ## fs 1.5.2 2021-12-08 [1] CRAN (R 3.6.3) ## futile.logger 1.4.3 2016-07-10 [2] CRAN (R 3.6.3) ## futile.options 1.0.1 2018-04-20 [2] CRAN (R 3.6.3) ## genefilter 1.68.0 2019-10-29 [1] Bioconductor ## geneplotter 1.64.0 2019-10-29 [1] Bioconductor ## generics 0.1.2 2022-01-31 [1] CRAN (R 3.6.3) ## GenomeInfoDb * 1.22.1 2020-03-27 [2] Bioconductor ## GenomeInfoDbData 1.2.2 2020-08-24 [2] Bioconductor ## GenomicAlignments 1.22.1 2019-11-12 [1] Bioconductor ## GenomicRanges * 1.38.0 2019-10-29 [2] Bioconductor ## getopt 1.20.3 2019-03-22 [1] CRAN (R 3.6.3) ## GetoptLong 1.0.5 2020-12-15 [1] CRAN (R 3.6.3) ## GGally * 2.1.2 2021-06-21 [1] CRAN (R 3.6.3) ## ggbipart * 0.1.2 2022-07-20 [1] Github (pedroj/bipartite_plots@162f577) ## ggExtra * 0.9 2019-08-27 [1] CRAN (R 3.6.3) ## ggplot2 * 3.3.5 2021-06-25 [1] CRAN (R 3.6.3) ## ggpubr * 0.4.0 2020-06-27 [1] CRAN (R 3.6.3) ## ggrepel * 0.9.1 2021-01-15 [2] CRAN (R 3.6.3) ## ggsci * 2.9 2018-05-14 [1] CRAN (R 3.6.3) ## ggsignif 0.6.3 2021-09-09 [1] CRAN (R 3.6.3) ## glmnet 4.1-2 2021-06-24 [1] CRAN (R 3.6.3) ## GlobalOptions 0.1.2 2020-06-10 [1] CRAN (R 3.6.3) ## glue 1.6.1 2022-01-22 [1] CRAN (R 3.6.3) ## GMPR 0.1.3 2021-05-17 [1] local ## gplots 3.1.1 2020-11-28 [1] CRAN (R 3.6.3) ## graph 1.64.0 2019-10-29 [1] Bioconductor ## gridExtra 2.3 2017-09-09 [2] CRAN (R 3.6.3) ## gtable 0.3.0 2019-03-25 [2] CRAN (R 3.6.3) ## gtools 3.9.2 2021-06-06 [1] CRAN (R 3.6.3) ## haven 2.4.1 2021-04-23 [1] CRAN (R 3.6.3) ## highr 0.9 2021-04-16 [1] CRAN (R 3.6.3) ## Hmisc 4.5-0 2021-02-28 [1] CRAN (R 3.6.3) ## hms 1.1.1 2021-09-26 [1] CRAN (R 3.6.3) ## htmlTable 2.3.0 2021-10-12 [1] CRAN (R 3.6.3) ## htmltools 0.5.2 2021-08-25 [1] CRAN (R 3.6.3) ## htmlwidgets 1.5.4 2021-09-08 [2] CRAN (R 3.6.3) ## httpuv 1.6.1 2021-05-07 [1] CRAN (R 3.6.3) ## httr 1.4.3 2022-05-04 [2] CRAN (R 3.6.3) ## hwriter 1.3.2 2014-09-10 [1] CRAN (R 3.6.3) ## igraph 1.3.1 2022-04-20 [2] CRAN (R 3.6.3) ## IHW 1.14.0 2019-10-29 [1] Bioconductor ## IRanges * 2.20.2 2020-01-13 [2] Bioconductor ## iterators 1.0.14 2022-02-05 [2] CRAN (R 3.6.3) ## jpeg 0.1-9 2021-07-24 [1] CRAN (R 3.6.3) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 3.6.3) ## jsonlite 1.8.0 2022-02-22 [2] CRAN (R 3.6.3) ## KEGGgraph 1.46.0 2019-10-29 [1] Bioconductor ## KEGGREST 1.26.1 2019-11-06 [1] Bioconductor ## KernSmooth 2.23-16 2019-10-15 [2] CRAN (R 3.6.3) ## knitr 1.36 2021-09-29 [1] CRAN (R 3.6.3) ## labeling 0.4.2 2020-10-20 [2] CRAN (R 3.6.3) ## lambda.r 1.2.4 2019-09-18 [2] CRAN (R 3.6.3) ## later 1.3.0 2021-08-18 [2] CRAN (R 3.6.3) ## lattice * 0.20-38 2018-11-04 [2] CRAN (R 3.6.3) ## latticeExtra 0.6-29 2019-12-19 [1] CRAN (R 3.6.3) ## lazyeval 0.2.2 2019-03-15 [2] CRAN (R 3.6.3) ## lifecycle 1.0.1 2021-09-24 [1] CRAN (R 3.6.3) ## limma 3.42.2 2020-02-03 [2] Bioconductor ## locfit 1.5-9.4 2020-03-25 [1] CRAN (R 3.6.3) ## lpsymphony 1.14.0 2019-10-29 [1] Bioconductor (R 3.6.3) ## lubridate 1.7.10 2021-02-26 [1] CRAN (R 3.6.3) ## Maaslin2 1.7.3 2022-03-23 [1] Github (biobakery/maaslin2@8d090e4) ## magrittr * 2.0.2 2022-01-26 [1] CRAN (R 3.6.3) ## MASS 7.3-54 2021-05-03 [1] CRAN (R 3.6.3) ## Matrix 1.3-4 2021-06-01 [1] CRAN (R 3.6.3) ## matrixStats * 0.60.0 2021-07-26 [1] CRAN (R 3.6.3) ## mbzinb 0.2 2021-06-23 [1] local ## memoise 2.0.1 2021-11-26 [2] CRAN (R 3.6.3) ## metagenomeSeq 1.28.2 2020-02-03 [1] Bioconductor ## metamicrobiomeR 1.1 2021-02-03 [1] local ## mgcv 1.8-31 2019-11-09 [2] CRAN (R 3.6.3) ## microbiome 1.8.0 2019-10-29 [1] Bioconductor ## mime 0.12 2021-09-28 [2] CRAN (R 3.6.3) ## miniUI 0.1.1.1 2018-05-18 [1] CRAN (R 3.6.3) ## modelr 0.1.8 2020-05-19 [1] CRAN (R 3.6.3) ## multtest 2.42.0 2019-10-29 [2] Bioconductor ## munsell 0.5.0 2018-06-12 [2] CRAN (R 3.6.3) ## mvtnorm 1.1-3 2021-10-08 [1] CRAN (R 3.6.3) ## network * 1.17.1 2021-06-14 [1] CRAN (R 3.6.3) ## nlme 3.1-144 2020-02-06 [2] CRAN (R 3.6.3) ## nnet 7.3-12 2016-02-02 [2] CRAN (R 3.6.3) ## optparse 1.7.1 2021-10-08 [1] CRAN (R 3.6.3) ## org.Hs.eg.db * 3.10.0 2021-12-08 [1] Bioconductor ## pathview * 1.26.0 2019-10-29 [1] Bioconductor ## pcaPP 1.9-74 2021-04-23 [1] CRAN (R 3.6.3) ## permute * 0.9-5 2019-03-12 [1] CRAN (R 3.6.3) ## phyloseq * 1.30.0 2019-10-29 [1] Bioconductor ## pillar 1.7.0 2022-02-01 [1] CRAN (R 3.6.3) ## pkgbuild 1.3.1 2021-12-20 [2] CRAN (R 3.6.3) ## pkgconfig 2.0.3 2019-09-22 [2] CRAN (R 3.6.3) ## pkgload 1.2.4 2021-11-30 [2] CRAN (R 3.6.3) ## plotly * 4.10.0 2021-10-09 [1] CRAN (R 3.6.3) ## plyr 1.8.7 2022-03-24 [2] CRAN (R 3.6.3) ## png 0.1-7 2013-12-03 [1] CRAN (R 3.6.3) ## prettyunits 1.1.1 2020-01-24 [2] CRAN (R 3.6.3) ## processx 3.5.3 2022-03-25 [2] CRAN (R 3.6.3) ## promises 1.2.0.1 2021-02-11 [2] CRAN (R 3.6.3) ## protoclust 1.6.3 2019-01-31 [1] CRAN (R 3.6.3) ## ps 1.7.0 2022-04-23 [2] CRAN (R 3.6.3) ## pscl 1.5.5 2020-03-07 [1] CRAN (R 3.6.3) ## purrr * 0.3.4 2020-04-17 [2] CRAN (R 3.6.3) ## qvalue 2.18.0 2019-10-29 [1] Bioconductor ## R6 2.5.1 2021-08-19 [1] CRAN (R 3.6.3) ## RAIDA 1.0 2021-06-23 [1] local ## ranacapa 0.1.0 2021-06-18 [1] Github (gauravsk/ranacapa@58c0cab) ## RColorBrewer * 1.1-3 2022-04-03 [2] CRAN (R 3.6.3) ## Rcpp * 1.0.7 2021-07-07 [1] CRAN (R 3.6.3) ## RcppParallel 5.1.4 2021-05-04 [1] CRAN (R 3.6.3) ## RCurl 1.98-1.6 2022-02-08 [2] CRAN (R 3.6.3) ## readr * 2.0.0 2021-07-20 [1] CRAN (R 3.6.3) ## readxl * 1.3.1 2019-03-13 [1] CRAN (R 3.6.3) ## remotes 2.4.2 2021-11-30 [1] CRAN (R 3.6.3) ## reprex 2.0.1 2021-08-05 [1] CRAN (R 3.6.3) ## reshape 0.8.9 2022-04-12 [1] CRAN (R 3.6.3) ## reshape2 * 1.4.4 2020-04-09 [2] CRAN (R 3.6.3) ## Rgraphviz 2.30.0 2019-10-29 [1] Bioconductor ## rhdf5 2.30.1 2019-11-26 [1] Bioconductor ## Rhdf5lib 1.8.0 2019-10-29 [1] Bioconductor ## rJava 1.0-5 2021-09-24 [1] CRAN (R 3.6.3) ## rjson 0.2.20 2018-06-08 [1] CRAN (R 3.6.3) ## R rlang 1.0.2 &lt;NA&gt; [2] &lt;NA&gt; ## rmarkdown 2.11 2021-09-14 [1] CRAN (R 3.6.3) ## robustbase 0.93-9 2021-09-27 [1] CRAN (R 3.6.3) ## rpart 4.1-15 2019-04-12 [2] CRAN (R 3.6.3) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 3.6.3) ## Rsamtools 2.2.3 2020-02-23 [1] Bioconductor ## rsconnect 0.8.25 2021-11-19 [1] CRAN (R 3.6.3) ## RSQLite 2.2.7 2021-04-22 [1] CRAN (R 3.6.3) ## rstatix 0.7.0 2021-02-13 [1] CRAN (R 3.6.3) ## rstudioapi 0.13 2020-11-12 [2] CRAN (R 3.6.3) ## Rtsne 0.15 2018-11-10 [1] CRAN (R 3.6.3) ## rvest 1.0.2 2021-10-16 [1] CRAN (R 3.6.3) ## S4Vectors * 0.24.4 2020-04-09 [2] Bioconductor ## sass 0.4.0 2021-05-12 [1] CRAN (R 3.6.3) ## scales 1.2.0 2022-04-13 [2] CRAN (R 3.6.3) ## seqinr * 4.2-8 2021-06-09 [1] CRAN (R 3.6.3) ## sessioninfo 1.2.2 2021-12-06 [2] CRAN (R 3.6.3) ## shape 1.4.6 2021-05-19 [1] CRAN (R 3.6.3) ## shiny 1.7.1 2021-10-02 [1] CRAN (R 3.6.3) ## ShortRead 1.44.3 2020-02-03 [1] Bioconductor ## slam 0.1-49 2021-11-17 [1] CRAN (R 3.6.3) ## sna 2.6 2020-10-06 [1] CRAN (R 3.6.3) ## statnet.common 4.5.0 2021-06-05 [1] CRAN (R 3.6.3) ## VP stringi 1.7.6 2021-08-25 [2] CRAN (R 3.6.3) (on disk 1.7.4) ## stringr * 1.4.0 2019-02-10 [2] CRAN (R 3.6.3) ## SummarizedExperiment * 1.16.1 2019-12-19 [2] Bioconductor ## survival 3.1-8 2019-12-03 [2] CRAN (R 3.6.3) ## tensorA 0.36.2 2020-11-19 [1] CRAN (R 3.6.3) ## testthat 3.1.4 2022-04-26 [2] CRAN (R 3.6.3) ## textshape 1.7.3 2021-05-28 [1] CRAN (R 3.6.3) ## tibble * 3.1.6 2021-11-07 [1] CRAN (R 3.6.3) ## tidyr * 1.2.0 2022-02-01 [1] CRAN (R 3.6.3) ## tidyselect 1.1.1 2021-04-30 [1] CRAN (R 3.6.3) ## tidyverse * 1.3.1 2021-04-15 [1] CRAN (R 3.6.3) ## tzdb 0.2.0 2021-10-27 [1] CRAN (R 3.6.3) ## UpSetR 1.4.0 2019-05-22 [1] CRAN (R 3.6.3) ## usethis 2.1.6 2022-05-25 [2] CRAN (R 3.6.3) ## utf8 1.2.2 2021-07-24 [1] CRAN (R 3.6.3) ## vctrs 0.3.8 2021-04-29 [1] CRAN (R 3.6.3) ## vegan * 2.5-7 2020-11-28 [1] CRAN (R 3.6.3) ## VennDiagram 1.7.1 2021-12-02 [1] CRAN (R 3.6.3) ## viridisLite 0.4.0 2021-04-13 [2] CRAN (R 3.6.3) ## vroom 1.5.7 2021-11-30 [1] CRAN (R 3.6.3) ## wesanderson * 0.3.6.9000 2021-07-21 [1] Github (karthik/wesanderson@651c944) ## withr 2.4.3 2021-11-30 [1] CRAN (R 3.6.3) ## Wrench 1.4.0 2019-10-29 [1] Bioconductor ## xfun 0.23 2021-05-15 [1] CRAN (R 3.6.3) ## xlsx * 0.6.5 2020-11-10 [1] CRAN (R 3.6.3) ## xlsxjars 0.6.1 2014-08-22 [1] CRAN (R 3.6.3) ## XMAS * 0.0.0.9000 2022-03-23 [1] local ## XML 3.99-0.3 2020-01-20 [1] CRAN (R 3.6.3) ## xml2 1.3.3 2021-11-30 [2] CRAN (R 3.6.3) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 3.6.3) ## XVector 0.26.0 2019-10-29 [2] Bioconductor ## xviz * 1.1.0 2021-01-14 [1] local ## yaml 2.2.2 2022-01-25 [1] CRAN (R 3.6.3) ## zlibbioc 1.32.0 2019-10-29 [2] Bioconductor ## ## [1] /share/home/tongbangzhuo/R/x86_64-pc-linux-gnu-library/3.6 ## [2] /opt/R-3.6.3/lib/R/library ## ## V â”€â”€ Loaded and on-disk version mismatch. ## P â”€â”€ Loaded and on-disk path mismatch. ## R â”€â”€ Package was removed from disk. ## ## â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ "],["msea.html", "Chapter 7 MSEA 7.1 Execute MSEA with python script on server 7.2 Read in MSEA result 7.3 Filter and Visualize MSEA result 7.4 Draw bipartit graph to show the relation between human genes and microbial Genus with ggnet.", " Chapter 7 MSEA This is a markdown tutorial for MSEA. To run MSEA, you need to Install MSEA to your default python before running this template. Installation instruction: https://msea.readthedocs.io/en/latest/quickstart.html#installation. You can run MSEA when you got genus that youâ€™re interested in (e.g., DA genus), write all genus into one txt file, one genus per line and feed the file to MSEA as input. 7.1 Execute MSEA with python script on server You can run MSEA analysis with MSEA_Run.py on server, one required parameters and two optional parameters need to be provided for the script: â€“input (Required), input genus list file for MSEA, one genus per line. â€“output (Optional), output csv file of MSEA result. Default testout.csv â€“PerturbationTimes (Optional), number of perturbation. Fisherâ€™s excat test has bias on group with large number of samples, MSEA uses random sampling to remove the bias. Larger number of perturbation would cause longer runtime. Default 50. Citation: https://www.nature.com/articles/s41598-020-78511-y /home/tongbangzhuo/Software/miniconda3/bin/python /share/projects/SOP/Functional_Analysis/Tongbangzhuo/MSEA/MSEA_Run.py --input /share/projects/SOP/Functional_Analysis/Tongbangzhuo/MSEA/test_input --output testout.csv --PerturbationTimes 10 ## ## Reading database file ## ## Calculating empirical ranks for each set... ## Number of unique microbes: 566 ## 0%| | 0/10 [00:00&lt;?, ?it/s] 10%|â–ˆ | 1/10 [00:00&lt;00:05, 1.58it/s] 20%|â–ˆâ–ˆ | 2/10 [00:01&lt;00:05, 1.49it/s] 30%|â–ˆâ–ˆâ–ˆ | 3/10 [00:01&lt;00:04, 1.52it/s] 40%|â–ˆâ–ˆâ–ˆâ–ˆ | 4/10 [00:02&lt;00:03, 1.52it/s] 50%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ | 5/10 [00:03&lt;00:03, 1.39it/s] 60%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ | 6/10 [00:04&lt;00:03, 1.26it/s] 70%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ | 7/10 [00:05&lt;00:02, 1.31it/s] 80%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ | 8/10 [00:05&lt;00:01, 1.37it/s] 90%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ | 9/10 [00:06&lt;00:00, 1.42it/s] 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 10/10 [00:07&lt;00:00, 1.44it/s] 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 10/10 [00:07&lt;00:00, 1.41it/s] ## ## Performing MSEA with adjustment ## ## Showing the head of result table: ## oddsratio ... n_shared ## term ... ## ULK1 66.666667 ... 4 ## XIAP 43.478261 ... 5 ## IRF7 55.555556 ... 5 ## HP 27.586207 ... 4 ## GNAS 85.714286 ... 3 ## ## [5 rows x 7 columns] ## ## Finished !! 7.2 Read in MSEA result library(dplyr) library(magrittr) library(ggplot2) library(ggbipart) library(stringr) library(tibble) library(wesanderson) MSEA_res = read.csv(&#39;/share/projects/SOP/Functional_Analysis/Tongbangzhuo/MSEA/testout.csv&#39;, sep = &#39;\\t&#39;) head(MSEA_res, n=3) ## term oddsratio pvalue qvalue zscore combined_score shared n_shared ## 1 FOLH1 160.00000 3.554225e-07 6.262868e-05 -5.371776 79.77066 [&#39;Sodalis&#39;, &#39;Pseudomonas&#39;, &#39;Salmonella&#39;, &#39;Azomonas&#39;] 4 ## 2 SERPING1 90.90909 1.148926e-07 6.262868e-05 -3.721529 59.46731 [&#39;Borrelia&#39;, &#39;Sodalis&#39;, &#39;Azomonas&#39;, &#39;Pseudomonas&#39;, &#39;Salmonella&#39;] 5 ## 3 CYP24A1 80.00000 2.714435e-06 7.609163e-05 -3.749628 48.05871 [&#39;Sodalis&#39;, &#39;Pseudomonas&#39;, &#39;Salmonella&#39;, &#39;Azomonas&#39;] 4 As the table shown above, MSEA result has 8 columns: term, human gene names. oddsratio. Odds ratio (Effect size) of the association between human gene and microbial Genus. pvalue. p value of Fisherâ€™s exact test. qvalue. q value of Fisherâ€™s exact test. FDR Benjamini-Hochberg correction applied. zscore. z-score measuring the deviation in expected ranks. combined_score. \\(c = log_{10}(p)*z\\). shared. Genus associated with the human gene. n_shared. Number of genus associated with the human gene. 7.3 Filter and Visualize MSEA result ## Filter MSEA result with qvalue MSEA_res %&lt;&gt;% filter(qvalue &lt; 0.05) ## Draw bipartite with top 10 combined_score human genes ## Define data transforming function Transform_data &lt;- function(df){ All_Genus_in_res &lt;- df$shared %&gt;% unlist() %&gt;% str_remove_all(&#39;\\\\[&#39;) %&gt;% str_remove_all(&#39;\\\\]&#39;) %&gt;% str_remove_all(&quot;&#39;&quot;) %&gt;% str_split(&#39;, &#39;) %&gt;% unlist() %&gt;% unique() lst &lt;- list() for (i in All_Genus_in_res){ count_vec &lt;- c() for (j in (1:nrow(df))){ target_string = df[j,&#39;shared&#39;] %&gt;% str_remove_all(&#39;\\\\[&#39;) %&gt;% str_remove_all(&#39;\\\\]&#39;) %&gt;% str_remove_all(&quot;&#39;&quot;) %&gt;% str_split(&#39;, &#39;) %&gt;% unlist() count = sum(i == target_string) count_vec &lt;- c(count_vec, count) } lst[[i]] &lt;- count_vec } bipartite_tbl &lt;- cbind(Top_MSEA_res, as.data.frame(lst)) %&gt;% dplyr::select(term, all_of(All_Genus_in_res)) %&gt;% column_to_rownames(&#39;term&#39;) return(bipartite_tbl) } ## Select top 10 human genes Top_MSEA_res &lt;- MSEA_res[1:10,] 7.4 Draw bipartit graph to show the relation between human genes and microbial Genus with ggnet. ## Generate data for bipartit graph bipartite_tbl &lt;- Transform_data(Top_MSEA_res) ## Define network layout mymat &lt;- bipartite_tbl coordP &lt;- cbind(rep(2, dim(mymat)[1]), seq(1, dim(mymat)[1]) + 2) coordA &lt;- cbind(rep(4, dim(mymat)[2]), seq(1, dim(mymat)[2]) + 2) mylayout &lt;- as.matrix(rbind(coordP, coordA)) ## Construct network content test.net &lt;- bip_init_network(mymat, mode1 = &#39;HumanGenes&#39;,mode2 = &#39;MicrobialGenus&#39;) # Define groups of network nodes test.net %v% &quot;Group&quot; = get.vertex.attribute(test.net, attrname=&quot;mode&quot;) # Draw network p &lt;- GGally::ggnet2(test.net, mode = mylayout, label = T, size = &quot;degree&quot;, color = &#39;Group&#39;, shape = &#39;Group&#39;, label.size = 5, layout.exp = 1.5, alpha = 0.75) + scale_colour_manual(values = wes_palette(&quot;FantasticFox1&quot;)) + guides(color=guide_legend(&quot;Group&quot;)) p "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
