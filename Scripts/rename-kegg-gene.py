#!/usr/bin/env python
import sys
import gzip
import os
import re
import pandas as pd
import numpy as np

def loadDB(inputFile):
    geneToKO=dict()
    with gzip.open(inputFile, 'rb') as f:
        for line in f:
            infor=line.decode('utf8').strip().split("\t")
            if infor[1].startswith("K"):
                geneToKO[infor[0]]=infor[1]
    return geneToKO

def loadTax(inputFile):
    inputF=open(inputFile,"r")
    flag=0
    taxDict=dict()
    for inline in inputF:
        if inline.startswith("EBA") and (" org " in inline):
            flag=1
        elif flag==1 and inline.startswith("----+-----+-"):
            flag=2
        elif flag==2:
            if inline.startswith("-----------------------------------------------------------------------"):
                flag=0
            else:
                infor=inline.strip().split(" | ")
                taxDict[infor[1]]=infor[-1].replace(" ","_")
        elif inline.startswith("Genes"):
            break
            
    inputF.close()
    return (taxDict)
    
def reformatUnstratified(inputFile,geneToKO,taxDict,convertTax,output):
    KOdict=dict()
    inputF=open(inputFile,"r")
    outputF=open(output,"w")
    for inline in inputF:
        if inline.startswith("#"):
            print (inline.strip(),file=outputF)
        else:
            infor=inline.strip().split("\t")
            species=infor[0].split(":")[0]
            if len(infor[0].split("|"))==2:
                if "s_NA" == (infor[0].split("|")[1]):
                    continue
            if convertTax==1:
                if species in taxDict:
                    species=taxDict[species]
            if len(infor[0].split("|"))==1:
                if infor[0] in geneToKO:
                    if geneToKO[infor[0]] in KOdict:
                        KOdict[geneToKO[infor[0]]]=KOdict[geneToKO[infor[0]]]+";"+geneToKO[infor[0]]+"|s_"+species+"\t"+"\t".join(infor[1:])
                    else:
                        KOdict[geneToKO[infor[0]]]=geneToKO[infor[0]]+"|s_"+species+"\t"+"\t".join(infor[1:])
                else:
                    KOdict[infor[0]]=infor[0]+"|s_"+species+"\t"+"\t".join(infor[1:])
    for (eachKO,KOinfor) in KOdict.items():
        tmpDict=dict()
        tmpList=[]
        tmpItem=KOinfor.split(";")
        for eachItem in tmpItem:
            eachNum=eachItem.split("\t")
            eachNumFloat=[float(item) for item in eachNum[1:]]
            #print (eachNum[0])
            if eachNum[0] in tmpDict:
                #print (eachNum[0])
                tmpDict[eachNum[0]] = [a + b for a, b in zip(eachNumFloat, tmpDict[eachNum[0]])]
            else:
                tmpDict[eachNum[0]]=eachNumFloat
                tmpList.append(eachNum[0])
        df = pd.DataFrame(tmpDict,columns=tmpList)
        sum_row = df.sum(axis=1)
        eachSampleSum=[str(item) for item in sum_row]
        print (eachKO+"\t"+"\t".join(eachSampleSum),file=outputF)
        for detailKey, detailValue in tmpDict.items():
            detailValueP=[str(item) for item in detailValue]
            print (detailKey+"\t"+"\t".join(detailValueP),file=outputF)
        #print (KOinfor.replace(";","\n"),file=outputF)
    inputF.close()
    outputF.close()
    
def main():
    usage="python3 rename-kegg-gene.py -in <input from humann2 kegg db> -db <db path> -out <output file>\n"
    usage+="parameters:\n"
    usage+='%-10s' % ("-in:")+" The input file generated by humann2 kegg results \n"
    usage+='%-10s' % ("-db:")+" The database path which contains prokaryotes.dat.gz and summary.txt(if species is 1) \n"
    usage+='%-10s' % ("-out:")+" The output file name (default: output.tsv) \n"
    usage+='%-10s' % ("-species:")+"0: leave the species code as in kegg; 1: Add species full name in output file (default is 0)\n"
    
    inputFile=None
    dbPath="db/"
    convertName=0
    output="output.tsv"
    
    for idx in range(len(sys.argv)):
        if (sys.argv[idx] == "-in") and (len(sys.argv) > idx + 1):
            inputFile=sys.argv[idx + 1]
        elif (sys.argv[idx] == "-h") or (sys.argv[idx] == "-help"):
            print (usage)
            sys.exit()
        elif (sys.argv[idx] == "-db") and (len(sys.argv) > idx + 1):
            dbPath=sys.argv[idx + 1]
        elif (sys.argv[idx] == "-out") and (len(sys.argv) > idx + 1):
            output=sys.argv[idx + 1]
        elif (sys.argv[idx] == "-species") and (len(sys.argv) > idx + 1):
            convertName=int(sys.argv[idx + 1])
            
            
    if os.path.isfile(dbPath+"/prokaryotes.dat.gz") and inputFile:
        geneToKO=loadDB(dbPath+"/prokaryotes.dat.gz")
        taxDict=dict()
        if convertName==1:
            if os.path.isfile(dbPath+"/summary.txt"):
                taxDict=loadTax(dbPath+"/summary.txt")
            else:
                print (usage)
                sys.exit()
        reformatUnstratified(inputFile,geneToKO,taxDict,convertName,output)
    else:
        print (usage)
        sys.exit()


if __name__ == '__main__':
    main()
